
STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003fa8  08003fa8  00013fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe8  08003fe8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003fe8  08003fe8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fe8  08003fe8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00013fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08003ffc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003ffc  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e25a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d72  00000000  00000000  0002e28f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010b0  00000000  00000000  00030008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd8  00000000  00000000  000310b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014489  00000000  00000000  00032090  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b347  00000000  00000000  00046519  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000744fd  00000000  00000000  00051860  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004778  00000000  00000000  000c5dd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f90 	.word	0x08003f90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003f90 	.word	0x08003f90

0800014c <PCF8574_load_data>:


    byte PCF8574_value[4];

    void PCF8574_load_data(byte id, byte data)
    {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	460a      	mov	r2, r1
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	4613      	mov	r3, r2
 800015a:	71bb      	strb	r3, [r7, #6]
         //I2C_Start();
    	HAL_I2C_Master_Transmit(&hi2c1, (0x40+(id <<1)), &data, 1, 100);
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	b29b      	uxth	r3, r3
 8000160:	005b      	lsls	r3, r3, #1
 8000162:	b29b      	uxth	r3, r3
 8000164:	3340      	adds	r3, #64	; 0x40
 8000166:	b299      	uxth	r1, r3
 8000168:	1dba      	adds	r2, r7, #6
 800016a:	2364      	movs	r3, #100	; 0x64
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2301      	movs	r3, #1
 8000170:	4803      	ldr	r0, [pc, #12]	; (8000180 <PCF8574_load_data+0x34>)
 8000172:	f001 fd49 	bl	8001c08 <HAL_I2C_Master_Transmit>
   //DS1307 mem pointer has been set to date information location....
   //I2C_data_send(data);


   //I2C_Stop();
    }
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000028 	.word	0x20000028

08000184 <PCF8574_set_pin>:
    //Each PCF8574 is given a number...
    void PCF8574_set_pin(byte id, byte pin_number, byte value)
    {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	71fb      	strb	r3, [r7, #7]
 800018e:	460b      	mov	r3, r1
 8000190:	71bb      	strb	r3, [r7, #6]
 8000192:	4613      	mov	r3, r2
 8000194:	717b      	strb	r3, [r7, #5]
        if(value) PCF8574_value[id] |= 1 <<pin_number;
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	2b00      	cmp	r3, #0
 800019a:	d00f      	beq.n	80001bc <PCF8574_set_pin+0x38>
 800019c:	79fb      	ldrb	r3, [r7, #7]
 800019e:	4a17      	ldr	r2, [pc, #92]	; (80001fc <PCF8574_set_pin+0x78>)
 80001a0:	5cd3      	ldrb	r3, [r2, r3]
 80001a2:	b25a      	sxtb	r2, r3
 80001a4:	79bb      	ldrb	r3, [r7, #6]
 80001a6:	2101      	movs	r1, #1
 80001a8:	fa01 f303 	lsl.w	r3, r1, r3
 80001ac:	b25b      	sxtb	r3, r3
 80001ae:	4313      	orrs	r3, r2
 80001b0:	b25a      	sxtb	r2, r3
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	b2d1      	uxtb	r1, r2
 80001b6:	4a11      	ldr	r2, [pc, #68]	; (80001fc <PCF8574_set_pin+0x78>)
 80001b8:	54d1      	strb	r1, [r2, r3]
 80001ba:	e010      	b.n	80001de <PCF8574_set_pin+0x5a>
        else PCF8574_value[id] &= ~(1 << pin_number);
 80001bc:	79fb      	ldrb	r3, [r7, #7]
 80001be:	4a0f      	ldr	r2, [pc, #60]	; (80001fc <PCF8574_set_pin+0x78>)
 80001c0:	5cd3      	ldrb	r3, [r2, r3]
 80001c2:	b25a      	sxtb	r2, r3
 80001c4:	79bb      	ldrb	r3, [r7, #6]
 80001c6:	2101      	movs	r1, #1
 80001c8:	fa01 f303 	lsl.w	r3, r1, r3
 80001cc:	b25b      	sxtb	r3, r3
 80001ce:	43db      	mvns	r3, r3
 80001d0:	b25b      	sxtb	r3, r3
 80001d2:	4013      	ands	r3, r2
 80001d4:	b25a      	sxtb	r2, r3
 80001d6:	79fb      	ldrb	r3, [r7, #7]
 80001d8:	b2d1      	uxtb	r1, r2
 80001da:	4a08      	ldr	r2, [pc, #32]	; (80001fc <PCF8574_set_pin+0x78>)
 80001dc:	54d1      	strb	r1, [r2, r3]
        PCF8574_load_data(id, PCF8574_value[id]);
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <PCF8574_set_pin+0x78>)
 80001e2:	5cd2      	ldrb	r2, [r2, r3]
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	4611      	mov	r1, r2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f7ff ffaf 	bl	800014c <PCF8574_load_data>
        HAL_Delay(1);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f000 fd62 	bl	8000cb8 <HAL_Delay>

    }
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	2000007c 	.word	0x2000007c

08000200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b08c      	sub	sp, #48	; 0x30
 8000204:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000206:	f000 fcf5 	bl	8000bf4 <HAL_Init>

  /* USER CODE BEGIN Init */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800020a:	4b65      	ldr	r3, [pc, #404]	; (80003a0 <main+0x1a0>)
 800020c:	699b      	ldr	r3, [r3, #24]
 800020e:	4a64      	ldr	r2, [pc, #400]	; (80003a0 <main+0x1a0>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6193      	str	r3, [r2, #24]
 8000216:	4b62      	ldr	r3, [pc, #392]	; (80003a0 <main+0x1a0>)
 8000218:	699b      	ldr	r3, [r3, #24]
 800021a:	f003 0304 	and.w	r3, r3, #4
 800021e:	60bb      	str	r3, [r7, #8]
 8000220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000222:	4b5f      	ldr	r3, [pc, #380]	; (80003a0 <main+0x1a0>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	4a5e      	ldr	r2, [pc, #376]	; (80003a0 <main+0x1a0>)
 8000228:	f043 0308 	orr.w	r3, r3, #8
 800022c:	6193      	str	r3, [r2, #24]
 800022e:	4b5c      	ldr	r3, [pc, #368]	; (80003a0 <main+0x1a0>)
 8000230:	699b      	ldr	r3, [r3, #24]
 8000232:	f003 0308 	and.w	r3, r3, #8
 8000236:	607b      	str	r3, [r7, #4]
 8000238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_AFIO_CLK_ENABLE();
 800023a:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <main+0x1a0>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4a58      	ldr	r2, [pc, #352]	; (80003a0 <main+0x1a0>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6193      	str	r3, [r2, #24]
 8000246:	4b56      	ldr	r3, [pc, #344]	; (80003a0 <main+0x1a0>)
 8000248:	699b      	ldr	r3, [r3, #24]
 800024a:	f003 0301 	and.w	r3, r3, #1
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000252:	f000 f8b3 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000256:	f000 fa6f 	bl	8000738 <MX_GPIO_Init>
  MX_ADC1_Init();
 800025a:	f000 f8ff 	bl	800045c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800025e:	f000 fa41 	bl	80006e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000262:	f000 f939 	bl	80004d8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000266:	f000 f965 	bl	8000534 <MX_SPI1_Init>
  MX_TIM1_Init();
 800026a:	f000 f999 	bl	80005a0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //SCL, SCA, AF OpenDrain
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

    //PIN8 and PIN0 alternative function output....
   GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800027c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000280:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000282:	2312      	movs	r3, #18
 8000284:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000286:	2302      	movs	r3, #2
 8000288:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	4619      	mov	r1, r3
 8000294:	4843      	ldr	r0, [pc, #268]	; (80003a4 <main+0x1a4>)
 8000296:	f001 fa25 	bl	80016e4 <HAL_GPIO_Init>

   //SS PIN
   GPIO_InitStruct.Pin =  GPIO_PIN_15;
 800029a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800029e:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a0:	2301      	movs	r3, #1
 80002a2:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a4:	2303      	movs	r3, #3
 80002a6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ac:	f107 0310 	add.w	r3, r7, #16
 80002b0:	4619      	mov	r1, r3
 80002b2:	483c      	ldr	r0, [pc, #240]	; (80003a4 <main+0x1a4>)
 80002b4:	f001 fa16 	bl	80016e4 <HAL_GPIO_Init>

   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002be:	4839      	ldr	r0, [pc, #228]	; (80003a4 <main+0x1a4>)
 80002c0:	f001 fb62 	bl	8001988 <HAL_GPIO_WritePin>



   GPIO_InitStruct.Pin =  GPIO_PIN_5 | GPIO_PIN_7;
 80002c4:	23a0      	movs	r3, #160	; 0xa0
 80002c6:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c8:	2302      	movs	r3, #2
 80002ca:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002cc:	2303      	movs	r3, #3
 80002ce:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d4:	f107 0310 	add.w	r3, r7, #16
 80002d8:	4619      	mov	r1, r3
 80002da:	4833      	ldr	r0, [pc, #204]	; (80003a8 <main+0x1a8>)
 80002dc:	f001 fa02 	bl	80016e4 <HAL_GPIO_Init>

   GPIO_InitStruct.Pin =  GPIO_PIN_6;
 80002e0:	2340      	movs	r3, #64	; 0x40
 80002e2:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_INPUT;
 80002e4:	2300      	movs	r3, #0
 80002e6:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e8:	2303      	movs	r3, #3
 80002ea:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	482c      	ldr	r0, [pc, #176]	; (80003a8 <main+0x1a8>)
 80002f8:	f001 f9f4 	bl	80016e4 <HAL_GPIO_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t adc_value; uint8_t data;
  byte val = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  byte temp = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	73bb      	strb	r3, [r7, #14]
  byte inf = 15;
 8000306:	230f      	movs	r3, #15
 8000308:	737b      	strb	r3, [r7, #13]
  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 );
  while (1)
  {
	  HAL_I2C_Master_Transmit(&hi2c1, 0x20<<1, &temp, 1, 100);
 800030a:	f107 020e 	add.w	r2, r7, #14
 800030e:	2364      	movs	r3, #100	; 0x64
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	4825      	ldr	r0, [pc, #148]	; (80003ac <main+0x1ac>)
 8000318:	f001 fc76 	bl	8001c08 <HAL_I2C_Master_Transmit>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000322:	4820      	ldr	r0, [pc, #128]	; (80003a4 <main+0x1a4>)
 8000324:	f001 fb30 	bl	8001988 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 8000328:	2003      	movs	r0, #3
 800032a:	f000 fcc5 	bl	8000cb8 <HAL_Delay>
	  data = HAL_SPI_Transmit(&hspi1, &inf, 1, 100);
 800032e:	f107 010d 	add.w	r1, r7, #13
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	2201      	movs	r2, #1
 8000336:	481e      	ldr	r0, [pc, #120]	; (80003b0 <main+0x1b0>)
 8000338:	f002 fd4f 	bl	8002dda <HAL_SPI_Transmit>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]
	  HAL_Delay(3);
 8000340:	2003      	movs	r0, #3
 8000342:	f000 fcb9 	bl	8000cb8 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800034c:	4815      	ldr	r0, [pc, #84]	; (80003a4 <main+0x1a4>)
 800034e:	f001 fb1b 	bl	8001988 <HAL_GPIO_WritePin>

	  val = ~val;
 8000352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000356:	43db      	mvns	r3, r3
 8000358:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  PCF8574_set_pin(0,  1, val & 0x1);
 800035c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000360:	f003 0301 	and.w	r3, r3, #1
 8000364:	b2db      	uxtb	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	2101      	movs	r1, #1
 800036a:	2000      	movs	r0, #0
 800036c:	f7ff ff0a 	bl	8000184 <PCF8574_set_pin>
	  HAL_ADC_Start(&hadc1);
 8000370:	4810      	ldr	r0, [pc, #64]	; (80003b4 <main+0x1b4>)
 8000372:	f000 fd9b 	bl	8000eac <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000376:	2164      	movs	r1, #100	; 0x64
 8000378:	480e      	ldr	r0, [pc, #56]	; (80003b4 <main+0x1b4>)
 800037a:	f000 fe45 	bl	8001008 <HAL_ADC_PollForConversion>
	  adc_value = HAL_ADC_GetValue(&hadc1);
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <main+0x1b4>)
 8000380:	f000 ff3c 	bl	80011fc <HAL_ADC_GetValue>
 8000384:	6238      	str	r0, [r7, #32]
	  //data = (adc_value*5.0)/4095*100;
	  HAL_UART_Transmit(&huart1, &data, 1, 100);
 8000386:	f107 010f 	add.w	r1, r7, #15
 800038a:	2364      	movs	r3, #100	; 0x64
 800038c:	2201      	movs	r2, #1
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <main+0x1b8>)
 8000390:	f003 fc14 	bl	8003bbc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000394:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000398:	f000 fc8e 	bl	8000cb8 <HAL_Delay>
	  HAL_I2C_Master_Transmit(&hi2c1, 0x20<<1, &temp, 1, 100);
 800039c:	e7b5      	b.n	800030a <main+0x10a>
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800
 80003ac:	20000028 	.word	0x20000028
 80003b0:	20000130 	.word	0x20000130
 80003b4:	20000080 	.word	0x20000080
 80003b8:	200000b0 	.word	0x200000b0

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b094      	sub	sp, #80	; 0x50
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003c6:	2228      	movs	r2, #40	; 0x28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f003 fdd8 	bl	8003f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ec:	2302      	movs	r3, #2
 80003ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003f0:	2301      	movs	r3, #1
 80003f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003f4:	2310      	movs	r3, #16
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f8:	2300      	movs	r3, #0
 80003fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fefb 	bl	80021fc <HAL_RCC_OscConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800040c:	f000 f9d2 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000410:	230f      	movs	r3, #15
 8000412:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 f966 	bl	80026fc <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000436:	f000 f9bd 	bl	80007b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800043a:	2302      	movs	r3, #2
 800043c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	4618      	mov	r0, r3
 8000446:	f002 faf5 	bl	8002a34 <HAL_RCCEx_PeriphCLKConfig>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d001      	beq.n	8000454 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000450:	f000 f9b0 	bl	80007b4 <Error_Handler>
  }
}
 8000454:	bf00      	nop
 8000456:	3750      	adds	r7, #80	; 0x50
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000462:	1d3b      	adds	r3, r7, #4
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_ADC1_Init+0x74>)
 800046e:	4a19      	ldr	r2, [pc, #100]	; (80004d4 <MX_ADC1_Init+0x78>)
 8000470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_ADC1_Init+0x74>)
 800047a:	2200      	movs	r2, #0
 800047c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800047e:	4b14      	ldr	r3, [pc, #80]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000480:	2200      	movs	r2, #0
 8000482:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000486:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800048a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MX_ADC1_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000492:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_ADC1_Init+0x74>)
 8000494:	2201      	movs	r2, #1
 8000496:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000498:	480d      	ldr	r0, [pc, #52]	; (80004d0 <MX_ADC1_Init+0x74>)
 800049a:	f000 fc2f 	bl	8000cfc <HAL_ADC_Init>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80004a4:	f000 f986 	bl	80007b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ac:	2301      	movs	r3, #1
 80004ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	4805      	ldr	r0, [pc, #20]	; (80004d0 <MX_ADC1_Init+0x74>)
 80004ba:	f000 feab 	bl	8001214 <HAL_ADC_ConfigChannel>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80004c4:	f000 f976 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004c8:	bf00      	nop
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000080 	.word	0x20000080
 80004d4:	40012400 	.word	0x40012400

080004d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C1_Init+0x50>)
 80004de:	4a13      	ldr	r2, [pc, #76]	; (800052c <MX_I2C1_Init+0x54>)
 80004e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C1_Init+0x50>)
 80004e4:	4a12      	ldr	r2, [pc, #72]	; (8000530 <MX_I2C1_Init+0x58>)
 80004e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C1_Init+0x50>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <MX_I2C1_Init+0x50>)
 80004f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_I2C1_Init+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <MX_I2C1_Init+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000514:	4804      	ldr	r0, [pc, #16]	; (8000528 <MX_I2C1_Init+0x50>)
 8000516:	f001 fa4f 	bl	80019b8 <HAL_I2C_Init>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000520:	f000 f948 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000028 	.word	0x20000028
 800052c:	40005400 	.word	0x40005400
 8000530:	000186a0 	.word	0x000186a0

08000534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000538:	4b17      	ldr	r3, [pc, #92]	; (8000598 <MX_SPI1_Init+0x64>)
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <MX_SPI1_Init+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <MX_SPI1_Init+0x64>)
 8000540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000546:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_SPI1_Init+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800054c:	4b12      	ldr	r3, [pc, #72]	; (8000598 <MX_SPI1_Init+0x64>)
 800054e:	2200      	movs	r2, #0
 8000550:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_SPI1_Init+0x64>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_SPI1_Init+0x64>)
 800055a:	2200      	movs	r2, #0
 800055c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_SPI1_Init+0x64>)
 8000560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000564:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_SPI1_Init+0x64>)
 8000568:	2218      	movs	r2, #24
 800056a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <MX_SPI1_Init+0x64>)
 800056e:	2200      	movs	r2, #0
 8000570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_SPI1_Init+0x64>)
 8000574:	2200      	movs	r2, #0
 8000576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <MX_SPI1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800057e:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_SPI1_Init+0x64>)
 8000580:	220a      	movs	r2, #10
 8000582:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_SPI1_Init+0x64>)
 8000586:	f002 fbc7 	bl	8002d18 <HAL_SPI_Init>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000590:	f000 f910 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000130 	.word	0x20000130
 800059c:	40013000 	.word	0x40013000

080005a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2220      	movs	r2, #32
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 fcd1 	bl	8003f80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005de:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <MX_TIM1_Init+0x13c>)
 80005e0:	4a3f      	ldr	r2, [pc, #252]	; (80006e0 <MX_TIM1_Init+0x140>)
 80005e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000;
 80005e4:	4b3d      	ldr	r3, [pc, #244]	; (80006dc <MX_TIM1_Init+0x13c>)
 80005e6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ec:	4b3b      	ldr	r3, [pc, #236]	; (80006dc <MX_TIM1_Init+0x13c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <MX_TIM1_Init+0x13c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80005f8:	4b38      	ldr	r3, [pc, #224]	; (80006dc <MX_TIM1_Init+0x13c>)
 80005fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000600:	4b36      	ldr	r3, [pc, #216]	; (80006dc <MX_TIM1_Init+0x13c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000606:	4b35      	ldr	r3, [pc, #212]	; (80006dc <MX_TIM1_Init+0x13c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800060c:	4833      	ldr	r0, [pc, #204]	; (80006dc <MX_TIM1_Init+0x13c>)
 800060e:	f002 fda0 	bl	8003152 <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000618:	f000 f8cc 	bl	80007b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000626:	4619      	mov	r1, r3
 8000628:	482c      	ldr	r0, [pc, #176]	; (80006dc <MX_TIM1_Init+0x13c>)
 800062a:	f002 feb7 	bl	800339c <HAL_TIM_ConfigClockSource>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000634:	f000 f8be 	bl	80007b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000638:	4828      	ldr	r0, [pc, #160]	; (80006dc <MX_TIM1_Init+0x13c>)
 800063a:	f002 fdb5 	bl	80031a8 <HAL_TIM_PWM_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000644:	f000 f8b6 	bl	80007b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000650:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000654:	4619      	mov	r1, r3
 8000656:	4821      	ldr	r0, [pc, #132]	; (80006dc <MX_TIM1_Init+0x13c>)
 8000658:	f003 f9ce 	bl	80039f8 <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000662:	f000 f8a7 	bl	80007b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000666:	2360      	movs	r3, #96	; 0x60
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <MX_TIM1_Init+0x13c>)
 800068c:	f002 fdc0 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000696:	f000 f88d 	bl	80007b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4807      	ldr	r0, [pc, #28]	; (80006dc <MX_TIM1_Init+0x13c>)
 80006be:	f003 f9df 	bl	8003a80 <HAL_TIMEx_ConfigBreakDeadTime>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80006c8:	f000 f874 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006cc:	4803      	ldr	r0, [pc, #12]	; (80006dc <MX_TIM1_Init+0x13c>)
 80006ce:	f000 f98d 	bl	80009ec <HAL_TIM_MspPostInit>

}
 80006d2:	bf00      	nop
 80006d4:	3758      	adds	r7, #88	; 0x58
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000f0 	.word	0x200000f0
 80006e0:	40012c00 	.word	0x40012c00

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART1_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART1_UART_Init+0x4c>)
 800071c:	f003 fa01 	bl	8003b22 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f845 	bl	80007b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000b0 	.word	0x200000b0
 8000734:	40013800 	.word	0x40013800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0308 	add.w	r3, r7, #8
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_GPIO_Init+0x74>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_GPIO_Init+0x74>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_GPIO_Init+0x74>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_GPIO_Init+0x74>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <MX_GPIO_Init+0x74>)
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_GPIO_Init+0x74>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0308 	and.w	r3, r3, #8
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2102      	movs	r1, #2
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <MX_GPIO_Init+0x78>)
 8000782:	f001 f901 	bl	8001988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000786:	2302      	movs	r3, #2
 8000788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2302      	movs	r3, #2
 8000794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	4619      	mov	r1, r3
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_GPIO_Init+0x78>)
 800079e:	f000 ffa1 	bl	80016e4 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40010800 	.word	0x40010800

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_MspInit+0x5c>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_MspInit+0x5c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6193      	str	r3, [r2, #24]
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_MspInit+0x5c>)
 80007d4:	699b      	ldr	r3, [r3, #24]
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_MspInit+0x5c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <HAL_MspInit+0x5c>)
 80007e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e8:	61d3      	str	r3, [r2, #28]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <HAL_MspInit+0x5c>)
 80007ec:	69db      	ldr	r3, [r3, #28]
 80007ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_MspInit+0x60>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	4a04      	ldr	r2, [pc, #16]	; (8000820 <HAL_MspInit+0x60>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	3714      	adds	r7, #20
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr
 800081c:	40021000 	.word	0x40021000
 8000820:	40010000 	.word	0x40010000

08000824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 0310 	add.w	r3, r7, #16
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_ADC_MspInit+0x6c>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d121      	bne.n	8000888 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <HAL_ADC_MspInit+0x70>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a12      	ldr	r2, [pc, #72]	; (8000894 <HAL_ADC_MspInit+0x70>)
 800084a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_ADC_MspInit+0x70>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_ADC_MspInit+0x70>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <HAL_ADC_MspInit+0x70>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_ADC_MspInit+0x70>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	2303      	movs	r3, #3
 800087a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_ADC_MspInit+0x74>)
 8000884:	f000 ff2e 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000888:	bf00      	nop
 800088a:	3720      	adds	r7, #32
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012400 	.word	0x40012400
 8000894:	40021000 	.word	0x40021000
 8000898:	40010800 	.word	0x40010800

0800089c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a16      	ldr	r2, [pc, #88]	; (8000910 <HAL_I2C_MspInit+0x74>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d125      	bne.n	8000908 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008c2:	f043 0308 	orr.w	r3, r3, #8
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0308 	and.w	r3, r3, #8
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d4:	23c0      	movs	r3, #192	; 0xc0
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d8:	2312      	movs	r3, #18
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4619      	mov	r1, r3
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_I2C_MspInit+0x7c>)
 80008ec:	f000 fefa 	bl	80016e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008fa:	61d3      	str	r3, [r2, #28]
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <HAL_I2C_MspInit+0x78>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40005400 	.word	0x40005400
 8000914:	40021000 	.word	0x40021000
 8000918:	40010c00 	.word	0x40010c00

0800091c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_SPI_MspInit+0x88>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d12f      	bne.n	800099c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a19      	ldr	r2, [pc, #100]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 8000942:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a13      	ldr	r2, [pc, #76]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_SPI_MspInit+0x8c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800096c:	23a0      	movs	r3, #160	; 0xa0
 800096e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	4619      	mov	r1, r3
 800097e:	480b      	ldr	r0, [pc, #44]	; (80009ac <HAL_SPI_MspInit+0x90>)
 8000980:	f000 feb0 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <HAL_SPI_MspInit+0x90>)
 8000998:	f000 fea4 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013000 	.word	0x40013000
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a09      	ldr	r2, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x34>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d10b      	bne.n	80009da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009cc:	6193      	str	r3, [r2, #24]
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_TIM_Base_MspInit+0x38>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3714      	adds	r7, #20
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40012c00 	.word	0x40012c00
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <HAL_TIM_MspPostInit+0x5c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d118      	bne.n	8000a3e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_TIM_MspPostInit+0x60>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_TIM_MspPostInit+0x60>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_TIM_MspPostInit+0x60>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0310 	add.w	r3, r7, #16
 8000a36:	4619      	mov	r1, r3
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_TIM_MspPostInit+0x64>)
 8000a3a:	f000 fe53 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40012c00 	.word	0x40012c00
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010800 	.word	0x40010800

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <HAL_UART_MspInit+0x8c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d131      	bne.n	8000ad8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_UART_MspInit+0x90>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <HAL_UART_MspInit+0x94>)
 8000aba:	f000 fe13 	bl	80016e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x94>)
 8000ad4:	f000 fe06 	bl	80016e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3720      	adds	r7, #32
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40013800 	.word	0x40013800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010800 	.word	0x40010800

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <HardFault_Handler+0x4>

08000afe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <MemManage_Handler+0x4>

08000b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <BusFault_Handler+0x4>

08000b0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 f8a2 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <SystemInit+0x5c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <SystemInit+0x5c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <SystemInit+0x5c>)
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	4911      	ldr	r1, [pc, #68]	; (8000b9c <SystemInit+0x5c>)
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SystemInit+0x60>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <SystemInit+0x5c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0e      	ldr	r2, [pc, #56]	; (8000b9c <SystemInit+0x5c>)
 8000b62:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <SystemInit+0x5c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <SystemInit+0x5c>)
 8000b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b76:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x5c>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x5c>)
 8000b7e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b82:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SystemInit+0x5c>)
 8000b86:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b8a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SystemInit+0x64>)
 8000b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b92:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	f8ff0000 	.word	0xf8ff0000
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ba8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000baa:	e003      	b.n	8000bb4 <LoopCopyDataInit>

08000bac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb2:	3104      	adds	r1, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bb8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bbc:	d3f6      	bcc.n	8000bac <CopyDataInit>
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc0:	e002      	b.n	8000bc8 <LoopFillZerobss>

08000bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc4:	f842 3b04 	str.w	r3, [r2], #4

08000bc8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bca:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bcc:	d3f9      	bcc.n	8000bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bce:	f7ff ffb7 	bl	8000b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd2:	f003 f9b1 	bl	8003f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd6:	f7ff fb13 	bl	8000200 <main>
  bx lr
 8000bda:	4770      	bx	lr
  ldr r3, =_sidata
 8000bdc:	08003ff0 	.word	0x08003ff0
  ldr r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000bec:	2000018c 	.word	0x2000018c

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	; (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 fd39 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fdd6 	bl	80007c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fd43 	bl	80016ca <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f000 fd19 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <HAL_IncTick+0x1c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a03      	ldr	r2, [pc, #12]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000188 	.word	0x20000188

08000ca4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <HAL_GetTick+0x10>)
 8000caa:	681b      	ldr	r3, [r3, #0]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	20000188 	.word	0x20000188

08000cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc0:	f7ff fff0 	bl	8000ca4 <HAL_GetTick>
 8000cc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd0:	d005      	beq.n	8000cde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <HAL_Delay+0x40>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cde:	bf00      	nop
 8000ce0:	f7ff ffe0 	bl	8000ca4 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d8f7      	bhi.n	8000ce0 <HAL_Delay+0x28>
  {
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e0be      	b.n	8000e9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d109      	bne.n	8000d40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fd72 	bl	8000824 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 fbb1 	bl	80014a8 <ADC_ConversionStop_Disable>
 8000d46:	4603      	mov	r3, r0
 8000d48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8099 	bne.w	8000e8a <HAL_ADC_Init+0x18e>
 8000d58:	7dfb      	ldrb	r3, [r7, #23]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f040 8095 	bne.w	8000e8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d68:	f023 0302 	bic.w	r3, r3, #2
 8000d6c:	f043 0202 	orr.w	r2, r3, #2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	7b1b      	ldrb	r3, [r3, #12]
 8000d82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d94:	d003      	beq.n	8000d9e <HAL_ADC_Init+0xa2>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d102      	bne.n	8000da4 <HAL_ADC_Init+0xa8>
 8000d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da2:	e000      	b.n	8000da6 <HAL_ADC_Init+0xaa>
 8000da4:	2300      	movs	r3, #0
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	7d1b      	ldrb	r3, [r3, #20]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d119      	bne.n	8000de8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7b1b      	ldrb	r3, [r3, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d109      	bne.n	8000dd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	035a      	lsls	r2, r3, #13
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	e00b      	b.n	8000de8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd4:	f043 0220 	orr.w	r2, r3, #32
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de0:	f043 0201 	orr.w	r2, r3, #1
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <HAL_ADC_Init+0x1a8>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6812      	ldr	r2, [r2, #0]
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	430b      	orrs	r3, r1
 8000e0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e18:	d003      	beq.n	8000e22 <HAL_ADC_Init+0x126>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d104      	bne.n	8000e2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	691b      	ldr	r3, [r3, #16]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	051b      	lsls	r3, r3, #20
 8000e2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_ADC_Init+0x1ac>)
 8000e48:	4013      	ands	r3, r2
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d10b      	bne.n	8000e68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	f023 0303 	bic.w	r3, r3, #3
 8000e5e:	f043 0201 	orr.w	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e66:	e018      	b.n	8000e9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f023 0312 	bic.w	r3, r3, #18
 8000e70:	f043 0210 	orr.w	r2, r3, #16
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	f043 0201 	orr.w	r2, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e88:	e007      	b.n	8000e9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ea8:	ff1f0efe 	.word	0xff1f0efe

08000eac <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d101      	bne.n	8000ec6 <HAL_ADC_Start+0x1a>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e098      	b.n	8000ff8 <HAL_ADC_Start+0x14c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 fa98 	bl	8001404 <ADC_Enable>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8087 	bne.w	8000fee <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ee8:	f023 0301 	bic.w	r3, r3, #1
 8000eec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a41      	ldr	r2, [pc, #260]	; (8001000 <HAL_ADC_Start+0x154>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d105      	bne.n	8000f0a <HAL_ADC_Start+0x5e>
 8000efe:	4b41      	ldr	r3, [pc, #260]	; (8001004 <HAL_ADC_Start+0x158>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d115      	bne.n	8000f36 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d026      	beq.n	8000f72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f34:	e01d      	b.n	8000f72 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a2f      	ldr	r2, [pc, #188]	; (8001004 <HAL_ADC_Start+0x158>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d004      	beq.n	8000f56 <HAL_ADC_Start+0xaa>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2b      	ldr	r2, [pc, #172]	; (8001000 <HAL_ADC_Start+0x154>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10d      	bne.n	8000f72 <HAL_ADC_Start+0xc6>
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <HAL_ADC_Start+0x158>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d007      	beq.n	8000f72 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f82:	f023 0206 	bic.w	r2, r3, #6
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f8a:	e002      	b.n	8000f92 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f06f 0202 	mvn.w	r2, #2
 8000fa2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fb2:	d113      	bne.n	8000fdc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fb8:	4a11      	ldr	r2, [pc, #68]	; (8001000 <HAL_ADC_Start+0x154>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d105      	bne.n	8000fca <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_ADC_Start+0x158>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	e00c      	b.n	8000ff6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e003      	b.n	8000ff6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40012800 	.word	0x40012800
 8001004:	40012400 	.word	0x40012400

08001008 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b087      	sub	sp, #28
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800101e:	f7ff fe41 	bl	8000ca4 <HAL_GetTick>
 8001022:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f043 0220 	orr.w	r2, r3, #32
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e0c8      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d12a      	bne.n	80010ae <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d123      	bne.n	80010ae <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001066:	e01a      	b.n	800109e <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106e:	d016      	beq.n	800109e <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d007      	beq.n	8001086 <HAL_ADC_PollForConversion+0x7e>
 8001076:	f7ff fe15 	bl	8000ca4 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d20b      	bcs.n	800109e <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	f043 0204 	orr.w	r2, r3, #4
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e09e      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0dd      	beq.n	8001068 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80010ac:	e06c      	b.n	8001188 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <HAL_ADC_PollForConversion+0x1dc>)
 80010b0:	681c      	ldr	r4, [r3, #0]
 80010b2:	2002      	movs	r0, #2
 80010b4:	f001 fd74 	bl	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 80010b8:	4603      	mov	r3, r0
 80010ba:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6919      	ldr	r1, [r3, #16]
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <HAL_ADC_PollForConversion+0x1e0>)
 80010c6:	400b      	ands	r3, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d118      	bne.n	80010fe <HAL_ADC_PollForConversion+0xf6>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68d9      	ldr	r1, [r3, #12]
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <HAL_ADC_PollForConversion+0x1e4>)
 80010d4:	400b      	ands	r3, r1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d111      	bne.n	80010fe <HAL_ADC_PollForConversion+0xf6>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6919      	ldr	r1, [r3, #16]
 80010e0:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_ADC_PollForConversion+0x1e8>)
 80010e2:	400b      	ands	r3, r1
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d108      	bne.n	80010fa <HAL_ADC_PollForConversion+0xf2>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68d9      	ldr	r1, [r3, #12]
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_ADC_PollForConversion+0x1ec>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_PollForConversion+0xf2>
 80010f6:	2314      	movs	r3, #20
 80010f8:	e020      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 80010fa:	2329      	movs	r3, #41	; 0x29
 80010fc:	e01e      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6919      	ldr	r1, [r3, #16]
 8001104:	4b3a      	ldr	r3, [pc, #232]	; (80011f0 <HAL_ADC_PollForConversion+0x1e8>)
 8001106:	400b      	ands	r3, r1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d106      	bne.n	800111a <HAL_ADC_PollForConversion+0x112>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68d9      	ldr	r1, [r3, #12]
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <HAL_ADC_PollForConversion+0x1ec>)
 8001114:	400b      	ands	r3, r1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00d      	beq.n	8001136 <HAL_ADC_PollForConversion+0x12e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6919      	ldr	r1, [r3, #16]
 8001120:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001122:	400b      	ands	r3, r1
 8001124:	2b00      	cmp	r3, #0
 8001126:	d108      	bne.n	800113a <HAL_ADC_PollForConversion+0x132>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_ADC_PollForConversion+0x1f0>)
 8001130:	400b      	ands	r3, r1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_PollForConversion+0x132>
 8001136:	2354      	movs	r3, #84	; 0x54
 8001138:	e000      	b.n	800113c <HAL_ADC_PollForConversion+0x134>
 800113a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001142:	e01d      	b.n	8001180 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114a:	d016      	beq.n	800117a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_ADC_PollForConversion+0x15a>
 8001152:	f7ff fda7 	bl	8000ca4 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d20b      	bcs.n	800117a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001166:	f043 0204 	orr.w	r2, r3, #4
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e030      	b.n	80011dc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	3301      	adds	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	429a      	cmp	r2, r3
 8001186:	d8dd      	bhi.n	8001144 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f06f 0212 	mvn.w	r2, #18
 8001190:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011a8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011ac:	d115      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d111      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d105      	bne.n	80011da <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d2:	f043 0201 	orr.w	r2, r3, #1
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	24924924 	.word	0x24924924
 80011ec:	00924924 	.word	0x00924924
 80011f0:	12492492 	.word	0x12492492
 80011f4:	00492492 	.word	0x00492492
 80011f8:	00249249 	.word	0x00249249

080011fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x20>
 8001230:	2302      	movs	r3, #2
 8001232:	e0dc      	b.n	80013ee <HAL_ADC_ConfigChannel+0x1da>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b06      	cmp	r3, #6
 8001242:	d81c      	bhi.n	800127e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b05      	subs	r3, #5
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	4613      	mov	r3, r2
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	3b05      	subs	r3, #5
 8001270:	fa00 f203 	lsl.w	r2, r0, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	; 0x34
 800127c:	e03c      	b.n	80012f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d81c      	bhi.n	80012c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	3b23      	subs	r3, #35	; 0x23
 8001298:	221f      	movs	r2, #31
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	4019      	ands	r1, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	3b23      	subs	r3, #35	; 0x23
 80012b2:	fa00 f203 	lsl.w	r2, r0, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
 80012be:	e01b      	b.n	80012f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	3b41      	subs	r3, #65	; 0x41
 80012d2:	221f      	movs	r2, #31
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4019      	ands	r1, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b41      	subs	r3, #65	; 0x41
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d91c      	bls.n	800133a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d9      	ldr	r1, [r3, #12]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	3b1e      	subs	r3, #30
 8001312:	2207      	movs	r2, #7
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	4019      	ands	r1, r3
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6898      	ldr	r0, [r3, #8]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	3b1e      	subs	r3, #30
 800132c:	fa00 f203 	lsl.w	r2, r0, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	430a      	orrs	r2, r1
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	e019      	b.n	800136e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6919      	ldr	r1, [r3, #16]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	2207      	movs	r2, #7
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	4019      	ands	r1, r3
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	6898      	ldr	r0, [r3, #8]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b10      	cmp	r3, #16
 8001374:	d003      	beq.n	800137e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800137a:	2b11      	cmp	r3, #17
 800137c:	d132      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1d      	ldr	r2, [pc, #116]	; (80013f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d125      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d126      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80013a4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b10      	cmp	r3, #16
 80013ac:	d11a      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HAL_ADC_ConfigChannel+0x1e8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <HAL_ADC_ConfigChannel+0x1ec>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	0c9a      	lsrs	r2, r3, #18
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c4:	e002      	b.n	80013cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f9      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x1b2>
 80013d2:	e007      	b.n	80013e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d8:	f043 0220 	orr.w	r2, r3, #32
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr
 80013f8:	40012400 	.word	0x40012400
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d039      	beq.n	8001496 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <ADC_Enable+0x9c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <ADC_Enable+0xa0>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	0c9b      	lsrs	r3, r3, #18
 800143e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001440:	e002      	b.n	8001448 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800144e:	f7ff fc29 	bl	8000ca4 <HAL_GetTick>
 8001452:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001454:	e018      	b.n	8001488 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001456:	f7ff fc25 	bl	8000ca4 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d911      	bls.n	8001488 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	f043 0210 	orr.w	r2, r3, #16
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e007      	b.n	8001498 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b01      	cmp	r3, #1
 8001494:	d1df      	bne.n	8001456 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20000000 	.word	0x20000000
 80014a4:	431bde83 	.word	0x431bde83

080014a8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d127      	bne.n	8001512 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0201 	bic.w	r2, r2, #1
 80014d0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014d2:	f7ff fbe7 	bl	8000ca4 <HAL_GetTick>
 80014d6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80014d8:	e014      	b.n	8001504 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014da:	f7ff fbe3 	bl	8000ca4 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d90d      	bls.n	8001504 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f043 0210 	orr.w	r2, r3, #16
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	f043 0201 	orr.w	r2, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e007      	b.n	8001514 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d0e3      	beq.n	80014da <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	; (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff49 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff5e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffb0 	bl	8001638 <SysTick_Config>
 80016d8:	4603      	mov	r3, r0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
	...

080016e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b08b      	sub	sp, #44	; 0x2c
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e121      	b.n	800193c <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f8:	2201      	movs	r2, #1
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	69fa      	ldr	r2, [r7, #28]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8110 	bne.w	8001936 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d034      	beq.n	8001788 <HAL_GPIO_Init+0xa4>
 800171e:	2b12      	cmp	r3, #18
 8001720:	d80d      	bhi.n	800173e <HAL_GPIO_Init+0x5a>
 8001722:	2b02      	cmp	r3, #2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x9a>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d804      	bhi.n	8001734 <HAL_GPIO_Init+0x50>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d031      	beq.n	8001792 <HAL_GPIO_Init+0xae>
 800172e:	2b01      	cmp	r3, #1
 8001730:	d01c      	beq.n	800176c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001732:	e048      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001734:	2b03      	cmp	r3, #3
 8001736:	d043      	beq.n	80017c0 <HAL_GPIO_Init+0xdc>
 8001738:	2b11      	cmp	r3, #17
 800173a:	d01b      	beq.n	8001774 <HAL_GPIO_Init+0x90>
          break;
 800173c:	e043      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800173e:	4a86      	ldr	r2, [pc, #536]	; (8001958 <HAL_GPIO_Init+0x274>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d026      	beq.n	8001792 <HAL_GPIO_Init+0xae>
 8001744:	4a84      	ldr	r2, [pc, #528]	; (8001958 <HAL_GPIO_Init+0x274>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d806      	bhi.n	8001758 <HAL_GPIO_Init+0x74>
 800174a:	4a84      	ldr	r2, [pc, #528]	; (800195c <HAL_GPIO_Init+0x278>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d020      	beq.n	8001792 <HAL_GPIO_Init+0xae>
 8001750:	4a83      	ldr	r2, [pc, #524]	; (8001960 <HAL_GPIO_Init+0x27c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01d      	beq.n	8001792 <HAL_GPIO_Init+0xae>
          break;
 8001756:	e036      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001758:	4a82      	ldr	r2, [pc, #520]	; (8001964 <HAL_GPIO_Init+0x280>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d019      	beq.n	8001792 <HAL_GPIO_Init+0xae>
 800175e:	4a82      	ldr	r2, [pc, #520]	; (8001968 <HAL_GPIO_Init+0x284>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d016      	beq.n	8001792 <HAL_GPIO_Init+0xae>
 8001764:	4a81      	ldr	r2, [pc, #516]	; (800196c <HAL_GPIO_Init+0x288>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_GPIO_Init+0xae>
          break;
 800176a:	e02c      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	623b      	str	r3, [r7, #32]
          break;
 8001772:	e028      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	3304      	adds	r3, #4
 800177a:	623b      	str	r3, [r7, #32]
          break;
 800177c:	e023      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	3308      	adds	r3, #8
 8001784:	623b      	str	r3, [r7, #32]
          break;
 8001786:	e01e      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	330c      	adds	r3, #12
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	e019      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d102      	bne.n	80017a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179a:	2304      	movs	r3, #4
 800179c:	623b      	str	r3, [r7, #32]
          break;
 800179e:	e012      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d105      	bne.n	80017b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a8:	2308      	movs	r3, #8
 80017aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	611a      	str	r2, [r3, #16]
          break;
 80017b2:	e008      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b4:	2308      	movs	r3, #8
 80017b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	615a      	str	r2, [r3, #20]
          break;
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c0:	2300      	movs	r3, #0
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2bff      	cmp	r3, #255	; 0xff
 80017ca:	d801      	bhi.n	80017d0 <HAL_GPIO_Init+0xec>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	e001      	b.n	80017d4 <HAL_GPIO_Init+0xf0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3304      	adds	r3, #4
 80017d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	2bff      	cmp	r3, #255	; 0xff
 80017da:	d802      	bhi.n	80017e2 <HAL_GPIO_Init+0xfe>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x104>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	3b08      	subs	r3, #8
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	210f      	movs	r1, #15
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	401a      	ands	r2, r3
 80017fa:	6a39      	ldr	r1, [r7, #32]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001802:	431a      	orrs	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8090 	beq.w	8001936 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001816:	4b56      	ldr	r3, [pc, #344]	; (8001970 <HAL_GPIO_Init+0x28c>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	4a55      	ldr	r2, [pc, #340]	; (8001970 <HAL_GPIO_Init+0x28c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_GPIO_Init+0x28c>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800182e:	4a51      	ldr	r2, [pc, #324]	; (8001974 <HAL_GPIO_Init+0x290>)
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	089b      	lsrs	r3, r3, #2
 8001834:	3302      	adds	r3, #2
 8001836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	220f      	movs	r2, #15
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	43db      	mvns	r3, r3
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_GPIO_Init+0x294>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x192>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a47      	ldr	r2, [pc, #284]	; (800197c <HAL_GPIO_Init+0x298>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x18e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a46      	ldr	r2, [pc, #280]	; (8001980 <HAL_GPIO_Init+0x29c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x18a>
 800186a:	2302      	movs	r3, #2
 800186c:	e004      	b.n	8001878 <HAL_GPIO_Init+0x194>
 800186e:	2303      	movs	r3, #3
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x194>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_GPIO_Init+0x194>
 8001876:	2300      	movs	r3, #0
 8001878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187a:	f002 0203 	and.w	r2, r2, #3
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	4093      	lsls	r3, r2
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4313      	orrs	r3, r2
 8001886:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001888:	493a      	ldr	r1, [pc, #232]	; (8001974 <HAL_GPIO_Init+0x290>)
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	3302      	adds	r3, #2
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a2:	4b38      	ldr	r3, [pc, #224]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b34      	ldr	r3, [pc, #208]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4932      	ldr	r1, [pc, #200]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	492d      	ldr	r1, [pc, #180]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	4928      	ldr	r1, [pc, #160]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	4923      	ldr	r1, [pc, #140]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	491e      	ldr	r1, [pc, #120]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800190a:	4013      	ands	r3, r2
 800190c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800191c:	68da      	ldr	r2, [r3, #12]
 800191e:	4919      	ldr	r1, [pc, #100]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	4313      	orrs	r3, r2
 8001924:	60cb      	str	r3, [r1, #12]
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4914      	ldr	r1, [pc, #80]	; (8001984 <HAL_GPIO_Init+0x2a0>)
 8001932:	4013      	ands	r3, r2
 8001934:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f aed6 	bne.w	80016f8 <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	372c      	adds	r7, #44	; 0x2c
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	10210000 	.word	0x10210000
 800195c:	10110000 	.word	0x10110000
 8001960:	10120000 	.word	0x10120000
 8001964:	10310000 	.word	0x10310000
 8001968:	10320000 	.word	0x10320000
 800196c:	10220000 	.word	0x10220000
 8001970:	40021000 	.word	0x40021000
 8001974:	40010000 	.word	0x40010000
 8001978:	40010800 	.word	0x40010800
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40011000 	.word	0x40011000
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	807b      	strh	r3, [r7, #2]
 8001994:	4613      	mov	r3, r2
 8001996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001998:	787b      	ldrb	r3, [r7, #1]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a4:	e003      	b.n	80019ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a6:	887b      	ldrh	r3, [r7, #2]
 80019a8:	041a      	lsls	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	611a      	str	r2, [r3, #16]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e10f      	b.n	8001bea <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe ff5c 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019fc:	f000 ffd4 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4a7b      	ldr	r2, [pc, #492]	; (8001bf4 <HAL_I2C_Init+0x23c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d807      	bhi.n	8001a1c <HAL_I2C_Init+0x64>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a7a      	ldr	r2, [pc, #488]	; (8001bf8 <HAL_I2C_Init+0x240>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	bf94      	ite	ls
 8001a14:	2301      	movls	r3, #1
 8001a16:	2300      	movhi	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	e006      	b.n	8001a2a <HAL_I2C_Init+0x72>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a77      	ldr	r2, [pc, #476]	; (8001bfc <HAL_I2C_Init+0x244>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	bf94      	ite	ls
 8001a24:	2301      	movls	r3, #1
 8001a26:	2300      	movhi	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0db      	b.n	8001bea <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4a72      	ldr	r2, [pc, #456]	; (8001c00 <HAL_I2C_Init+0x248>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0c9b      	lsrs	r3, r3, #18
 8001a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a64      	ldr	r2, [pc, #400]	; (8001bf4 <HAL_I2C_Init+0x23c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d802      	bhi.n	8001a6c <HAL_I2C_Init+0xb4>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	e009      	b.n	8001a80 <HAL_I2C_Init+0xc8>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a72:	fb02 f303 	mul.w	r3, r2, r3
 8001a76:	4a63      	ldr	r2, [pc, #396]	; (8001c04 <HAL_I2C_Init+0x24c>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	099b      	lsrs	r3, r3, #6
 8001a7e:	3301      	adds	r3, #1
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	4956      	ldr	r1, [pc, #344]	; (8001bf4 <HAL_I2C_Init+0x23c>)
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	d80d      	bhi.n	8001abc <HAL_I2C_Init+0x104>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	1e59      	subs	r1, r3, #1
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	bf38      	it	cc
 8001ab8:	2304      	movcc	r3, #4
 8001aba:	e04f      	b.n	8001b5c <HAL_I2C_Init+0x1a4>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d111      	bne.n	8001ae8 <HAL_I2C_Init+0x130>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1e58      	subs	r0, r3, #1
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bf0c      	ite	eq
 8001ae0:	2301      	moveq	r3, #1
 8001ae2:	2300      	movne	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	e012      	b.n	8001b0e <HAL_I2C_Init+0x156>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1e58      	subs	r0, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	0099      	lsls	r1, r3, #2
 8001af8:	440b      	add	r3, r1
 8001afa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bf0c      	ite	eq
 8001b08:	2301      	moveq	r3, #1
 8001b0a:	2300      	movne	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_I2C_Init+0x15e>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e022      	b.n	8001b5c <HAL_I2C_Init+0x1a4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10e      	bne.n	8001b3c <HAL_I2C_Init+0x184>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e58      	subs	r0, r3, #1
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6859      	ldr	r1, [r3, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	440b      	add	r3, r1
 8001b2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b3a:	e00f      	b.n	8001b5c <HAL_I2C_Init+0x1a4>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	0099      	lsls	r1, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	6809      	ldr	r1, [r1, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69da      	ldr	r2, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6911      	ldr	r1, [r2, #16]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	68d2      	ldr	r2, [r2, #12]
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	000186a0 	.word	0x000186a0
 8001bf8:	001e847f 	.word	0x001e847f
 8001bfc:	003d08ff 	.word	0x003d08ff
 8001c00:	431bde83 	.word	0x431bde83
 8001c04:	10624dd3 	.word	0x10624dd3

08001c08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	461a      	mov	r2, r3
 8001c14:	460b      	mov	r3, r1
 8001c16:	817b      	strh	r3, [r7, #10]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c1c:	f7ff f842 	bl	8000ca4 <HAL_GetTick>
 8001c20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b20      	cmp	r3, #32
 8001c2c:	f040 80e0 	bne.w	8001df0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	4970      	ldr	r1, [pc, #448]	; (8001dfc <HAL_I2C_Master_Transmit+0x1f4>)
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	f000 f958 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
 8001c48:	e0d3      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_I2C_Master_Transmit+0x50>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e0cc      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d007      	beq.n	8001c7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2221      	movs	r2, #33	; 0x21
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2210      	movs	r2, #16
 8001c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	893a      	ldrh	r2, [r7, #8]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cc0:	8979      	ldrh	r1, [r7, #10]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	6a3a      	ldr	r2, [r7, #32]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f89c 	bl	8001e04 <I2C_MasterRequestWrite>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e08d      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001cec:	e066      	b.n	8001dbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f9d2 	bl	800209c <I2C_WaitOnTXEFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00d      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d107      	bne.n	8001d16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06b      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <HAL_I2C_Master_Transmit+0x188>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d017      	beq.n	8001d90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	781a      	ldrb	r2, [r3, #0]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	6a39      	ldr	r1, [r7, #32]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f9c2 	bl	800211e <I2C_WaitOnBTFFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d107      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e01a      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d194      	bne.n	8001cee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e000      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
  }
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	00100002 	.word	0x00100002
 8001e00:	ffff0000 	.word	0xffff0000

08001e04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d006      	beq.n	8001e2e <I2C_MasterRequestWrite+0x2a>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d003      	beq.n	8001e2e <I2C_MasterRequestWrite+0x2a>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e2c:	d108      	bne.n	8001e40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00b      	b.n	8001e58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	2b12      	cmp	r3, #18
 8001e46:	d107      	bne.n	8001e58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 f843 	bl	8001ef0 <I2C_WaitOnFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e035      	b.n	8001ee0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e7c:	d108      	bne.n	8001e90 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e7e:	897b      	ldrh	r3, [r7, #10]
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	e01b      	b.n	8001ec8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e90:	897b      	ldrh	r3, [r7, #10]
 8001e92:	11db      	asrs	r3, r3, #7
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0306 	and.w	r3, r3, #6
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f063 030f 	orn	r3, r3, #15
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <I2C_MasterRequestWrite+0xe4>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f875 	bl	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e010      	b.n	8001ee0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	4907      	ldr	r1, [pc, #28]	; (8001eec <I2C_MasterRequestWrite+0xe8>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f865 	bl	8001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	00010008 	.word	0x00010008
 8001eec:	00010002 	.word	0x00010002

08001ef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	4613      	mov	r3, r2
 8001efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f00:	e025      	b.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d021      	beq.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0a:	f7fe fecb 	bl	8000ca4 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d302      	bcc.n	8001f20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d116      	bne.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0220 	orr.w	r2, r3, #32
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e023      	b.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	0c1b      	lsrs	r3, r3, #16
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10d      	bne.n	8001f74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	e00c      	b.n	8001f8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d0b6      	beq.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fac:	e051      	b.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fbc:	d123      	bne.n	8002006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e046      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d021      	beq.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7fe fe49 	bl	8000ca4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d116      	bne.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f043 0220 	orr.w	r2, r3, #32
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e020      	b.n	8002094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b01      	cmp	r3, #1
 800205a:	d10c      	bne.n	8002076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	43da      	mvns	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	4013      	ands	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	e00b      	b.n	800208e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	43da      	mvns	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4013      	ands	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d18d      	bne.n	8001fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a8:	e02d      	b.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f878 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e02d      	b.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c0:	d021      	beq.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7fe fdef 	bl	8000ca4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d116      	bne.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e007      	b.n	8002116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002110:	2b80      	cmp	r3, #128	; 0x80
 8002112:	d1ca      	bne.n	80020aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b084      	sub	sp, #16
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800212a:	e02d      	b.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f837 	bl	80021a0 <I2C_IsAcknowledgeFailed>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e02d      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002142:	d021      	beq.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002144:	f7fe fdae 	bl	8000ca4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	429a      	cmp	r2, r3
 8002152:	d302      	bcc.n	800215a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2220      	movs	r2, #32
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e007      	b.n	8002198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d1ca      	bne.n	800212c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d11b      	bne.n	80021f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021dc:	f043 0204 	orr.w	r2, r3, #4
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e26c      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8087 	beq.w	800232a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800221c:	4b92      	ldr	r3, [pc, #584]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b04      	cmp	r3, #4
 8002226:	d00c      	beq.n	8002242 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002228:	4b8f      	ldr	r3, [pc, #572]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d112      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
 8002234:	4b8c      	ldr	r3, [pc, #560]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d10b      	bne.n	800225a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002242:	4b89      	ldr	r3, [pc, #548]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d06c      	beq.n	8002328 <HAL_RCC_OscConfig+0x12c>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d168      	bne.n	8002328 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e246      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x76>
 8002264:	4b80      	ldr	r3, [pc, #512]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a7f      	ldr	r2, [pc, #508]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	6013      	str	r3, [r2, #0]
 8002270:	e02e      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x98>
 800227a:	4b7b      	ldr	r3, [pc, #492]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7a      	ldr	r2, [pc, #488]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b78      	ldr	r3, [pc, #480]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a77      	ldr	r2, [pc, #476]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e01d      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0xbc>
 800229e:	4b72      	ldr	r3, [pc, #456]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a71      	ldr	r2, [pc, #452]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b6f      	ldr	r3, [pc, #444]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a6e      	ldr	r2, [pc, #440]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00b      	b.n	80022d0 <HAL_RCC_OscConfig+0xd4>
 80022b8:	4b6b      	ldr	r3, [pc, #428]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6a      	ldr	r2, [pc, #424]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	4b68      	ldr	r3, [pc, #416]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a67      	ldr	r2, [pc, #412]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fce4 	bl	8000ca4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e0:	f7fe fce0 	bl	8000ca4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1fa      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f2:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0xe4>
 80022fe:	e014      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002300:	f7fe fcd0 	bl	8000ca4 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002308:	f7fe fccc 	bl	8000ca4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b64      	cmp	r3, #100	; 0x64
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e1e6      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231a:	4b53      	ldr	r3, [pc, #332]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x10c>
 8002326:	e000      	b.n	800232a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d063      	beq.n	80023fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d11c      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e1ba      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002372:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4939      	ldr	r1, [pc, #228]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002386:	e03a      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002390:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_RCC_OscConfig+0x270>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fc85 	bl	8000ca4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7fe fc81 	bl	8000ca4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e19b      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4927      	ldr	r1, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
 80023d0:	e015      	b.n	80023fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_RCC_OscConfig+0x270>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fc64 	bl	8000ca4 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fc60 	bl	8000ca4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e17a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d03a      	beq.n	8002480 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d019      	beq.n	8002446 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_RCC_OscConfig+0x274>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7fe fc44 	bl	8000ca4 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7fe fc40 	bl	8000ca4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e15a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_RCC_OscConfig+0x26c>)
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0f0      	beq.n	8002420 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243e:	2001      	movs	r0, #1
 8002440:	f000 fada 	bl	80029f8 <RCC_Delay>
 8002444:	e01c      	b.n	8002480 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_OscConfig+0x274>)
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244c:	f7fe fc2a 	bl	8000ca4 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002452:	e00f      	b.n	8002474 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7fe fc26 	bl	8000ca4 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d908      	bls.n	8002474 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e140      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	42420000 	.word	0x42420000
 8002470:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	4b9e      	ldr	r3, [pc, #632]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e9      	bne.n	8002454 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80a6 	beq.w	80025da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248e:	2300      	movs	r3, #0
 8002490:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002492:	4b97      	ldr	r3, [pc, #604]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10d      	bne.n	80024ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	4b94      	ldr	r3, [pc, #592]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	4a93      	ldr	r2, [pc, #588]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a8:	61d3      	str	r3, [r2, #28]
 80024aa:	4b91      	ldr	r3, [pc, #580]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b8b      	ldr	r3, [pc, #556]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a8a      	ldr	r2, [pc, #552]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7fe fbe7 	bl	8000ca4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fbe3 	bl	8000ca4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b64      	cmp	r3, #100	; 0x64
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0fd      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b81      	ldr	r3, [pc, #516]	; (80026f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x312>
 8002500:	4b7b      	ldr	r3, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a7a      	ldr	r2, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6213      	str	r3, [r2, #32]
 800250c:	e02d      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x334>
 8002516:	4b76      	ldr	r3, [pc, #472]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a75      	ldr	r2, [pc, #468]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6213      	str	r3, [r2, #32]
 8002522:	4b73      	ldr	r3, [pc, #460]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4a72      	ldr	r2, [pc, #456]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6213      	str	r3, [r2, #32]
 800252e:	e01c      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d10c      	bne.n	8002552 <HAL_RCC_OscConfig+0x356>
 8002538:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	4a6c      	ldr	r2, [pc, #432]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	f043 0304 	orr.w	r3, r3, #4
 8002542:	6213      	str	r3, [r2, #32]
 8002544:	4b6a      	ldr	r3, [pc, #424]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6213      	str	r3, [r2, #32]
 8002550:	e00b      	b.n	800256a <HAL_RCC_OscConfig+0x36e>
 8002552:	4b67      	ldr	r3, [pc, #412]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4a66      	ldr	r2, [pc, #408]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6213      	str	r3, [r2, #32]
 800255e:	4b64      	ldr	r3, [pc, #400]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	4a63      	ldr	r2, [pc, #396]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	f023 0304 	bic.w	r3, r3, #4
 8002568:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d015      	beq.n	800259e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002572:	f7fe fb97 	bl	8000ca4 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	e00a      	b.n	8002590 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257a:	f7fe fb93 	bl	8000ca4 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	f241 3288 	movw	r2, #5000	; 0x1388
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e0ab      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0ee      	beq.n	800257a <HAL_RCC_OscConfig+0x37e>
 800259c:	e014      	b.n	80025c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fb81 	bl	8000ca4 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	e00a      	b.n	80025bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a6:	f7fe fb7d 	bl	8000ca4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e095      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ee      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c8:	7dfb      	ldrb	r3, [r7, #23]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d105      	bne.n	80025da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a47      	ldr	r2, [pc, #284]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8081 	beq.w	80026e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e4:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d061      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d146      	bne.n	8002686 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f8:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fb51 	bl	8000ca4 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7fe fb4d 	bl	8000ca4 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e067      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f0      	bne.n	8002606 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a1b      	ldr	r3, [r3, #32]
 8002628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262c:	d108      	bne.n	8002640 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	492d      	ldr	r1, [pc, #180]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a19      	ldr	r1, [r3, #32]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	430b      	orrs	r3, r1
 8002652:	4927      	ldr	r1, [pc, #156]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fb21 	bl	8000ca4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fb1d 	bl	8000ca4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e037      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002678:	4b1d      	ldr	r3, [pc, #116]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x46a>
 8002684:	e02f      	b.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_RCC_OscConfig+0x4fc>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fb0a 	bl	8000ca4 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fb06 	bl	8000ca4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e020      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a6:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x498>
 80026b2:	e018      	b.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e013      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40007000 	.word	0x40007000
 80026f8:	42420060 	.word	0x42420060

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa5a 	bl	8000ca4 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fa56 	bl	8000ca4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4601      	mov	r1, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	fa21 f303 	lsr.w	r3, r1, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe f9b8 	bl	8000c20 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08003fd0 	.word	0x08003fd0
 80028c8:	20000000 	.word	0x20000000
 80028cc:	20000004 	.word	0x20000004

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b490      	push	{r4, r7}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d8:	1d3c      	adds	r4, r7, #4
 80028da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028e0:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028fa:	4b23      	ldr	r3, [pc, #140]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x40>
 800290a:	2b08      	cmp	r3, #8
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x46>
 800290e:	e02d      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002912:	623b      	str	r3, [r7, #32]
      break;
 8002914:	e02d      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0c9b      	lsrs	r3, r3, #18
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002922:	4413      	add	r3, r2
 8002924:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002928:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d013      	beq.n	800295c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002934:	4b14      	ldr	r3, [pc, #80]	; (8002988 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	0c5b      	lsrs	r3, r3, #17
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002942:	4413      	add	r3, r2
 8002944:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002948:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 800294e:	fb02 f203 	mul.w	r2, r2, r3
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
 800295a:	e004      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	623b      	str	r3, [r7, #32]
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_RCC_GetSysClockFreq+0xbc>)
 800296e:	623b      	str	r3, [r7, #32]
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6a3b      	ldr	r3, [r7, #32]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3728      	adds	r7, #40	; 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bc90      	pop	{r4, r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	08003fa8 	.word	0x08003fa8
 8002984:	08003fb8 	.word	0x08003fb8
 8002988:	40021000 	.word	0x40021000
 800298c:	007a1200 	.word	0x007a1200
 8002990:	003d0900 	.word	0x003d0900

08002994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002998:	4b02      	ldr	r3, [pc, #8]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800299a:	681b      	ldr	r3, [r3, #0]
}
 800299c:	4618      	mov	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr
 80029a4:	20000000 	.word	0x20000000

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029ac:	f7ff fff2 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08003fe0 	.word	0x08003fe0

080029d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	f7ff ffde 	bl	8002994 <HAL_RCC_GetHCLKFreq>
 80029d8:	4601      	mov	r1, r0
 80029da:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	0adb      	lsrs	r3, r3, #11
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	4a03      	ldr	r2, [pc, #12]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08003fe0 	.word	0x08003fe0

080029f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <RCC_Delay+0x34>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <RCC_Delay+0x38>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a5b      	lsrs	r3, r3, #9
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a14:	bf00      	nop
  }
  while (Delay --);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	60fa      	str	r2, [r7, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f9      	bne.n	8002a14 <RCC_Delay+0x1c>
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d07d      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a54:	4b4f      	ldr	r3, [pc, #316]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61d3      	str	r3, [r2, #28]
 8002a6c:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d118      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a88:	4b43      	ldr	r3, [pc, #268]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a42      	ldr	r2, [pc, #264]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a94:	f7fe f906 	bl	8000ca4 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9a:	e008      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9c:	f7fe f902 	bl	8000ca4 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e06d      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0f0      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aba:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d02e      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d027      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ae2:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aee:	4a29      	ldr	r2, [pc, #164]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d014      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7fe f8d1 	bl	8000ca4 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe f8cd 	bl	8000ca4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e036      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ee      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4917      	ldr	r1, [pc, #92]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	490b      	ldr	r1, [pc, #44]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4904      	ldr	r1, [pc, #16]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	42420440 	.word	0x42420440

08002ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ba0:	b590      	push	{r4, r7, lr}
 8002ba2:	b08d      	sub	sp, #52	; 0x34
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ba8:	4b55      	ldr	r3, [pc, #340]	; (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002baa:	f107 040c 	add.w	r4, r7, #12
 8002bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bb4:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d07f      	beq.n	8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d002      	beq.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d048      	beq.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bdc:	e08b      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002be4:	4b48      	ldr	r3, [pc, #288]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d07f      	beq.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	0c9b      	lsrs	r3, r3, #18
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c02:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d018      	beq.n	8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	0c5b      	lsrs	r3, r3, #17
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00d      	beq.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c2e:	4a37      	ldr	r2, [pc, #220]	; (8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	e004      	b.n	8002c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c44:	fb02 f303 	mul.w	r3, r2, r3
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c4a:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c56:	d102      	bne.n	8002c5e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c5c:	e048      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4a2c      	ldr	r2, [pc, #176]	; (8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c6c:	e040      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002c6e:	4b26      	ldr	r3, [pc, #152]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d108      	bne.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c90:	e01f      	b.n	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002caa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb0:	e00f      	b.n	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d014      	beq.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002cca:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cd0:	e010      	b.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cd4:	f7ff fe7c 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	0b9b      	lsrs	r3, r3, #14
 8002ce0:	f003 0303 	and.w	r3, r3, #3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cee:	e002      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002cf0:	bf00      	nop
 8002cf2:	e000      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002cf4:	bf00      	nop
    }
  }
  return (frequency);
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3734      	adds	r7, #52	; 0x34
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd90      	pop	{r4, r7, pc}
 8002d00:	08003fbc 	.word	0x08003fbc
 8002d04:	08003fcc 	.word	0x08003fcc
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	003d0900 	.word	0x003d0900
 8002d14:	aaaaaaab 	.word	0xaaaaaaab

08002d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e053      	b.n	8002dd2 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fd fde9 	bl	800091c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	ea42 0103 	orr.w	r1, r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	0c1a      	lsrs	r2, r3, #16
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 0204 	and.w	r2, r2, #4
 8002db0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b088      	sub	sp, #32
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	60f8      	str	r0, [r7, #12]
 8002de2:	60b9      	str	r1, [r7, #8]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_SPI_Transmit+0x22>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e11e      	b.n	800303a <HAL_SPI_Transmit+0x260>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e04:	f7fd ff4e 	bl	8000ca4 <HAL_GetTick>
 8002e08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e1e:	e103      	b.n	8003028 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_SPI_Transmit+0x52>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d102      	bne.n	8002e32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e30:	e0fa      	b.n	8003028 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2203      	movs	r2, #3
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	88fa      	ldrh	r2, [r7, #6]
 8002e4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e78:	d107      	bne.n	8002e8a <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b40      	cmp	r3, #64	; 0x40
 8002e96:	d007      	beq.n	8002ea8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb0:	d14b      	bne.n	8002f4a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Transmit+0xe6>
 8002eba:	8afb      	ldrh	r3, [r7, #22]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d13e      	bne.n	8002f3e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ee4:	e02b      	b.n	8002f3e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d112      	bne.n	8002f1a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	1c9a      	adds	r2, r3, #2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f18:	e011      	b.n	8002f3e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1a:	f7fd fec3 	bl	8000ca4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d803      	bhi.n	8002f32 <HAL_SPI_Transmit+0x158>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_Transmit+0x15e>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d102      	bne.n	8002f3e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f3c:	e074      	b.n	8003028 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ce      	bne.n	8002ee6 <HAL_SPI_Transmit+0x10c>
 8002f48:	e04c      	b.n	8002fe4 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_SPI_Transmit+0x17e>
 8002f52:	8afb      	ldrh	r3, [r7, #22]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d140      	bne.n	8002fda <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	330c      	adds	r3, #12
 8002f62:	7812      	ldrb	r2, [r2, #0]
 8002f64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f7e:	e02c      	b.n	8002fda <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d113      	bne.n	8002fb6 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fb4:	e011      	b.n	8002fda <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb6:	f7fd fe75 	bl	8000ca4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d803      	bhi.n	8002fce <HAL_SPI_Transmit+0x1f4>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x1fa>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd8:	e026      	b.n	8003028 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1cd      	bne.n	8002f80 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f894 	bl	8003116 <SPI_EndRxTxTransaction>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e000      	b.n	8003028 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003038:	7ffb      	ldrb	r3, [r7, #31]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003052:	e04c      	b.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d048      	beq.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800305c:	f7fd fe22 	bl	8000ca4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d902      	bls.n	8003072 <SPI_WaitFlagStateUntilTimeout+0x30>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d13d      	bne.n	80030ee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308a:	d111      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003094:	d004      	beq.n	80030a0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d107      	bne.n	80030b0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b8:	d10f      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e00f      	b.n	800310e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	bf0c      	ite	eq
 80030fe:	2301      	moveq	r3, #1
 8003100:	2300      	movne	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	429a      	cmp	r2, r3
 800310a:	d1a3      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af02      	add	r7, sp, #8
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	; 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff ff88 	bl	8003042 <SPI_WaitFlagStateUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e000      	b.n	800314a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e01d      	b.n	80031a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7fd fc19 	bl	80009b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3304      	adds	r3, #4
 800318e:	4619      	mov	r1, r3
 8003190:	4610      	mov	r0, r2
 8003192:	f000 f9bb 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01d      	b.n	80031f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f815 	bl	80031fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 f990 	bl	800350c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003226:	2302      	movs	r3, #2
 8003228:	e0b4      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x184>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b0c      	cmp	r3, #12
 800323e:	f200 809f 	bhi.w	8003380 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003381 	.word	0x08003381
 8003250:	08003381 	.word	0x08003381
 8003254:	08003381 	.word	0x08003381
 8003258:	080032bd 	.word	0x080032bd
 800325c:	08003381 	.word	0x08003381
 8003260:	08003381 	.word	0x08003381
 8003264:	08003381 	.word	0x08003381
 8003268:	080032ff 	.word	0x080032ff
 800326c:	08003381 	.word	0x08003381
 8003270:	08003381 	.word	0x08003381
 8003274:	08003381 	.word	0x08003381
 8003278:	0800333f 	.word	0x0800333f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f99a 	bl	80035bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0208 	orr.w	r2, r2, #8
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0204 	bic.w	r2, r2, #4
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	619a      	str	r2, [r3, #24]
      break;
 80032ba:	e062      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 f9e0 	bl	8003688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6999      	ldr	r1, [r3, #24]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	021a      	lsls	r2, r3, #8
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	619a      	str	r2, [r3, #24]
      break;
 80032fc:	e041      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa29 	bl	800375c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0208 	orr.w	r2, r2, #8
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0204 	bic.w	r2, r2, #4
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	61da      	str	r2, [r3, #28]
      break;
 800333c:	e021      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fa73 	bl	8003830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	69da      	ldr	r2, [r3, #28]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69d9      	ldr	r1, [r3, #28]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	021a      	lsls	r2, r3, #8
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	61da      	str	r2, [r3, #28]
      break;
 800337e:	e000      	b.n	8003382 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003380:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_TIM_ConfigClockSource+0x18>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e0a6      	b.n	8003502 <HAL_TIM_ConfigClockSource+0x166>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b40      	cmp	r3, #64	; 0x40
 80033ea:	d067      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0x120>
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d80b      	bhi.n	8003408 <HAL_TIM_ConfigClockSource+0x6c>
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d073      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d802      	bhi.n	80033fe <HAL_TIM_ConfigClockSource+0x62>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d06f      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80033fc:	e078      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80033fe:	2b20      	cmp	r3, #32
 8003400:	d06c      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d06a      	beq.n	80034dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003406:	e073      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d00d      	beq.n	8003428 <HAL_TIM_ConfigClockSource+0x8c>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d804      	bhi.n	800341a <HAL_TIM_ConfigClockSource+0x7e>
 8003410:	2b50      	cmp	r3, #80	; 0x50
 8003412:	d033      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xe0>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d041      	beq.n	800349c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003418:	e06a      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	d066      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0x152>
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003424:	d017      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003426:	e063      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f000 fabf 	bl	80039ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800344a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e04c      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f000 faa8 	bl	80039ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003478:	609a      	str	r2, [r3, #8]
      break;
 800347a:	e039      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	461a      	mov	r2, r3
 800348a:	f000 fa1f 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2150      	movs	r1, #80	; 0x50
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fa76 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 800349a:	e029      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	461a      	mov	r2, r3
 80034aa:	f000 fa3d 	bl	8003928 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2160      	movs	r1, #96	; 0x60
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa66 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80034ba:	e019      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f000 f9ff 	bl	80038cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fa56 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80034da:	e009      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f000 fa4d 	bl	8003986 <TIM_ITRx_SetConfig>
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80034ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a25      	ldr	r2, [pc, #148]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_Base_SetConfig+0x28>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0x28>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <TIM_Base_SetConfig+0xac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d108      	bne.n	8003546 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a1a      	ldr	r2, [pc, #104]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003554:	d003      	beq.n	800355e <TIM_Base_SetConfig+0x52>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <TIM_Base_SetConfig+0xac>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d108      	bne.n	8003570 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a07      	ldr	r2, [pc, #28]	; (80035b4 <TIM_Base_SetConfig+0xa8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40000400 	.word	0x40000400

080035bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f023 0201 	bic.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0303 	bic.w	r3, r3, #3
 80035f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0302 	bic.w	r3, r3, #2
 8003604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10c      	bne.n	8003632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f023 0308 	bic.w	r3, r3, #8
 800361e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0304 	bic.w	r3, r3, #4
 8003630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a13      	ldr	r2, [pc, #76]	; (8003684 <TIM_OC1_SetConfig+0xc8>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d111      	bne.n	800365e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	bf00      	nop
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	bc80      	pop	{r7}
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40012c00 	.word	0x40012c00

08003688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f023 0210 	bic.w	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	021b      	lsls	r3, r3, #8
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0320 	bic.w	r3, r3, #32
 80036d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a1d      	ldr	r2, [pc, #116]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d10d      	bne.n	8003704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a14      	ldr	r2, [pc, #80]	; (8003758 <TIM_OC2_SetConfig+0xd0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d113      	bne.n	8003734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800371a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr
 8003758:	40012c00 	.word	0x40012c00

0800375c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d10d      	bne.n	80037d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a14      	ldr	r2, [pc, #80]	; (800382c <TIM_OC3_SetConfig+0xd0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d113      	bne.n	8003806 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40012c00 	.word	0x40012c00

08003830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800387a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <TIM_OC4_SetConfig+0x98>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d109      	bne.n	80038a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	019b      	lsls	r3, r3, #6
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	40012c00 	.word	0x40012c00

080038cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	f023 0201 	bic.w	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f023 030a 	bic.w	r3, r3, #10
 8003908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f023 0210 	bic.w	r2, r3, #16
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	031b      	lsls	r3, r3, #12
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	621a      	str	r2, [r3, #32]
}
 800397c:	bf00      	nop
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr

08003986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f043 0307 	orr.w	r3, r3, #7
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bc80      	pop	{r7}
 80039b8:	4770      	bx	lr

080039ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b087      	sub	sp, #28
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	021a      	lsls	r2, r3, #8
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	609a      	str	r2, [r3, #8]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e032      	b.n	8003a76 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a48:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e03d      	b.n	8003b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e03f      	b.n	8003bb4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fc ff83 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2224      	movs	r2, #36	; 0x24
 8003b52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b64:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f90c 	bl	8003d84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691a      	ldr	r2, [r3, #16]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b8a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b088      	sub	sp, #32
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	f040 8083 	bne.w	8003ce4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_UART_Transmit+0x2e>
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e07b      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_UART_Transmit+0x40>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e074      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2221      	movs	r2, #33	; 0x21
 8003c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003c12:	f7fd f847 	bl	8000ca4 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	88fa      	ldrh	r2, [r7, #6]
 8003c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c24:	e042      	b.n	8003cac <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3c:	d122      	bne.n	8003c84 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2200      	movs	r2, #0
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f850 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e046      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c6a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d103      	bne.n	8003c7c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	3302      	adds	r3, #2
 8003c78:	60bb      	str	r3, [r7, #8]
 8003c7a:	e017      	b.n	8003cac <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	e013      	b.n	8003cac <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f82d 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e023      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	60ba      	str	r2, [r7, #8]
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1b7      	bne.n	8003c26 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2140      	movs	r1, #64	; 0x40
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f814 	bl	8003cee <UART_WaitOnFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e00a      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003ce4:	2302      	movs	r3, #2
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	e02c      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d06:	d028      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d007      	beq.n	8003d1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d0e:	f7fc ffc9 	bl	8000ca4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d21d      	bcs.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d2c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0c3      	beq.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dbe:	f023 030c 	bic.w	r3, r3, #12
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a52      	ldr	r2, [pc, #328]	; (8003f30 <UART_SetConfig+0x1ac>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d14e      	bne.n	8003e8a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dec:	f7fe fdf0 	bl	80029d0 <HAL_RCC_GetPCLK2Freq>
 8003df0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e08:	4a4a      	ldr	r2, [pc, #296]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	0119      	lsls	r1, r3, #4
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009a      	lsls	r2, r3, #2
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e28:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003e2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2064      	movs	r0, #100	; 0x64
 8003e32:	fb00 f303 	mul.w	r3, r0, r3
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	3332      	adds	r3, #50	; 0x32
 8003e3c:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e48:	4419      	add	r1, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	441a      	add	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e60:	4b34      	ldr	r3, [pc, #208]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003e62:	fba3 0302 	umull	r0, r3, r3, r2
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2064      	movs	r0, #100	; 0x64
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	3332      	adds	r3, #50	; 0x32
 8003e74:	4a2f      	ldr	r2, [pc, #188]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	f003 020f 	and.w	r2, r3, #15
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	440a      	add	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003e88:	e04d      	b.n	8003f26 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e8a:	f7fe fd8d 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8003e8e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009a      	lsls	r2, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	0119      	lsls	r1, r3, #4
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009a      	lsls	r2, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003ec8:	fba3 0302 	umull	r0, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2064      	movs	r0, #100	; 0x64
 8003ed0:	fb00 f303 	mul.w	r3, r0, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	4419      	add	r1, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009a      	lsls	r2, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003efe:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003f00:	fba3 0302 	umull	r0, r3, r3, r2
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	2064      	movs	r0, #100	; 0x64
 8003f08:	fb00 f303 	mul.w	r3, r0, r3
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	3332      	adds	r3, #50	; 0x32
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <UART_SetConfig+0x1b0>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 020f 	and.w	r2, r3, #15
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	440a      	add	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40013800 	.word	0x40013800
 8003f34:	51eb851f 	.word	0x51eb851f

08003f38 <__libc_init_array>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	4e0c      	ldr	r6, [pc, #48]	; (8003f70 <__libc_init_array+0x38>)
 8003f3e:	4c0d      	ldr	r4, [pc, #52]	; (8003f74 <__libc_init_array+0x3c>)
 8003f40:	1ba4      	subs	r4, r4, r6
 8003f42:	10a4      	asrs	r4, r4, #2
 8003f44:	42a5      	cmp	r5, r4
 8003f46:	d109      	bne.n	8003f5c <__libc_init_array+0x24>
 8003f48:	f000 f822 	bl	8003f90 <_init>
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	4e0a      	ldr	r6, [pc, #40]	; (8003f78 <__libc_init_array+0x40>)
 8003f50:	4c0a      	ldr	r4, [pc, #40]	; (8003f7c <__libc_init_array+0x44>)
 8003f52:	1ba4      	subs	r4, r4, r6
 8003f54:	10a4      	asrs	r4, r4, #2
 8003f56:	42a5      	cmp	r5, r4
 8003f58:	d105      	bne.n	8003f66 <__libc_init_array+0x2e>
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f60:	4798      	blx	r3
 8003f62:	3501      	adds	r5, #1
 8003f64:	e7ee      	b.n	8003f44 <__libc_init_array+0xc>
 8003f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f6a:	4798      	blx	r3
 8003f6c:	3501      	adds	r5, #1
 8003f6e:	e7f2      	b.n	8003f56 <__libc_init_array+0x1e>
 8003f70:	08003fe8 	.word	0x08003fe8
 8003f74:	08003fe8 	.word	0x08003fe8
 8003f78:	08003fe8 	.word	0x08003fe8
 8003f7c:	08003fec 	.word	0x08003fec

08003f80 <memset>:
 8003f80:	4603      	mov	r3, r0
 8003f82:	4402      	add	r2, r0
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d100      	bne.n	8003f8a <memset+0xa>
 8003f88:	4770      	bx	lr
 8003f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8e:	e7f9      	b.n	8003f84 <memset+0x4>

08003f90 <_init>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	bf00      	nop
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr

08003f9c <_fini>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	bf00      	nop
 8003fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa2:	bc08      	pop	{r3}
 8003fa4:	469e      	mov	lr, r3
 8003fa6:	4770      	bx	lr

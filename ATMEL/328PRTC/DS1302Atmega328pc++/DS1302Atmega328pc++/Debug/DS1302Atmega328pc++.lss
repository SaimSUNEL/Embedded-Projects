
DS1302Atmega328pc++.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000003f2  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800112  00800112  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c6b  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000262  00000000  00000000  000011eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039e  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000184  00000000  00000000  000017ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000499  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ef  00000000  00000000  00001e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	a8 01       	movw	r20, r16

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 ef       	ldi	r30, 0xF2	; 242
  7e:	f3 e0       	ldi	r31, 0x03	; 3
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 31       	cpi	r26, 0x12	; 18
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a2 e1       	ldi	r26, 0x12	; 18
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a1 33       	cpi	r26, 0x31	; 49
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  b6:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z14I2C_Initializev>:
#include<util/delay.h>
#include<avr/io.h>

void I2C_Initialize ( )
{
	TWBR = 72 ;
  be:	88 e4       	ldi	r24, 0x48	; 72
  c0:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = 1 << TWEN ;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	80 93 bc 00 	sts	0x00BC, r24
	TWSR |=  0 <<  TWPS1;//Prescale for baudrate...
  ca:	e9 eb       	ldi	r30, 0xB9	; 185
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 83       	st	Z, r24
	TWSR |=  0 <<  TWPS0;
  d2:	80 81       	ld	r24, Z
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret

000000d8 <_Z8I2C_Sendh>:
}


unsigned char  I2C_Send( unsigned char data )
{
	TWDR = data ; ;//TWDR must be loaded while TWINT 1
  d8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = 0b10000100;
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	80 93 bc 00 	sts	0x00BC, r24
	while( !( TWCR & ( 1 << TWINT )  ) ) ;
  e2:	ec eb       	ldi	r30, 0xBC	; 188
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	88 23       	and	r24, r24
  ea:	ec f7       	brge	.-6      	; 0xe6 <_Z8I2C_Sendh+0xe>
	return TWDR ;
  ec:	80 91 bb 00 	lds	r24, 0x00BB
	
}
  f0:	08 95       	ret

000000f2 <_Z9I2C_Startv>:
void I2C_Start( )
{
	
	TWCR = 0b10100100 ; //start
  f2:	84 ea       	ldi	r24, 0xA4	; 164
  f4:	80 93 bc 00 	sts	0x00BC, r24
	while( !( TWCR & ( 1 << TWINT ) ) ) ; // 
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	ec f7       	brge	.-6      	; 0xfc <_Z9I2C_Startv+0xa>
	
}
 102:	08 95       	ret

00000104 <_Z8I2C_Stopv>:
}

void I2C_Stop()
{
	
	TWCR = 0b10010100;
 104:	84 e9       	ldi	r24, 0x94	; 148
 106:	80 93 bc 00 	sts	0x00BC, r24
	while( TWCR & ( 1 << TWSTO ) ) ;
 10a:	ec eb       	ldi	r30, 0xBC	; 188
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	84 fd       	sbrc	r24, 4
 112:	fd cf       	rjmp	.-6      	; 0x10e <_Z8I2C_Stopv+0xa>
	
	
}
 114:	08 95       	ret

00000116 <_Z13DS1307_saniyev>:
 
 int DS1307_saniye( )
 {
	 

	 I2C_Start();
 116:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 11a:	80 ed       	ldi	r24, 0xD0	; 208
 11c:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x00 );
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 126:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 12e:	81 ed       	ldi	r24, 0xD1	; 209
 130:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = I2C_Send(0xff  );
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 13a:	98 2f       	mov	r25, r24
 13c:	96 95       	lsr	r25
 13e:	96 95       	lsr	r25
 140:	96 95       	lsr	r25
 142:	9e 71       	andi	r25, 0x1E	; 30
 144:	29 2f       	mov	r18, r25
 146:	22 0f       	add	r18, r18
 148:	22 0f       	add	r18, r18
 14a:	92 0f       	add	r25, r18
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	98 0f       	add	r25, r24
 150:	90 93 1e 01 	sts	0x011E, r25
	// Send_NACK();
	 I2C_Stop();
 154:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 
	 
	 return veri;
 158:	80 91 1e 01 	lds	r24, 0x011E
	 
	 
 }
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret

00000160 <_Z13DS1307_dakikav>:

 int DS1307_dakika( )
 {
	 
	 I2C_Start();
 160:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 164:	80 ed       	ldi	r24, 0xD0	; 208
 166:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x01 );
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 170:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 174:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 178:	81 ed       	ldi	r24, 0xD1	; 209
 17a:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>

	 veri = I2C_Send( 0xff  );
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 184:	98 2f       	mov	r25, r24
 186:	96 95       	lsr	r25
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	9e 71       	andi	r25, 0x1E	; 30
 18e:	29 2f       	mov	r18, r25
 190:	22 0f       	add	r18, r18
 192:	22 0f       	add	r18, r18
 194:	92 0f       	add	r25, r18
 196:	8f 70       	andi	r24, 0x0F	; 15
 198:	98 0f       	add	r25, r24
 19a:	90 93 1e 01 	sts	0x011E, r25
	// Send_NACK();
	 I2C_Stop();
 19e:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 return veri;
 1a2:	80 91 1e 01 	lds	r24, 0x011E
	 
	 
	 
 }
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	08 95       	ret

000001aa <_Z11DS1307_saatv>:

 int DS1307_saat()
 {
	 
	 I2C_Start();
 1aa:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 1ae:	80 ed       	ldi	r24, 0xD0	; 208
 1b0:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x02 );
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 1ba:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 1be:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 1c2:	81 ed       	ldi	r24, 0xD1	; 209
 1c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = I2C_Send( 0xff  );
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 1ce:	98 2f       	mov	r25, r24
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	9e 71       	andi	r25, 0x1E	; 30
 1d8:	29 2f       	mov	r18, r25
 1da:	22 0f       	add	r18, r18
 1dc:	22 0f       	add	r18, r18
 1de:	92 0f       	add	r25, r18
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	98 0f       	add	r25, r24
 1e4:	90 93 1e 01 	sts	0x011E, r25
	// Send_NACK();
	 I2C_Stop();
 1e8:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 
	 return veri;
 1ec:	80 91 1e 01 	lds	r24, 0x011E
 }
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret

000001f4 <_Z9DS1307_ayv>:

 char DS1307_ay()
 {
	 I2C_Start();
 1f4:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 1f8:	80 ed       	ldi	r24, 0xD0	; 208
 1fa:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x05 );
 1fe:	85 e0       	ldi	r24, 0x05	; 5
 200:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 204:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 208:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 20c:	81 ed       	ldi	r24, 0xD1	; 209
 20e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = I2C_Send( 0xff  );
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 218:	98 2f       	mov	r25, r24
 21a:	96 95       	lsr	r25
 21c:	96 95       	lsr	r25
 21e:	96 95       	lsr	r25
 220:	9e 71       	andi	r25, 0x1E	; 30
 222:	29 2f       	mov	r18, r25
 224:	22 0f       	add	r18, r18
 226:	22 0f       	add	r18, r18
 228:	92 0f       	add	r25, r18
 22a:	8f 70       	andi	r24, 0x0F	; 15
 22c:	98 0f       	add	r25, r24
 22e:	90 93 1e 01 	sts	0x011E, r25
	// Send_NACK();
	 I2C_Stop();
 232:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 
	 return veri;
	 
	 
	 
 }
 236:	80 91 1e 01 	lds	r24, 0x011E
 23a:	08 95       	ret

0000023c <_Z10DS1307_gunv>:
 char DS1307_gun()
 {
	 I2C_Start();
 23c:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 240:	80 ed       	ldi	r24, 0xD0	; 208
 242:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x04 );
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 24c:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 250:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 254:	81 ed       	ldi	r24, 0xD1	; 209
 256:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = I2C_Send( 0xff  );
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 260:	98 2f       	mov	r25, r24
 262:	96 95       	lsr	r25
 264:	96 95       	lsr	r25
 266:	96 95       	lsr	r25
 268:	9e 71       	andi	r25, 0x1E	; 30
 26a:	29 2f       	mov	r18, r25
 26c:	22 0f       	add	r18, r18
 26e:	22 0f       	add	r18, r18
 270:	92 0f       	add	r25, r18
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	98 0f       	add	r25, r24
 276:	90 93 1e 01 	sts	0x011E, r25
	 //Send_NACK();
	 I2C_Stop();
 27a:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 
	 return veri;
	 
	 
	 
 }
 27e:	80 91 1e 01 	lds	r24, 0x011E
 282:	08 95       	ret

00000284 <_Z10DS1307_yilv>:
 
 char DS1307_yil()
 {
	 I2C_Start();
 284:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010000 );
 288:	80 ed       	ldi	r24, 0xD0	; 208
 28a:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Send( 0x06 );
 28e:	86 e0       	ldi	r24, 0x06	; 6
 290:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 I2C_Stop();
 294:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 I2C_Start();
 298:	0e 94 79 00 	call	0xf2	; 0xf2 <_Z9I2C_Startv>
	 I2C_Send( 0b11010001 );
 29c:	81 ed       	ldi	r24, 0xD1	; 209
 29e:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = I2C_Send( 0xff  );
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Z8I2C_Sendh>
	 veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
 2a8:	98 2f       	mov	r25, r24
 2aa:	96 95       	lsr	r25
 2ac:	96 95       	lsr	r25
 2ae:	96 95       	lsr	r25
 2b0:	9e 71       	andi	r25, 0x1E	; 30
 2b2:	29 2f       	mov	r18, r25
 2b4:	22 0f       	add	r18, r18
 2b6:	22 0f       	add	r18, r18
 2b8:	92 0f       	add	r25, r18
 2ba:	8f 70       	andi	r24, 0x0F	; 15
 2bc:	98 0f       	add	r25, r24
 2be:	90 93 1e 01 	sts	0x011E, r25
	// Send_NACK();
	 I2C_Stop();
 2c2:	0e 94 82 00 	call	0x104	; 0x104 <_Z8I2C_Stopv>
	 
	 return veri;
	 
	 
	 
 }
 2c6:	80 91 1e 01 	lds	r24, 0x011E
 2ca:	08 95       	ret

000002cc <main>:
 
 
int main()
{

I2C_Initialize() ;
 2cc:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z14I2C_Initializev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	81 ee       	ldi	r24, 0xE1	; 225
 2d4:	94 e0       	ldi	r25, 0x04	; 4
 2d6:	21 50       	subi	r18, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0xa>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x14>
 2e0:	00 00       	nop
_delay_ms( 100 ) ;	
	
	saniye = DS1307_saniye() ;
 2e2:	0e 94 8b 00 	call	0x116	; 0x116 <_Z13DS1307_saniyev>
 2e6:	90 93 13 01 	sts	0x0113, r25
 2ea:	80 93 12 01 	sts	0x0112, r24
	dakika = DS1307_dakika() ;
 2ee:	0e 94 b0 00 	call	0x160	; 0x160 <_Z13DS1307_dakikav>
 2f2:	90 93 17 01 	sts	0x0117, r25
 2f6:	80 93 16 01 	sts	0x0116, r24
	saat = DS1307_saat() ;
 2fa:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z11DS1307_saatv>
 2fe:	90 93 15 01 	sts	0x0115, r25
 302:	80 93 14 01 	sts	0x0114, r24
	yil = DS1307_yil() ;
 306:	0e 94 42 01 	call	0x284	; 0x284 <_Z10DS1307_yilv>
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	90 93 1b 01 	sts	0x011B, r25
 310:	80 93 1a 01 	sts	0x011A, r24
	ay = DS1307_ay() ;
 314:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_Z9DS1307_ayv>
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	90 93 19 01 	sts	0x0119, r25
 31e:	80 93 18 01 	sts	0x0118, r24
	gun = DS1307_gun() ;
 322:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z10DS1307_gunv>
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	90 93 1d 01 	sts	0x011D, r25
 32c:	80 93 1c 01 	sts	0x011C, r24
	
	
while( 1 )
{
	
	saniye = DS1307_saniye() ;
 330:	0e 94 8b 00 	call	0x116	; 0x116 <_Z13DS1307_saniyev>
 334:	90 93 13 01 	sts	0x0113, r25
 338:	80 93 12 01 	sts	0x0112, r24
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	81 ef       	ldi	r24, 0xF1	; 241
 340:	9b e2       	ldi	r25, 0x2B	; 43
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x76>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x80>
 34c:	00 00       	nop
 34e:	f0 cf       	rjmp	.-32     	; 0x330 <main+0x64>

00000350 <_GLOBAL__sub_I_waa>:


//Portları okumak için...

_ports * waa = ( _ports * ) 0x023;
_ports & pinb = *waa;
 350:	80 91 10 01 	lds	r24, 0x0110
 354:	90 91 11 01 	lds	r25, 0x0111
 358:	90 93 30 01 	sts	0x0130, r25
 35c:	80 93 2f 01 	sts	0x012F, r24



_ports * ab = ( _ports * ) 0x026;
_ports & pinc = *ab;
 360:	80 91 0e 01 	lds	r24, 0x010E
 364:	90 91 0f 01 	lds	r25, 0x010F
 368:	90 93 2e 01 	sts	0x012E, r25
 36c:	80 93 2d 01 	sts	0x012D, r24


_ports * ac = ( _ports * ) 0x029;
_ports & pind = *ac;
 370:	80 91 0c 01 	lds	r24, 0x010C
 374:	90 91 0d 01 	lds	r25, 0x010D
 378:	90 93 2c 01 	sts	0x012C, r25
 37c:	80 93 2b 01 	sts	0x012B, r24

// Picteki gibi RB0 etc. TRIS etc D portu için... 


_ports * f = ( _ports * ) 0x02B;
_ports & portd = *f;
 380:	80 91 0a 01 	lds	r24, 0x010A
 384:	90 91 0b 01 	lds	r25, 0x010B
 388:	90 93 2a 01 	sts	0x012A, r25
 38c:	80 93 29 01 	sts	0x0129, r24
_ports * e = ( _ports * ) 0x02A;
_ports &trisd = *e;
 390:	80 91 08 01 	lds	r24, 0x0108
 394:	90 91 09 01 	lds	r25, 0x0109
 398:	90 93 28 01 	sts	0x0128, r25
 39c:	80 93 27 01 	sts	0x0127, r24


// C portu için

_ports * ff = ( _ports * ) 0x028;
_ports & portc = *ff;
 3a0:	80 91 06 01 	lds	r24, 0x0106
 3a4:	90 91 07 01 	lds	r25, 0x0107
 3a8:	90 93 26 01 	sts	0x0126, r25
 3ac:	80 93 25 01 	sts	0x0125, r24
_ports * ef = ( _ports * ) 0x027;
_ports &trisc = *ef;
 3b0:	80 91 04 01 	lds	r24, 0x0104
 3b4:	90 91 05 01 	lds	r25, 0x0105
 3b8:	90 93 24 01 	sts	0x0124, r25
 3bc:	80 93 23 01 	sts	0x0123, r24


//B portu için

_ports * c =  ( _ports * ) 0x025 ; 
 _ports &portb = *c;
 3c0:	80 91 02 01 	lds	r24, 0x0102
 3c4:	90 91 03 01 	lds	r25, 0x0103
 3c8:	90 93 22 01 	sts	0x0122, r25
 3cc:	80 93 21 01 	sts	0x0121, r24
_ports * d = ( _ports * )  0x024;
 3d0:	80 91 00 01 	lds	r24, 0x0100
 3d4:	90 91 01 01 	lds	r25, 0x0101
 3d8:	90 93 20 01 	sts	0x0120, r25
 3dc:	80 93 1f 01 	sts	0x011F, r24
 3e0:	08 95       	ret

000003e2 <__tablejump2__>:
 3e2:	ee 0f       	add	r30, r30
 3e4:	ff 1f       	adc	r31, r31

000003e6 <__tablejump__>:
 3e6:	05 90       	lpm	r0, Z+
 3e8:	f4 91       	lpm	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	09 94       	ijmp

000003ee <_exit>:
 3ee:	f8 94       	cli

000003f0 <__stop_program>:
 3f0:	ff cf       	rjmp	.-2      	; 0x3f0 <__stop_program>


Atmega328p22050HZfreq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000164  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000105  00000000  00000000  00000316  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000179  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001bf  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000070  00000000  00000000  00000777  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000007e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>
int main(void)
{
	
	DDRB |= 1 << PINB1 ;
  80:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A = 0 ;
  82:	a0 e8       	ldi	r26, 0x80	; 128
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	1c 92       	st	X, r1
	TCCR1B = 0 ;
  88:	e1 e8       	ldi	r30, 0x81	; 129
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	10 82       	st	Z, r1
	TCNT1 = 0;
  8e:	10 92 85 00 	sts	0x0085, r1
  92:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= 1 << COM1A1 ;  //Clear OC1A pin on compare match set at bottom....
  96:	8c 91       	ld	r24, X
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	8c 93       	st	X, r24
	
	TCCR1B |= 1 << WGM13 | 1 << WGM12 ; //Fast PWM top ICR1
  9c:	80 81       	ld	r24, Z
  9e:	88 61       	ori	r24, 0x18	; 24
  a0:	80 83       	st	Z, r24
	TCCR1A |= 1 << WGM11  ;
  a2:	8c 91       	ld	r24, X
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	8c 93       	st	X, r24
	ICR1 = 90 ; //For 22000 HZ...
  a8:	8a e5       	ldi	r24, 0x5A	; 90
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	90 93 87 00 	sts	0x0087, r25
  b0:	80 93 86 00 	sts	0x0086, r24
	OCR1A =726 / 2 ;
  b4:	8b e6       	ldi	r24, 0x6B	; 107
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	90 93 89 00 	sts	0x0089, r25
  bc:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= 1 << CS11 ;  //Presc 1 : 1
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
 int k ;
 
    while(1)
    {
 
 for( k =  0; k < 725 ; k ++ )
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	35 ed       	ldi	r19, 0xD5	; 213
  cc:	22 e0       	ldi	r18, 0x02	; 2
	 OCR1A = k ;
	 _delay_ms( 10 ) ;
 }
  for( k =  725; k >0 ; k -- )
  {
	  OCR1A = k ;
  ce:	e8 e8       	ldi	r30, 0x88	; 136
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <main+0x66>
    while(1)
    {
 
 for( k =  0; k < 725 ; k ++ )
 {
	 OCR1A = k ;
  d4:	91 83       	std	Z+1, r25	; 0x01
  d6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	af e3       	ldi	r26, 0x3F	; 63
  da:	bc e9       	ldi	r27, 0x9C	; 156
  dc:	11 97       	sbiw	r26, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x5c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
 int k ;
 
    while(1)
    {
 
 for( k =  0; k < 725 ; k ++ )
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	85 3d       	cpi	r24, 0xD5	; 213
  e8:	b2 e0       	ldi	r27, 0x02	; 2
  ea:	9b 07       	cpc	r25, r27
  ec:	9c f3       	brlt	.-26     	; 0xd4 <main+0x54>
  ee:	83 2f       	mov	r24, r19
  f0:	92 2f       	mov	r25, r18
	 OCR1A = k ;
	 _delay_ms( 10 ) ;
 }
  for( k =  725; k >0 ; k -- )
  {
	  OCR1A = k ;
  f2:	91 83       	std	Z+1, r25	; 0x01
  f4:	80 83       	st	Z, r24
  f6:	af e3       	ldi	r26, 0x3F	; 63
  f8:	bc e9       	ldi	r27, 0x9C	; 156
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x7a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
 for( k =  0; k < 725 ; k ++ )
 {
	 OCR1A = k ;
	 _delay_ms( 10 ) ;
 }
  for( k =  725; k >0 ; k -- )
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	a9 f7       	brne	.-22     	; 0xf2 <main+0x72>
 108:	ee cf       	rjmp	.-36     	; 0xe6 <main+0x66>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

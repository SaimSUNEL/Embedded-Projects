
Atmega328pESPCommand.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080013a  0080013a  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a84  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003cd  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000712  00000000  00000000  000025a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00002cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000079f  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c77  00000000  00000000  0000371b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004392  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	54 02       	muls	r21, r20

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e4       	ldi	r30, 0x4A	; 74
  7e:	f5 e0       	ldi	r31, 0x05	; 5
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	aa 33       	cpi	r26, 0x3A	; 58
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	aa e3       	ldi	r26, 0x3A	; 58
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a7 3c       	cpi	r26, 0xC7	; 199
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 9f 02 	call	0x53e	; 0x53e <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  b6:	0c 94 a3 02 	jmp	0x546	; 0x546 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z18SoftwareSerialInitv>:
	//E=0;

	__delay_ms(1);
	shift_reg_set_pin_lcd(E, 1);
	//E=1;
	_temp_ = ((c & 0x0F)<<4) ;
  be:	e0 91 b5 01 	lds	r30, 0x01B5
  c2:	f0 91 b6 01 	lds	r31, 0x01B6

	shift_reg_set_pin_lcd(6, _temp_ >> 7);
  c6:	80 81       	ld	r24, Z
  c8:	8e 7f       	andi	r24, 0xFE	; 254
  ca:	80 83       	st	Z, r24
  cc:	e0 91 b5 01 	lds	r30, 0x01B5
  d0:	f0 91 b6 01 	lds	r31, 0x01B6
	shift_reg_set_pin_lcd(5, _temp_ >> 6);
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	e0 91 b7 01 	lds	r30, 0x01B7
  de:	f0 91 b8 01 	lds	r31, 0x01B8
  e2:	80 81       	ld	r24, Z
  e4:	8e 7f       	andi	r24, 0xFE	; 254
  e6:	80 83       	st	Z, r24
  e8:	e0 91 b7 01 	lds	r30, 0x01B7
  ec:	f0 91 b8 01 	lds	r31, 0x01B8
	shift_reg_set_pin_lcd(4, _temp_ >> 5);
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <_Z18SoftwareSerialReadv>:
  f8:	e0 91 bf 01 	lds	r30, 0x01BF
  fc:	f0 91 c0 01 	lds	r31, 0x01C0
 100:	a0 91 c5 01 	lds	r26, 0x01C5
 104:	b0 91 c6 01 	lds	r27, 0x01C6
 108:	9c 91       	ld	r25, X
 10a:	80 81       	ld	r24, Z
 10c:	90 fb       	bst	r25, 0
	shift_reg_set_pin_lcd(3, _temp_ >> 4);
 10e:	83 f9       	bld	r24, 3
 110:	80 83       	st	Z, r24
 112:	18 99       	sbic	0x03, 0	; 3
 114:	fe cf       	rjmp	.-4      	; 0x112 <_Z18SoftwareSerialReadv+0x1a>
 116:	e0 91 bf 01 	lds	r30, 0x01BF
 11a:	f0 91 c0 01 	lds	r31, 0x01C0
 11e:	a0 91 c5 01 	lds	r26, 0x01C5
 122:	b0 91 c6 01 	lds	r27, 0x01C6
 126:	9c 91       	ld	r25, X
 128:	80 81       	ld	r24, Z
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	90 fb       	bst	r25, 0
 12c:	83 f9       	bld	r24, 3
 12e:	80 83       	st	Z, r24
 130:	8f ea       	ldi	r24, 0xAF	; 175
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	01 97       	sbiw	r24, 0x01	; 1


	//LCDPORT=((c & 0x0F)<<4);

	__delay_ms( 2 );
	shift_reg_set_pin_lcd(E, 0);
 136:	f1 f7       	brne	.-4      	; 0x134 <_Z18SoftwareSerialReadv+0x3c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <_Z18SoftwareSerialReadv+0x42>
 13a:	00 00       	nop
 13c:	e0 91 bf 01 	lds	r30, 0x01BF
 140:	f0 91 c0 01 	lds	r31, 0x01C0
 144:	80 81       	ld	r24, Z
 146:	88 60       	ori	r24, 0x08	; 8
 148:	80 83       	st	Z, r24

	//E=0;
	__delay_ms(10);
}
 14a:	95 e0       	ldi	r25, 0x05	; 5
 14c:	9a 95       	dec	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	f1 f7       	brne	.-4      	; 0x14c <_Z18SoftwareSerialReadv+0x54>
 150:	00 00       	nop
	portd.RD3 = pinb.RB0;
 	//_delay_us(150); //9600
 	_delay_us(620);
	 portd.RD3 = 1;
	 _delay_us(1);
	 portd.RD3 = 0;
 152:	e0 91 bf 01 	lds	r30, 0x01BF
 156:	f0 91 c0 01 	lds	r31, 0x01C0
 15a:	80 81       	ld	r24, Z
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	80 83       	st	Z, r24
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
}
byte deger = 0;
byte SoftwareSerialRead()
{
	portd.RD3 = pinb.RB0;
	byte received_byte = 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
	 _delay_us(1);
	 portd.RD3 = 0;
	 for(byte k = 0 ; k < 8; k++)
 	{
 		if(PINB &0x1)
 			received_byte |= (1<<k);
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	70 e0       	ldi	r23, 0x00	; 0
	 portd.RD3 = 1;
	 _delay_us(1);
	 portd.RD3 = 0;
	 for(byte k = 0 ; k < 8; k++)
 	{
 		if(PINB &0x1)
 16a:	18 9b       	sbis	0x03, 0	; 3
 16c:	08 c0       	rjmp	.+16     	; 0x17e <_Z18SoftwareSerialReadv+0x86>
 			received_byte |= (1<<k);
 16e:	ab 01       	movw	r20, r22
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <_Z18SoftwareSerialReadv+0x80>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <_Z18SoftwareSerialReadv+0x7c>
 17c:	84 2b       	or	r24, r20
 		 		//_delay_us(98) ; //9600
				   portd.RD3 = 1;
 17e:	e0 91 bf 01 	lds	r30, 0x01BF
 182:	f0 91 c0 01 	lds	r31, 0x01C0
 186:	90 81       	ld	r25, Z
 188:	98 60       	ori	r25, 0x08	; 8
 18a:	90 83       	st	Z, r25
 18c:	e5 e0       	ldi	r30, 0x05	; 5
 18e:	ea 95       	dec	r30
 190:	f1 f7       	brne	.-4      	; 0x18e <_Z18SoftwareSerialReadv+0x96>
 192:	00 00       	nop
				   _delay_us(1);
				  portd.RD3 = 0;
 194:	e0 91 bf 01 	lds	r30, 0x01BF
 198:	f0 91 c0 01 	lds	r31, 0x01C0
 19c:	90 81       	ld	r25, Z
 19e:	97 7f       	andi	r25, 0xF7	; 247
 1a0:	90 83       	st	Z, r25
 1a2:	ef e7       	ldi	r30, 0x7F	; 127
 1a4:	f6 e0       	ldi	r31, 0x06	; 6
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <_Z18SoftwareSerialReadv+0xae>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_Z18SoftwareSerialReadv+0xb4>
 1ac:	00 00       	nop
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
 1b0:	3f 4f       	sbci	r19, 0xFF	; 255
 	//_delay_us(150); //9600
 	_delay_us(620);
	 portd.RD3 = 1;
	 _delay_us(1);
	 portd.RD3 = 0;
	 for(byte k = 0 ; k < 8; k++)
 1b2:	28 30       	cpi	r18, 0x08	; 8
 1b4:	31 05       	cpc	r19, r1
 1b6:	c9 f6       	brne	.-78     	; 0x16a <_Z18SoftwareSerialReadv+0x72>
				  portd.RD3 = 0;
				  _delay_us(416);
 	} 	
	 //_delay_us(150*4);//9600
	
	 portd.RD3 = 1;
 1b8:	e0 91 bf 01 	lds	r30, 0x01BF
 1bc:	f0 91 c0 01 	lds	r31, 0x01C0
 1c0:	90 81       	ld	r25, Z
 1c2:	98 60       	ori	r25, 0x08	; 8
 1c4:	90 83       	st	Z, r25
 1c6:	f5 e0       	ldi	r31, 0x05	; 5
 1c8:	fa 95       	dec	r31
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <_Z18SoftwareSerialReadv+0xd0>
 1cc:	00 00       	nop
	 _delay_us(1);
	 portd.RD3 = 0;
 1ce:	e0 91 bf 01 	lds	r30, 0x01BF
 1d2:	f0 91 c0 01 	lds	r31, 0x01C0
 1d6:	90 81       	ld	r25, Z
 1d8:	97 7f       	andi	r25, 0xF7	; 247
 1da:	90 83       	st	Z, r25
	
	return received_byte;
}
 1dc:	08 95       	ret

000001de <_Z18SoftwareSerialSendh>:


void SoftwareSerialSend(byte val)
{
	
	portb.RB1 = 0;	
 1de:	e0 91 b7 01 	lds	r30, 0x01B7
 1e2:	f0 91 b8 01 	lds	r31, 0x01B8
 1e6:	90 81       	ld	r25, Z
 1e8:	9d 7f       	andi	r25, 0xFD	; 253
 1ea:	90 83       	st	Z, r25
 1ec:	ef e7       	ldi	r30, 0x7F	; 127
 1ee:	f6 e0       	ldi	r31, 0x06	; 6
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z18SoftwareSerialSendh+0x12>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z18SoftwareSerialSendh+0x18>
 1f6:	00 00       	nop
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(104*4);
	
	for(byte k = 0 ; k < 8; k++)
	{
		portb.RB1 = (val >> k) & 0x1;
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	e0 91 b7 01 	lds	r30, 0x01B7
 202:	f0 91 b8 01 	lds	r31, 0x01B8
 206:	ac 01       	movw	r20, r24
 208:	02 2e       	mov	r0, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <_Z18SoftwareSerialSendh+0x32>
 20c:	55 95       	asr	r21
 20e:	47 95       	ror	r20
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <_Z18SoftwareSerialSendh+0x2e>
 214:	50 81       	ld	r21, Z
 216:	40 fb       	bst	r20, 0
 218:	51 f9       	bld	r21, 1
 21a:	50 83       	st	Z, r21
 21c:	ef e7       	ldi	r30, 0x7F	; 127
 21e:	f6 e0       	ldi	r31, 0x06	; 6
 220:	31 97       	sbiw	r30, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <_Z18SoftwareSerialSendh+0x42>
 224:	00 c0       	rjmp	.+0      	; 0x226 <_Z18SoftwareSerialSendh+0x48>
 226:	00 00       	nop
 228:	2f 5f       	subi	r18, 0xFF	; 255
 22a:	3f 4f       	sbci	r19, 0xFF	; 255
{
	
	portb.RB1 = 0;	
	_delay_us(104*4);
	
	for(byte k = 0 ; k < 8; k++)
 22c:	28 30       	cpi	r18, 0x08	; 8
 22e:	31 05       	cpc	r19, r1
 230:	31 f7       	brne	.-52     	; 0x1fe <_Z18SoftwareSerialSendh+0x20>
		
		_delay_us(104*4);
		
	}
	
	portb.RB1 = 1;
 232:	e0 91 b7 01 	lds	r30, 0x01B7
 236:	f0 91 b8 01 	lds	r31, 0x01B8
 23a:	80 81       	ld	r24, Z
 23c:	82 60       	ori	r24, 0x02	; 2
 23e:	80 83       	st	Z, r24
 240:	8f e7       	ldi	r24, 0x7F	; 127
 242:	96 e0       	ldi	r25, 0x06	; 6
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <_Z18SoftwareSerialSendh+0x66>
 248:	00 c0       	rjmp	.+0      	; 0x24a <_Z18SoftwareSerialSendh+0x6c>
 24a:	00 00       	nop
	_delay_us(104*4);
	portb.RB1 = 1;
 24c:	e0 91 b7 01 	lds	r30, 0x01B7
 250:	f0 91 b8 01 	lds	r31, 0x01B8
 254:	80 81       	ld	r24, Z
 256:	82 60       	ori	r24, 0x02	; 2
 258:	80 83       	st	Z, r24
 25a:	08 95       	ret

0000025c <_Z24SoftwareSerialReadStringv>:
	
}

byte string_characters [ 60 ];
void SoftwareSerialReadString()
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
	
	do 
	{
		previous_char = current_char;
		
		current_char = SoftwareSerialRead();
 260:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z18SoftwareSerialReadv>
 264:	d8 2f       	mov	r29, r24
		string_characters[index] = current_char;
 266:	80 93 79 01 	sts	0x0179, r24
		index++;
 26a:	c1 e0       	ldi	r28, 0x01	; 1
 26c:	0b c0       	rjmp	.+22     	; 0x284 <_Z24SoftwareSerialReadStringv+0x28>
	
	do 
	{
		previous_char = current_char;
		
		current_char = SoftwareSerialRead();
 26e:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z18SoftwareSerialReadv>
		string_characters[index] = current_char;
 272:	ec 2f       	mov	r30, r28
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e7 58       	subi	r30, 0x87	; 135
 278:	fe 4f       	sbci	r31, 0xFE	; 254
 27a:	80 83       	st	Z, r24
		index++;
 27c:	cf 5f       	subi	r28, 0xFF	; 255
void SoftwareSerialReadString()
{
	byte previous_char=0, current_char=0;
	byte index = 0;
	
	do 
 27e:	dd 30       	cpi	r29, 0x0D	; 13
 280:	19 f0       	breq	.+6      	; 0x288 <_Z24SoftwareSerialReadStringv+0x2c>
	{
		previous_char = current_char;
		
		current_char = SoftwareSerialRead();
 282:	d8 2f       	mov	r29, r24
		string_characters[index] = current_char;
		index++;
		
	
	} while (previous_char != '\r' && current_char != '\n');
 284:	da 30       	cpi	r29, 0x0A	; 10
 286:	99 f7       	brne	.-26     	; 0x26e <_Z24SoftwareSerialReadStringv+0x12>
	string_characters[index] = '\0';
 288:	ec 2f       	mov	r30, r28
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	e7 58       	subi	r30, 0x87	; 135
 28e:	fe 4f       	sbci	r31, 0xFE	; 254
 290:	10 82       	st	Z, r1
	
	
	
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <_Z24SoftwareSerialSendStringv>:


void SoftwareSerialSendString()
{
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	
	do
	{
		previous_char = current_char;
		
		current_char = string_characters[index];
 29e:	c0 91 79 01 	lds	r28, 0x0179
		SoftwareSerialSend(current_char);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z18SoftwareSerialSendh>
 2a8:	8f ec       	ldi	r24, 0xCF	; 207
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <_Z24SoftwareSerialSendStringv+0x14>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <_Z24SoftwareSerialSendStringv+0x1a>
 2b2:	00 00       	nop
		_delay_us(500);
		index ++;
 2b4:	d1 e0       	ldi	r29, 0x01	; 1
 2b6:	12 c0       	rjmp	.+36     	; 0x2dc <_Z24SoftwareSerialSendStringv+0x44>
	
	do
	{
		previous_char = current_char;
		
		current_char = string_characters[index];
 2b8:	ed 2f       	mov	r30, r29
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	e7 58       	subi	r30, 0x87	; 135
 2be:	fe 4f       	sbci	r31, 0xFE	; 254
 2c0:	10 81       	ld	r17, Z
		SoftwareSerialSend(current_char);
 2c2:	81 2f       	mov	r24, r17
 2c4:	0e 94 ef 00 	call	0x1de	; 0x1de <_Z18SoftwareSerialSendh>
 2c8:	8f ec       	ldi	r24, 0xCF	; 207
 2ca:	97 e0       	ldi	r25, 0x07	; 7
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <_Z24SoftwareSerialSendStringv+0x34>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <_Z24SoftwareSerialSendStringv+0x3a>
 2d2:	00 00       	nop
		_delay_us(500);
		index ++;
 2d4:	df 5f       	subi	r29, 0xFF	; 255
void SoftwareSerialSendString()
{
	byte previous_char=0, current_char=0;
	byte index = 0;
	
	do
 2d6:	cd 30       	cpi	r28, 0x0D	; 13
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <_Z24SoftwareSerialSendStringv+0x48>
	{
		previous_char = current_char;
		
		current_char = string_characters[index];
 2da:	c1 2f       	mov	r28, r17
		SoftwareSerialSend(current_char);
		_delay_us(500);
		index ++;
		
		
	} while (previous_char != '\r' && current_char != '\n');
 2dc:	ca 30       	cpi	r28, 0x0A	; 10
 2de:	61 f7       	brne	.-40     	; 0x2b8 <_Z24SoftwareSerialSendStringv+0x20>

}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	08 95       	ret

000002e8 <_Z9UsartInitv>:



void UsartInit()
{
	UBRR0H = ((unsigned char)( (UBRR >> 8)) );
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)UBRR;
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0C = ( 0 << UMSEL00 ) | (3<<UCSZ00) |( 0 << UMSEL01 ) | ( 0 << UPM00) | (0 << UPM01) | ( 0 << USBS0 ) ; //Asynronuousr Usart seçildi...Parity modu yok...Stopbit 1 8 nit veri alımı
 2f4:	86 e0       	ldi	r24, 0x06	; 6
 2f6:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = ( 1 << TXEN0) | ( 1 << RXEN0 ) | ( 0 << UCSZ02 ); //Transmitter ve Receiver Enabled...
 2fa:	88 e1       	ldi	r24, 0x18	; 24
 2fc:	80 93 c1 00 	sts	0x00C1, r24
 300:	08 95       	ret

00000302 <_Z9UsartSendh>:
	return UDR0;
	
}
void UsartSend( unsigned char veri )
{
	while ( !( UCSR0A & (1<<UDRE0)) );
 302:	e0 ec       	ldi	r30, 0xC0	; 192
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	90 81       	ld	r25, Z
 308:	95 ff       	sbrs	r25, 5
 30a:	fd cf       	rjmp	.-6      	; 0x306 <_Z9UsartSendh+0x4>
	UDR0 = veri;
 30c:	80 93 c6 00 	sts	0x00C6, r24
 310:	08 95       	ret

00000312 <_Z20SerialPortSendStringv>:
	} while (previous_char != '\r' && current_char != '\n');
	string_characters[index] = '\0';
}

void SerialPortSendString()
{
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
	byte previous_char=0, current_char=0;
	byte index = 0;
	do
	{
		previous_char = current_char;
		current_char = string_characters[index];
 318:	c0 91 79 01 	lds	r28, 0x0179
		UsartSend(current_char);
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 81 01 	call	0x302	; 0x302 <_Z9UsartSendh>
 322:	8f ec       	ldi	r24, 0xCF	; 207
 324:	97 e0       	ldi	r25, 0x07	; 7
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <_Z20SerialPortSendStringv+0x14>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <_Z20SerialPortSendStringv+0x1a>
 32c:	00 00       	nop
		_delay_us(500);
		index ++;
 32e:	d1 e0       	ldi	r29, 0x01	; 1
 330:	12 c0       	rjmp	.+36     	; 0x356 <_Z20SerialPortSendStringv+0x44>
	byte previous_char=0, current_char=0;
	byte index = 0;
	do
	{
		previous_char = current_char;
		current_char = string_characters[index];
 332:	ed 2f       	mov	r30, r29
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e7 58       	subi	r30, 0x87	; 135
 338:	fe 4f       	sbci	r31, 0xFE	; 254
 33a:	10 81       	ld	r17, Z
		UsartSend(current_char);
 33c:	81 2f       	mov	r24, r17
 33e:	0e 94 81 01 	call	0x302	; 0x302 <_Z9UsartSendh>
 342:	8f ec       	ldi	r24, 0xCF	; 207
 344:	97 e0       	ldi	r25, 0x07	; 7
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <_Z20SerialPortSendStringv+0x34>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <_Z20SerialPortSendStringv+0x3a>
 34c:	00 00       	nop
		_delay_us(500);
		index ++;
 34e:	df 5f       	subi	r29, 0xFF	; 255

void SerialPortSendString()
{
	byte previous_char=0, current_char=0;
	byte index = 0;
	do
 350:	cd 30       	cpi	r28, 0x0D	; 13
 352:	19 f0       	breq	.+6      	; 0x35a <_Z20SerialPortSendStringv+0x48>
	{
		previous_char = current_char;
		current_char = string_characters[index];
 354:	c1 2f       	mov	r28, r17
		UsartSend(current_char);
		_delay_us(500);
		index ++;
	} 
	while (previous_char != '\r' && current_char != '\n');
 356:	ca 30       	cpi	r28, 0x0A	; 10
 358:	61 f7       	brne	.-40     	; 0x332 <_Z20SerialPortSendStringv+0x20>
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	08 95       	ret

00000362 <_Z14ProcessCommandv>:
char pin_number[4];
char komut_id[7];
char custom_command[50];

void ProcessCommand()
{
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
	// clean previous data...
	memset(command, 0, 2);
 366:	e7 e7       	ldi	r30, 0x77	; 119
 368:	f1 e0       	ldi	r31, 0x01	; 1
 36a:	11 82       	std	Z+1, r1	; 0x01
 36c:	10 82       	st	Z, r1
	memset(pin_number, 0, 4);
 36e:	10 92 73 01 	sts	0x0173, r1
 372:	10 92 74 01 	sts	0x0174, r1
 376:	10 92 75 01 	sts	0x0175, r1
 37a:	10 92 76 01 	sts	0x0176, r1
	memset(komut_id, 0, 7);
 37e:	87 e0       	ldi	r24, 0x07	; 7
 380:	ac e6       	ldi	r26, 0x6C	; 108
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	ed 01       	movw	r28, r26
 386:	19 92       	st	Y+, r1
 388:	8a 95       	dec	r24
 38a:	e9 f7       	brne	.-6      	; 0x386 <_Z14ProcessCommandv+0x24>
	memset(custom_command, 0, 50);
 38c:	82 e3       	ldi	r24, 0x32	; 50
 38e:	aa e3       	ldi	r26, 0x3A	; 58
 390:	b1 e0       	ldi	r27, 0x01	; 1
 392:	ed 01       	movw	r28, r26
 394:	19 92       	st	Y+, r1
 396:	8a 95       	dec	r24
 398:	e9 f7       	brne	.-6      	; 0x394 <_Z14ProcessCommandv+0x32>
	
	
	byte index = 0;
	command[0] = string_characters[0];
 39a:	80 91 79 01 	lds	r24, 0x0179
 39e:	80 83       	st	Z, r24
	index += 2;
	switch (command[0])
 3a0:	85 34       	cpi	r24, 0x45	; 69
 3a2:	59 f4       	brne	.+22     	; 0x3ba <_Z14ProcessCommandv+0x58>
		case 'P':
		
		break;
		
		case 'E':
		sprintf((char*)string_characters, "Error in command\r\n");
 3a4:	83 e1       	ldi	r24, 0x13	; 19
 3a6:	e2 e1       	ldi	r30, 0x12	; 18
 3a8:	f1 e0       	ldi	r31, 0x01	; 1
 3aa:	a9 e7       	ldi	r26, 0x79	; 121
 3ac:	b1 e0       	ldi	r27, 0x01	; 1
 3ae:	01 90       	ld	r0, Z+
 3b0:	0d 92       	st	X+, r0
 3b2:	8a 95       	dec	r24
 3b4:	e1 f7       	brne	.-8      	; 0x3ae <_Z14ProcessCommandv+0x4c>
		SerialPortSendString();
 3b6:	0e 94 89 01 	call	0x312	; 0x312 <_Z20SerialPortSendStringv>
		
		
	}
	
	
}
 3ba:	df 91       	pop	r29
 3bc:	cf 91       	pop	r28
 3be:	08 95       	ret

000003c0 <main>:

byte value = 0;
int main(void)
{
	
	trisd.RD5 = 1; // one wire lcd
 3c0:	e0 91 bd 01 	lds	r30, 0x01BD
 3c4:	f0 91 be 01 	lds	r31, 0x01BE
 3c8:	80 81       	ld	r24, Z
 3ca:	80 62       	ori	r24, 0x20	; 32
 3cc:	80 83       	st	Z, r24
	trisd.RD4 = 1; // one wire 7 segment...
 3ce:	e0 91 bd 01 	lds	r30, 0x01BD
 3d2:	f0 91 be 01 	lds	r31, 0x01BE
 3d6:	80 81       	ld	r24, Z
 3d8:	80 61       	ori	r24, 0x10	; 16
 3da:	80 83       	st	Z, r24
	trisd.RD6 = 0; // obstacle sensor...
 3dc:	e0 91 bd 01 	lds	r30, 0x01BD
 3e0:	f0 91 be 01 	lds	r31, 0x01BE
 3e4:	80 81       	ld	r24, Z
 3e6:	8f 7b       	andi	r24, 0xBF	; 191
 3e8:	80 83       	st	Z, r24
	trisd.RD3 = 1;
 3ea:	e0 91 bd 01 	lds	r30, 0x01BD
 3ee:	f0 91 be 01 	lds	r31, 0x01BE
 3f2:	80 81       	ld	r24, Z
 3f4:	88 60       	ori	r24, 0x08	; 8
 3f6:	80 83       	st	Z, r24
	
	SoftwareSerialInit();
 3f8:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z18SoftwareSerialInitv>
	UsartInit();
 3fc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_Z9UsartInitv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	9c e9       	ldi	r25, 0x9C	; 156
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <main+0x44>
 408:	00 c0       	rjmp	.+0      	; 0x40a <main+0x4a>
 40a:	00 00       	nop
 40c:	9f ef       	ldi	r25, 0xFF	; 255
 40e:	24 e3       	ldi	r18, 0x34	; 52
 410:	8c e0       	ldi	r24, 0x0C	; 12
 412:	91 50       	subi	r25, 0x01	; 1
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <main+0x52>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0x5c>
 41c:	00 00       	nop
	_delay_ms(10);
	//LCD_init();
	delay_ms(250);
	trisb.RB5 = 1; //pin 13 output
 41e:	e0 91 b5 01 	lds	r30, 0x01B5
 422:	f0 91 b6 01 	lds	r31, 0x01B6
 426:	80 81       	ld	r24, Z
 428:	80 62       	ori	r24, 0x20	; 32
 42a:	80 83       	st	Z, r24
	portb.RB5 = 0;
 42c:	e0 91 b7 01 	lds	r30, 0x01B7
 430:	f0 91 b8 01 	lds	r31, 0x01B8
 434:	80 81       	ld	r24, Z
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	80 83       	st	Z, r24
	
	
	
	sprintf((char*)string_characters, "Saim SUNEL \r\n");
 43a:	8e e0       	ldi	r24, 0x0E	; 14
 43c:	e5 e2       	ldi	r30, 0x25	; 37
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	a9 e7       	ldi	r26, 0x79	; 121
 442:	b1 e0       	ldi	r27, 0x01	; 1
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	8a 95       	dec	r24
 44a:	e1 f7       	brne	.-8      	; 0x444 <main+0x84>
	SerialPortSendString();
 44c:	0e 94 89 01 	call	0x312	; 0x312 <_Z20SerialPortSendStringv>
		//display_number(pind.RD6);
		//display_number(value);
		//lcd_goto(1, 1);
		//lcd_write_number(value);
		//value++;
		sprintf((char*)string_characters, "C-0\r\n");
 450:	c6 e0       	ldi	r28, 0x06	; 6
 452:	e3 e3       	ldi	r30, 0x33	; 51
 454:	f1 e0       	ldi	r31, 0x01	; 1
 456:	a9 e7       	ldi	r26, 0x79	; 121
 458:	b1 e0       	ldi	r27, 0x01	; 1
 45a:	8c 2f       	mov	r24, r28
 45c:	01 90       	ld	r0, Z+
 45e:	0d 92       	st	X+, r0
 460:	8a 95       	dec	r24
 462:	e1 f7       	brne	.-8      	; 0x45c <main+0x9c>
		SoftwareSerialSendString();
 464:	0e 94 4c 01 	call	0x298	; 0x298 <_Z24SoftwareSerialSendStringv>
		SoftwareSerialReadString();
 468:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z24SoftwareSerialReadStringv>
		SerialPortSendString();
 46c:	0e 94 89 01 	call	0x312	; 0x312 <_Z20SerialPortSendStringv>
		SoftwareSerialReadString();
 470:	0e 94 2e 01 	call	0x25c	; 0x25c <_Z24SoftwareSerialReadStringv>
		SerialPortSendString();
 474:	0e 94 89 01 	call	0x312	; 0x312 <_Z20SerialPortSendStringv>
		ProcessCommand();
 478:	0e 94 b1 01 	call	0x362	; 0x362 <_Z14ProcessCommandv>
		//SoftwareSerialSendString();
		//SoftwareSerialReadString();
			portd.RD3 = ~portd.RD3;		
 47c:	e0 91 bf 01 	lds	r30, 0x01BF
 480:	f0 91 c0 01 	lds	r31, 0x01C0
 484:	80 81       	ld	r24, Z
 486:	83 fb       	bst	r24, 3
 488:	99 27       	eor	r25, r25
 48a:	90 f9       	bld	r25, 0
 48c:	90 95       	com	r25
 48e:	90 fb       	bst	r25, 0
 490:	83 f9       	bld	r24, 3
 492:	80 83       	st	Z, r24
 494:	9f ef       	ldi	r25, 0xFF	; 255
 496:	24 e3       	ldi	r18, 0x34	; 52
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	91 50       	subi	r25, 0x01	; 1
 49c:	20 40       	sbci	r18, 0x00	; 0
 49e:	80 40       	sbci	r24, 0x00	; 0
 4a0:	e1 f7       	brne	.-8      	; 0x49a <main+0xda>
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <main+0xe4>
 4a4:	00 00       	nop
 4a6:	d5 cf       	rjmp	.-86     	; 0x452 <main+0x92>

000004a8 <_GLOBAL__sub_I_pB>:


//Portları okumak için...

_ports * waa = ( _ports * ) 0x023;
_ports & pinb = *waa;
 4a8:	80 91 10 01 	lds	r24, 0x0110
 4ac:	90 91 11 01 	lds	r25, 0x0111
 4b0:	90 93 c6 01 	sts	0x01C6, r25
 4b4:	80 93 c5 01 	sts	0x01C5, r24



_ports * ab = ( _ports * ) 0x026;
_ports & pinc = *ab;
 4b8:	80 91 0e 01 	lds	r24, 0x010E
 4bc:	90 91 0f 01 	lds	r25, 0x010F
 4c0:	90 93 c4 01 	sts	0x01C4, r25
 4c4:	80 93 c3 01 	sts	0x01C3, r24


_ports * ac = ( _ports * ) 0x029;
_ports & pind = *ac;
 4c8:	80 91 0c 01 	lds	r24, 0x010C
 4cc:	90 91 0d 01 	lds	r25, 0x010D
 4d0:	90 93 c2 01 	sts	0x01C2, r25
 4d4:	80 93 c1 01 	sts	0x01C1, r24

// Picteki gibi RB0 etc. TRIS etc D portu için... 


_ports * f = ( _ports * ) 0x02B;
_ports & portd = *f;
 4d8:	80 91 0a 01 	lds	r24, 0x010A
 4dc:	90 91 0b 01 	lds	r25, 0x010B
 4e0:	90 93 c0 01 	sts	0x01C0, r25
 4e4:	80 93 bf 01 	sts	0x01BF, r24
_ports * e = ( _ports * ) 0x02A;
_ports &trisd = *e;
 4e8:	80 91 08 01 	lds	r24, 0x0108
 4ec:	90 91 09 01 	lds	r25, 0x0109
 4f0:	90 93 be 01 	sts	0x01BE, r25
 4f4:	80 93 bd 01 	sts	0x01BD, r24


// C portu için

_ports * ff = ( _ports * ) 0x028;
_ports & portc = *ff;
 4f8:	80 91 06 01 	lds	r24, 0x0106
 4fc:	90 91 07 01 	lds	r25, 0x0107
 500:	90 93 bc 01 	sts	0x01BC, r25
 504:	80 93 bb 01 	sts	0x01BB, r24
_ports * ef = ( _ports * ) 0x027;
_ports &trisc = *ef;
 508:	80 91 04 01 	lds	r24, 0x0104
 50c:	90 91 05 01 	lds	r25, 0x0105
 510:	90 93 ba 01 	sts	0x01BA, r25
 514:	80 93 b9 01 	sts	0x01B9, r24


//B portu için

_ports * c =  ( _ports * ) 0x025 ; 
 _ports &portb = *c;
 518:	80 91 02 01 	lds	r24, 0x0102
 51c:	90 91 03 01 	lds	r25, 0x0103
 520:	90 93 b8 01 	sts	0x01B8, r25
 524:	80 93 b7 01 	sts	0x01B7, r24
_ports * d = ( _ports * )  0x024;
 528:	80 91 00 01 	lds	r24, 0x0100
 52c:	90 91 01 01 	lds	r25, 0x0101
 530:	90 93 b6 01 	sts	0x01B6, r25
 534:	80 93 b5 01 	sts	0x01B5, r24
 538:	08 95       	ret

0000053a <__tablejump2__>:
 53a:	ee 0f       	add	r30, r30
 53c:	ff 1f       	adc	r31, r31

0000053e <__tablejump__>:
 53e:	05 90       	lpm	r0, Z+
 540:	f4 91       	lpm	r31, Z
 542:	e0 2d       	mov	r30, r0
 544:	09 94       	ijmp

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>

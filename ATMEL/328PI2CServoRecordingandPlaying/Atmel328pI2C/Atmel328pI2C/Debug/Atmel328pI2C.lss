
Atmel328pI2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000328  000003bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000328  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800112  00800112  000003ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a3f  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003f1  00000000  00000000  00000ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e6  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000375  00000000  00000000  00001c11  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_11>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	43 01       	movw	r8, r6

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e8 e2       	ldi	r30, 0x28	; 40
  7e:	f3 e0       	ldi	r31, 0x03	; 3
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 31       	cpi	r26, 0x12	; 18
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a2 e1       	ldi	r26, 0x12	; 18
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ac 32       	cpi	r26, 0x2C	; 44
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 8e 01 	call	0x31c	; 0x31c <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  b6:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <__vector_11>:
	 
 }


ISR ( TIMER1_COMPA_vect )
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31
	
	if ( high == false )
  d6:	80 91 12 01 	lds	r24, 0x0112
  da:	81 11       	cpse	r24, r1
  dc:	2a c0       	rjmp	.+84     	; 0x132 <__vector_11+0x74>
	{
		OCR1A = 2 * ( servo_listesi [ servo_index ].angle * 9  + 540 ) ;
  de:	e0 91 13 01 	lds	r30, 0x0113
  e2:	f0 91 14 01 	lds	r31, 0x0114
  e6:	e9 5e       	subi	r30, 0xE9	; 233
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	80 81       	ld	r24, Z
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	9c 01       	movw	r18, r24
  f4:	22 0f       	add	r18, r18
  f6:	33 1f       	adc	r19, r19
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	82 0f       	add	r24, r18
 102:	93 1f       	adc	r25, r19
 104:	88 5c       	subi	r24, 0xC8	; 200
 106:	9b 4f       	sbci	r25, 0xFB	; 251
 108:	90 93 89 00 	sts	0x0089, r25
 10c:	80 93 88 00 	sts	0x0088, r24
		PORTB |= 1 <<  servo_index ;
 110:	45 b1       	in	r20, 0x05	; 5
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	c9 01       	movw	r24, r18
 118:	00 90 13 01 	lds	r0, 0x0113
 11c:	02 c0       	rjmp	.+4      	; 0x122 <__vector_11+0x64>
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <__vector_11+0x60>
 126:	84 2b       	or	r24, r20
 128:	85 b9       	out	0x05, r24	; 5
		high = true ;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 12 01 	sts	0x0112, r24
 130:	2b c0       	rjmp	.+86     	; 0x188 <__vector_11+0xca>
	}
	else 
	{
		
		high = false ;
 132:	10 92 12 01 	sts	0x0112, r1
		PORTB &= ~( 1 << servo_index ) ;
 136:	45 b1       	in	r20, 0x05	; 5
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	c9 01       	movw	r24, r18
 13e:	00 90 13 01 	lds	r0, 0x0113
 142:	02 c0       	rjmp	.+4      	; 0x148 <__vector_11+0x8a>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <__vector_11+0x86>
 14c:	80 95       	com	r24
 14e:	84 23       	and	r24, r20
 150:	85 b9       	out	0x05, r24	; 5
		OCR1A = 38000 ;
 152:	80 e7       	ldi	r24, 0x70	; 112
 154:	94 e9       	ldi	r25, 0x94	; 148
 156:	90 93 89 00 	sts	0x0089, r25
 15a:	80 93 88 00 	sts	0x0088, r24
		if ( servo_index +1 == servo_sayisi ) servo_index = 0 ;
 15e:	80 91 13 01 	lds	r24, 0x0113
 162:	90 91 14 01 	lds	r25, 0x0114
 166:	01 96       	adiw	r24, 0x01	; 1
 168:	20 91 15 01 	lds	r18, 0x0115
 16c:	30 91 16 01 	lds	r19, 0x0116
 170:	82 17       	cp	r24, r18
 172:	93 07       	cpc	r25, r19
 174:	29 f4       	brne	.+10     	; 0x180 <__vector_11+0xc2>
 176:	10 92 14 01 	sts	0x0114, r1
 17a:	10 92 13 01 	sts	0x0113, r1
 17e:	04 c0       	rjmp	.+8      	; 0x188 <__vector_11+0xca>
		else 
		servo_index ++ ;
 180:	90 93 14 01 	sts	0x0114, r25
 184:	80 93 13 01 	sts	0x0113, r24



	
	
}
 188:	ff 91       	pop	r31
 18a:	ef 91       	pop	r30
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <_Z10I2C_ayarlav>:
	
	
	40 = 16 + 2 ( TBWR ) *Prescaler 
	12 = ( TBWR ) * Prescaler 
	*/
	TWBR = 72 ;
 1a0:	88 e4       	ldi	r24, 0x48	; 72
 1a2:	80 93 b8 00 	sts	0x00B8, r24
	//Son iki bit prescaler için 00 = 1 presc
	TWSR = 0 ;
 1a6:	10 92 b9 00 	sts	0x00B9, r1
 1aa:	08 95       	ret

000001ac <_Z10ADC_ayarlav>:
{
	/*
	internal 1.1V referans
	*/
	
	ADMUX =  ( 1 <<REFS1 | 1 << REFS0 ) ; // ADC0 is selected...
 1ac:	80 ec       	ldi	r24, 0xC0	; 192
 1ae:	80 93 7c 00 	sts	0x007C, r24
	 
	 //pres 128
	ADCSRA = 1 << ADEN  | 1 << ADPS2 | 1 << ADPS1 | 1 << ADPS0 ;
 1b2:	87 e8       	ldi	r24, 0x87	; 135
 1b4:	80 93 7a 00 	sts	0x007A, r24
 1b8:	08 95       	ret

000001ba <main>:



int main(void)
{
	ADC_ayarla() ;
 1ba:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z10ADC_ayarlav>
	
	PORTB = 0 ;
 1be:	15 b8       	out	0x05, r1	; 5
	trisb.RB0 = 1 ;
 1c0:	e0 91 1a 01 	lds	r30, 0x011A
 1c4:	f0 91 1b 01 	lds	r31, 0x011B
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24
	trisb.RB1 = 1 ;
 1ce:	e0 91 1a 01 	lds	r30, 0x011A
 1d2:	f0 91 1b 01 	lds	r31, 0x011B
 1d6:	80 81       	ld	r24, Z
 1d8:	82 60       	ori	r24, 0x02	; 2
 1da:	80 83       	st	Z, r24
	trisb.RB2 = 1 ;
 1dc:	e0 91 1a 01 	lds	r30, 0x011A
 1e0:	f0 91 1b 01 	lds	r31, 0x011B
 1e4:	80 81       	ld	r24, Z
 1e6:	84 60       	ori	r24, 0x04	; 4
 1e8:	80 83       	st	Z, r24
	
	PORTC =  0 ;
 1ea:	18 b8       	out	0x08, r1	; 8
	
	trisc.RC0 = 1 ; //PC0 OUTPUT
 1ec:	e0 91 1e 01 	lds	r30, 0x011E
 1f0:	f0 91 1f 01 	lds	r31, 0x011F
 1f4:	80 81       	ld	r24, Z
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	80 83       	st	Z, r24


	I2C_ayarla() ;
 1fa:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z10I2C_ayarlav>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	89 e6       	ldi	r24, 0x69	; 105
 202:	98 e1       	ldi	r25, 0x18	; 24
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x4a>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x54>
 20e:	00 00       	nop
 210:	8c e1       	ldi	r24, 0x1C	; 28
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	01 97       	sbiw	r24, 0x01	; 1
	
		
	const char  * data = "Deneme                Deneme\0" ;
	
	
	for ( unsigned int b = 0 ; b <  strlen ( (char * ) data ) ; b++ )
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	e9 f7       	brne	.-6      	; 0x214 <main+0x5a>
 21a:	8c e1       	ldi	r24, 0x1C	; 28
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	01 97       	sbiw	r24, 0x01	; 1
	
	
//	read_one = EEPROM_oku( 11 ) ;
	
	
	for ( unsigned int c = 0 ; c <  strlen ( (char * ) data ) ; c++ )
 220:	00 97       	sbiw	r24, 0x00	; 0
 222:	e9 f7       	brne	.-6      	; 0x21e <main+0x64>
		
	}
	
	
	
	servo_listesi [ 0 ].angle = 0  ;
 224:	10 92 17 01 	sts	0x0117, r1
		servo_listesi [ 1 ].angle = 0  ;
 228:	10 92 18 01 	sts	0x0118, r1
			servo_listesi [ 2 ].angle  = 0 ;
 22c:	10 92 19 01 	sts	0x0119, r1
	servo_sayisi = 3 ;
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 16 01 	sts	0x0116, r25
 238:	80 93 15 01 	sts	0x0115, r24
	/*
	CTC  TOP = OCR1A
	timer1 prescaler 1:8 
	0.5 us for each increment in TMR1
	*/
	TCNT1 =  0 ;
 23c:	10 92 85 00 	sts	0x0085, r1
 240:	10 92 84 00 	sts	0x0084, r1
	
 	TCCR1A =  0 ;
 244:	10 92 80 00 	sts	0x0080, r1
		OCR1A = 40000 ;
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	9c e9       	ldi	r25, 0x9C	; 156
 24c:	90 93 89 00 	sts	0x0089, r25
 250:	80 93 88 00 	sts	0x0088, r24
	TCCR1B =  ( 1 << WGM12 ) | ( 1<< CS11 )   ;
 254:	8a e0       	ldi	r24, 0x0A	; 10
 256:	80 93 81 00 	sts	0x0081, r24
	
	
	//Output Compare A interrupt Enabled...

	
	TIMSK1 = 1 << OCIE1A ;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	80 93 6f 00 	sts	0x006F, r24
	
	//global interrupt açýk...
	sei ( ) ;
 260:	78 94       	sei
 262:	90 91 17 01 	lds	r25, 0x0117
	
	
	
	

	bool artir = true ;
 266:	81 e0       	ldi	r24, 0x01	; 1
			
			servo_listesi [ 0 ].angle -= 10  ;
			servo_listesi [ 1 ].angle -= 10  ;
			servo_listesi [ 2 ].angle  -= 10 ;
			
			if ( servo_listesi [ 0 ].angle == 0 ) artir = true ;
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
		
	
		
		
	
		if ( artir == true ) 
 26c:	88 23       	and	r24, r24
 26e:	31 f0       	breq	.+12     	; 0x27c <main+0xc2>
		{
			
		
		servo_listesi [ 0 ].angle += 10  ;
 270:	96 5f       	subi	r25, 0xF6	; 246
		servo_listesi [ 1 ].angle += 10  ;
		servo_listesi [ 2 ].angle  += 10 ;
		
		if ( servo_listesi[0].angle == 180 ) artir = false ;
 272:	82 2f       	mov	r24, r18
 274:	94 3b       	cpi	r25, 0xB4	; 180
 276:	d1 f7       	brne	.-12     	; 0x26c <main+0xb2>
 278:	83 2f       	mov	r24, r19
 27a:	f8 cf       	rjmp	.-16     	; 0x26c <main+0xb2>
		}
		else 
		{
			
			servo_listesi [ 0 ].angle -= 10  ;
 27c:	9a 50       	subi	r25, 0x0A	; 10
			servo_listesi [ 1 ].angle -= 10  ;
			servo_listesi [ 2 ].angle  -= 10 ;
			
			if ( servo_listesi [ 0 ].angle == 0 ) artir = true ;
 27e:	82 2f       	mov	r24, r18
 280:	a9 f3       	breq	.-22     	; 0x26c <main+0xb2>
 282:	83 2f       	mov	r24, r19
 284:	f3 cf       	rjmp	.-26     	; 0x26c <main+0xb2>

00000286 <_GLOBAL__sub_I_waa>:


//PortlarÄ± okumak iÃ§in...

_ports * waa = ( _ports * ) 0x023;
_ports & pinb = *waa;
 286:	80 91 10 01 	lds	r24, 0x0110
 28a:	90 91 11 01 	lds	r25, 0x0111
 28e:	90 93 2b 01 	sts	0x012B, r25
 292:	80 93 2a 01 	sts	0x012A, r24



_ports * ab = ( _ports * ) 0x026;
_ports & pinc = *ab;
 296:	80 91 0e 01 	lds	r24, 0x010E
 29a:	90 91 0f 01 	lds	r25, 0x010F
 29e:	90 93 29 01 	sts	0x0129, r25
 2a2:	80 93 28 01 	sts	0x0128, r24


_ports * ac = ( _ports * ) 0x029;
_ports & pind = *ac;
 2a6:	80 91 0c 01 	lds	r24, 0x010C
 2aa:	90 91 0d 01 	lds	r25, 0x010D
 2ae:	90 93 27 01 	sts	0x0127, r25
 2b2:	80 93 26 01 	sts	0x0126, r24

// Picteki gibi RB0 etc. TRIS etc D portu iÃ§in... 


_ports * f = ( _ports * ) 0x02B;
_ports & portd = *f;
 2b6:	80 91 0a 01 	lds	r24, 0x010A
 2ba:	90 91 0b 01 	lds	r25, 0x010B
 2be:	90 93 25 01 	sts	0x0125, r25
 2c2:	80 93 24 01 	sts	0x0124, r24
_ports * e = ( _ports * ) 0x02A;
_ports &trisd = *e;
 2c6:	80 91 08 01 	lds	r24, 0x0108
 2ca:	90 91 09 01 	lds	r25, 0x0109
 2ce:	90 93 23 01 	sts	0x0123, r25
 2d2:	80 93 22 01 	sts	0x0122, r24


// C portu iÃ§in

_ports * ff = ( _ports * ) 0x028;
_ports & portc = *ff;
 2d6:	80 91 06 01 	lds	r24, 0x0106
 2da:	90 91 07 01 	lds	r25, 0x0107
 2de:	90 93 21 01 	sts	0x0121, r25
 2e2:	80 93 20 01 	sts	0x0120, r24
_ports * ef = ( _ports * ) 0x027;
_ports &trisc = *ef;
 2e6:	80 91 04 01 	lds	r24, 0x0104
 2ea:	90 91 05 01 	lds	r25, 0x0105
 2ee:	90 93 1f 01 	sts	0x011F, r25
 2f2:	80 93 1e 01 	sts	0x011E, r24


//B portu iÃ§in

_ports * c =  ( _ports * ) 0x025 ; 
 _ports &portb = *c;
 2f6:	80 91 02 01 	lds	r24, 0x0102
 2fa:	90 91 03 01 	lds	r25, 0x0103
 2fe:	90 93 1d 01 	sts	0x011D, r25
 302:	80 93 1c 01 	sts	0x011C, r24
_ports * d = ( _ports * )  0x024;
 306:	80 91 00 01 	lds	r24, 0x0100
 30a:	90 91 01 01 	lds	r25, 0x0101
 30e:	90 93 1b 01 	sts	0x011B, r25
 312:	80 93 1a 01 	sts	0x011A, r24
 316:	08 95       	ret

00000318 <__tablejump2__>:
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31

0000031c <__tablejump__>:
 31c:	05 90       	lpm	r0, Z+
 31e:	f4 91       	lpm	r31, Z
 320:	e0 2d       	mov	r30, r0
 322:	09 94       	ijmp

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>


PoluluMotors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000062a  000006be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800112  00800112  000006d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b48  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000328  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000401  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f3  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	c4 02       	muls	r28, r20

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ea e2       	ldi	r30, 0x2A	; 42
  7e:	f6 e0       	ldi	r31, 0x06	; 6
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a2 31       	cpi	r26, 0x12	; 18
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a2 e1       	ldi	r26, 0x12	; 18
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a4 32       	cpi	r26, 0x24	; 36
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 0f 03 	call	0x61e	; 0x61e <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 24 02 	call	0x448	; 0x448 <main>
  b6:	0c 94 13 03 	jmp	0x626	; 0x626 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z11lcd_commandh>:
extern void lcd_goto (unsigned char ,unsigned char );//Ýstenilen satýr ve sütuna gitmek için
extern void lcd_command(unsigned char );//Komut yollamak için


void lcd_command(unsigned char c){ //Komut gönderimi için
RW=0; //Yazma ve okuma kapalý
  be:	e0 91 14 01 	lds	r30, 0x0114
  c2:	f0 91 15 01 	lds	r31, 0x0115
  c6:	90 81       	ld	r25, Z
  c8:	9e 7f       	andi	r25, 0xFE	; 254
  ca:	90 83       	st	Z, r25
RS=0;
  cc:	e0 91 1c 01 	lds	r30, 0x011C
  d0:	f0 91 1d 01 	lds	r31, 0x011D
  d4:	90 81       	ld	r25, Z
  d6:	9b 7f       	andi	r25, 0xFB	; 251
  d8:	90 83       	st	Z, r25
E=1; //Datasheete göre E=1 ‘den E=0’a olmasý gerekiyor
  da:	e0 91 1c 01 	lds	r30, 0x011C
  de:	f0 91 1d 01 	lds	r31, 0x011D
  e2:	90 81       	ld	r25, Z
  e4:	90 61       	ori	r25, 0x10	; 16
  e6:	90 83       	st	Z, r25
//LCDPORT=(c & 0xF0); //Ýlk 4 bit
portb.RB1 = c >> 4  & 1;
  e8:	e0 91 14 01 	lds	r30, 0x0114
  ec:	f0 91 15 01 	lds	r31, 0x0115
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	55 95       	asr	r21
  f8:	47 95       	ror	r20
  fa:	55 95       	asr	r21
  fc:	47 95       	ror	r20
  fe:	55 95       	asr	r21
 100:	47 95       	ror	r20
 102:	55 95       	asr	r21
 104:	47 95       	ror	r20
 106:	90 81       	ld	r25, Z
 108:	40 fb       	bst	r20, 0
 10a:	91 f9       	bld	r25, 1
 10c:	90 83       	st	Z, r25
portb.RB4 = c >> 5 & 1;
 10e:	e0 91 14 01 	lds	r30, 0x0114
 112:	f0 91 15 01 	lds	r31, 0x0115
 116:	a9 01       	movw	r20, r18
 118:	55 95       	asr	r21
 11a:	47 95       	ror	r20
 11c:	55 95       	asr	r21
 11e:	47 95       	ror	r20
 120:	55 95       	asr	r21
 122:	47 95       	ror	r20
 124:	55 95       	asr	r21
 126:	47 95       	ror	r20
 128:	55 95       	asr	r21
 12a:	47 95       	ror	r20
 12c:	90 81       	ld	r25, Z
 12e:	40 fb       	bst	r20, 0
 130:	94 f9       	bld	r25, 4
 132:	90 83       	st	Z, r25
portb.RB5 = c >> 6 & 1;
 134:	e0 91 14 01 	lds	r30, 0x0114
 138:	f0 91 15 01 	lds	r31, 0x0115
 13c:	a9 01       	movw	r20, r18
 13e:	04 2e       	mov	r0, r20
 140:	45 2f       	mov	r20, r21
 142:	00 0c       	add	r0, r0
 144:	44 1f       	adc	r20, r20
 146:	55 0b       	sbc	r21, r21
 148:	00 0c       	add	r0, r0
 14a:	44 1f       	adc	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	90 81       	ld	r25, Z
 150:	40 fb       	bst	r20, 0
 152:	95 f9       	bld	r25, 5
 154:	90 83       	st	Z, r25
portd.RD7 = c >> 7 & 1;
 156:	e0 91 1c 01 	lds	r30, 0x011C
 15a:	f0 91 1d 01 	lds	r31, 0x011D
 15e:	48 2f       	mov	r20, r24
 160:	44 1f       	adc	r20, r20
 162:	44 27       	eor	r20, r20
 164:	44 1f       	adc	r20, r20
 166:	90 81       	ld	r25, Z
 168:	40 fb       	bst	r20, 0
 16a:	97 f9       	bld	r25, 7
 16c:	90 83       	st	Z, r25


E=0; //Yüksek deðerlikli bitler //Düþen Kenar
 16e:	e0 91 1c 01 	lds	r30, 0x011C
 172:	f0 91 1d 01 	lds	r31, 0x011D
 176:	90 81       	ld	r25, Z
 178:	9f 7e       	andi	r25, 0xEF	; 239
 17a:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	e7 e8       	ldi	r30, 0x87	; 135
 17e:	f3 e1       	ldi	r31, 0x13	; 19
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <_Z11lcd_commandh+0xc2>
 184:	00 c0       	rjmp	.+0      	; 0x186 <_Z11lcd_commandh+0xc8>
 186:	00 00       	nop
DelayMs(1);
E=1;
 188:	e0 91 1c 01 	lds	r30, 0x011C
 18c:	f0 91 1d 01 	lds	r31, 0x011D
 190:	90 81       	ld	r25, Z
 192:	90 61       	ori	r25, 0x10	; 16
 194:	90 83       	st	Z, r25
//LCDPORT=((c & 0x0F)<<4); //Son 4 bit Gönderilen bitler de üst üste
portb.RB1 = c   & 1;
 196:	e0 91 14 01 	lds	r30, 0x0114
 19a:	f0 91 15 01 	lds	r31, 0x0115
 19e:	90 81       	ld	r25, Z
 1a0:	80 fb       	bst	r24, 0
 1a2:	91 f9       	bld	r25, 1
 1a4:	90 83       	st	Z, r25
portb.RB4 = c >> 1 & 1;
 1a6:	e0 91 14 01 	lds	r30, 0x0114
 1aa:	f0 91 15 01 	lds	r31, 0x0115
 1ae:	c9 01       	movw	r24, r18
 1b0:	95 95       	asr	r25
 1b2:	87 95       	ror	r24
 1b4:	90 81       	ld	r25, Z
 1b6:	80 fb       	bst	r24, 0
 1b8:	94 f9       	bld	r25, 4
 1ba:	90 83       	st	Z, r25
portb.RB5 = c >> 2 & 1;
 1bc:	e0 91 14 01 	lds	r30, 0x0114
 1c0:	f0 91 15 01 	lds	r31, 0x0115
 1c4:	c9 01       	movw	r24, r18
 1c6:	95 95       	asr	r25
 1c8:	87 95       	ror	r24
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	90 81       	ld	r25, Z
 1d0:	80 fb       	bst	r24, 0
 1d2:	95 f9       	bld	r25, 5
 1d4:	90 83       	st	Z, r25
portd.RD7 = c >> 3 & 1;
 1d6:	e0 91 1c 01 	lds	r30, 0x011C
 1da:	f0 91 1d 01 	lds	r31, 0x011D
 1de:	35 95       	asr	r19
 1e0:	27 95       	ror	r18
 1e2:	35 95       	asr	r19
 1e4:	27 95       	ror	r18
 1e6:	35 95       	asr	r19
 1e8:	27 95       	ror	r18
 1ea:	80 81       	ld	r24, Z
 1ec:	20 fb       	bst	r18, 0
 1ee:	87 f9       	bld	r24, 7
 1f0:	80 83       	st	Z, r24
E=0; //Gelmemesi için kaydýrma yapýlýyor <<4
 1f2:	e0 91 1c 01 	lds	r30, 0x011C
 1f6:	f0 91 1d 01 	lds	r31, 0x011D
 1fa:	80 81       	ld	r24, Z
 1fc:	8f 7e       	andi	r24, 0xEF	; 239
 1fe:	80 83       	st	Z, r24
 200:	87 e8       	ldi	r24, 0x87	; 135
 202:	93 e1       	ldi	r25, 0x13	; 19
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <_Z11lcd_commandh+0x146>
 208:	00 c0       	rjmp	.+0      	; 0x20a <_Z11lcd_commandh+0x14c>
 20a:	00 00       	nop
 20c:	08 95       	ret

0000020e <_Z8lcd_datah>:
DelayMs(1);
}
void lcd_data(unsigned char c){ //Veri gönderimi data ile tek farký yazma iþlemi için
RW=0;
 20e:	e0 91 14 01 	lds	r30, 0x0114
 212:	f0 91 15 01 	lds	r31, 0x0115
 216:	90 81       	ld	r25, Z
 218:	9e 7f       	andi	r25, 0xFE	; 254
 21a:	90 83       	st	Z, r25
RS=1;
 21c:	e0 91 1c 01 	lds	r30, 0x011C
 220:	f0 91 1d 01 	lds	r31, 0x011D
 224:	90 81       	ld	r25, Z
 226:	94 60       	ori	r25, 0x04	; 4
 228:	90 83       	st	Z, r25
E=1;
 22a:	e0 91 1c 01 	lds	r30, 0x011C
 22e:	f0 91 1d 01 	lds	r31, 0x011D
 232:	90 81       	ld	r25, Z
 234:	90 61       	ori	r25, 0x10	; 16
 236:	90 83       	st	Z, r25
//LCDPORT=(c & 0xF0);
portb.RB1 = c >> 4  & 1;
 238:	e0 91 14 01 	lds	r30, 0x0114
 23c:	f0 91 15 01 	lds	r31, 0x0115
 240:	28 2f       	mov	r18, r24
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	a9 01       	movw	r20, r18
 246:	55 95       	asr	r21
 248:	47 95       	ror	r20
 24a:	55 95       	asr	r21
 24c:	47 95       	ror	r20
 24e:	55 95       	asr	r21
 250:	47 95       	ror	r20
 252:	55 95       	asr	r21
 254:	47 95       	ror	r20
 256:	90 81       	ld	r25, Z
 258:	40 fb       	bst	r20, 0
 25a:	91 f9       	bld	r25, 1
 25c:	90 83       	st	Z, r25
portb.RB4 = c >> 5 & 1;
 25e:	e0 91 14 01 	lds	r30, 0x0114
 262:	f0 91 15 01 	lds	r31, 0x0115
 266:	a9 01       	movw	r20, r18
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	55 95       	asr	r21
 276:	47 95       	ror	r20
 278:	55 95       	asr	r21
 27a:	47 95       	ror	r20
 27c:	90 81       	ld	r25, Z
 27e:	40 fb       	bst	r20, 0
 280:	94 f9       	bld	r25, 4
 282:	90 83       	st	Z, r25
portb.RB5 = c >> 6 & 1;
 284:	e0 91 14 01 	lds	r30, 0x0114
 288:	f0 91 15 01 	lds	r31, 0x0115
 28c:	a9 01       	movw	r20, r18
 28e:	04 2e       	mov	r0, r20
 290:	45 2f       	mov	r20, r21
 292:	00 0c       	add	r0, r0
 294:	44 1f       	adc	r20, r20
 296:	55 0b       	sbc	r21, r21
 298:	00 0c       	add	r0, r0
 29a:	44 1f       	adc	r20, r20
 29c:	55 1f       	adc	r21, r21
 29e:	90 81       	ld	r25, Z
 2a0:	40 fb       	bst	r20, 0
 2a2:	95 f9       	bld	r25, 5
 2a4:	90 83       	st	Z, r25
portd.RD7 = c >> 7 & 1;
 2a6:	e0 91 1c 01 	lds	r30, 0x011C
 2aa:	f0 91 1d 01 	lds	r31, 0x011D
 2ae:	48 2f       	mov	r20, r24
 2b0:	44 1f       	adc	r20, r20
 2b2:	44 27       	eor	r20, r20
 2b4:	44 1f       	adc	r20, r20
 2b6:	90 81       	ld	r25, Z
 2b8:	40 fb       	bst	r20, 0
 2ba:	97 f9       	bld	r25, 7
 2bc:	90 83       	st	Z, r25


E=0;
 2be:	e0 91 1c 01 	lds	r30, 0x011C
 2c2:	f0 91 1d 01 	lds	r31, 0x011D
 2c6:	90 81       	ld	r25, Z
 2c8:	9f 7e       	andi	r25, 0xEF	; 239
 2ca:	90 83       	st	Z, r25
 2cc:	e7 e8       	ldi	r30, 0x87	; 135
 2ce:	f3 e1       	ldi	r31, 0x13	; 19
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <_Z8lcd_datah+0xc2>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <_Z8lcd_datah+0xc8>
 2d6:	00 00       	nop
DelayMs(1);
E=1;
 2d8:	e0 91 1c 01 	lds	r30, 0x011C
 2dc:	f0 91 1d 01 	lds	r31, 0x011D
 2e0:	90 81       	ld	r25, Z
 2e2:	90 61       	ori	r25, 0x10	; 16
 2e4:	90 83       	st	Z, r25
//LCDPORT=((c & 0x0F)<<4);
portb.RB1 = c   & 1;
 2e6:	e0 91 14 01 	lds	r30, 0x0114
 2ea:	f0 91 15 01 	lds	r31, 0x0115
 2ee:	90 81       	ld	r25, Z
 2f0:	80 fb       	bst	r24, 0
 2f2:	91 f9       	bld	r25, 1
 2f4:	90 83       	st	Z, r25
portb.RB4 = c >> 1 & 1;
 2f6:	e0 91 14 01 	lds	r30, 0x0114
 2fa:	f0 91 15 01 	lds	r31, 0x0115
 2fe:	c9 01       	movw	r24, r18
 300:	95 95       	asr	r25
 302:	87 95       	ror	r24
 304:	90 81       	ld	r25, Z
 306:	80 fb       	bst	r24, 0
 308:	94 f9       	bld	r25, 4
 30a:	90 83       	st	Z, r25
portb.RB5 = c >> 2 & 1;
 30c:	e0 91 14 01 	lds	r30, 0x0114
 310:	f0 91 15 01 	lds	r31, 0x0115
 314:	c9 01       	movw	r24, r18
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	90 81       	ld	r25, Z
 320:	80 fb       	bst	r24, 0
 322:	95 f9       	bld	r25, 5
 324:	90 83       	st	Z, r25
portd.RD7 = c >> 3 & 1;
 326:	e0 91 1c 01 	lds	r30, 0x011C
 32a:	f0 91 1d 01 	lds	r31, 0x011D
 32e:	35 95       	asr	r19
 330:	27 95       	ror	r18
 332:	35 95       	asr	r19
 334:	27 95       	ror	r18
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	80 81       	ld	r24, Z
 33c:	20 fb       	bst	r18, 0
 33e:	87 f9       	bld	r24, 7
 340:	80 83       	st	Z, r24

E=0;
 342:	e0 91 1c 01 	lds	r30, 0x011C
 346:	f0 91 1d 01 	lds	r31, 0x011D
 34a:	80 81       	ld	r24, Z
 34c:	8f 7e       	andi	r24, 0xEF	; 239
 34e:	80 83       	st	Z, r24
 350:	87 e8       	ldi	r24, 0x87	; 135
 352:	93 e1       	ldi	r25, 0x13	; 19
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <_Z8lcd_datah+0x146>
 358:	00 c0       	rjmp	.+0      	; 0x35a <_Z8lcd_datah+0x14c>
 35a:	00 00       	nop
 35c:	08 95       	ret

0000035e <_Z9lcd_clearv>:
DelayMs(1);
}
void lcd_clear(void){ //Displayi temizlemek için
lcd_command(Erase);
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	97 e2       	ldi	r25, 0x27	; 39
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <_Z9lcd_clearv+0xa>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <_Z9lcd_clearv+0x10>
 36e:	00 00       	nop
 370:	08 95       	ret

00000372 <_Z8lcd_initv>:
else //2.satýr
lcd_command(Row_2+((p_2 - 1)%16));
}
void lcd_init(){

trisd.RD2 = 1;
 372:	e0 91 1a 01 	lds	r30, 0x011A
 376:	f0 91 1b 01 	lds	r31, 0x011B
 37a:	80 81       	ld	r24, Z
 37c:	84 60       	ori	r24, 0x04	; 4
 37e:	80 83       	st	Z, r24
trisb.RB0 = 1;
 380:	e0 91 12 01 	lds	r30, 0x0112
 384:	f0 91 13 01 	lds	r31, 0x0113
 388:	80 81       	ld	r24, Z
 38a:	81 60       	ori	r24, 0x01	; 1
 38c:	80 83       	st	Z, r24
trisd.RD4 = 1;
 38e:	e0 91 1a 01 	lds	r30, 0x011A
 392:	f0 91 1b 01 	lds	r31, 0x011B
 396:	80 81       	ld	r24, Z
 398:	80 61       	ori	r24, 0x10	; 16
 39a:	80 83       	st	Z, r24
trisb.RB1 = 1;
 39c:	e0 91 12 01 	lds	r30, 0x0112
 3a0:	f0 91 13 01 	lds	r31, 0x0113
 3a4:	80 81       	ld	r24, Z
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	80 83       	st	Z, r24
trisb.RB4 = 1;
 3aa:	e0 91 12 01 	lds	r30, 0x0112
 3ae:	f0 91 13 01 	lds	r31, 0x0113
 3b2:	80 81       	ld	r24, Z
 3b4:	80 61       	ori	r24, 0x10	; 16
 3b6:	80 83       	st	Z, r24
trisb.RB5 = 1;
 3b8:	e0 91 12 01 	lds	r30, 0x0112
 3bc:	f0 91 13 01 	lds	r31, 0x0113
 3c0:	80 81       	ld	r24, Z
 3c2:	80 62       	ori	r24, 0x20	; 32
 3c4:	80 83       	st	Z, r24
trisd.RD7 = 1 ;
 3c6:	e0 91 1a 01 	lds	r30, 0x011A
 3ca:	f0 91 1b 01 	lds	r31, 0x011B
 3ce:	80 81       	ld	r24, Z
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	80 83       	st	Z, r24

RS=0; //Datasheete göre ilk ayarlar yapýlýyor
 3d4:	e0 91 1c 01 	lds	r30, 0x011C
 3d8:	f0 91 1d 01 	lds	r31, 0x011D
 3dc:	80 81       	ld	r24, Z
 3de:	8b 7f       	andi	r24, 0xFB	; 251
 3e0:	80 83       	st	Z, r24
E=0;
 3e2:	e0 91 1c 01 	lds	r30, 0x011C
 3e6:	f0 91 1d 01 	lds	r31, 0x011D
 3ea:	80 81       	ld	r24, Z
 3ec:	8f 7e       	andi	r24, 0xEF	; 239
 3ee:	80 83       	st	Z, r24
RW=0;
 3f0:	e0 91 14 01 	lds	r30, 0x0114
 3f4:	f0 91 15 01 	lds	r31, 0x0115
 3f8:	80 81       	ld	r24, Z
 3fa:	8e 7f       	andi	r24, 0xFE	; 254
 3fc:	80 83       	st	Z, r24
 3fe:	87 e8       	ldi	r24, 0x87	; 135
 400:	93 e1       	ldi	r25, 0x13	; 19
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <_Z8lcd_initv+0x90>
 406:	00 c0       	rjmp	.+0      	; 0x408 <_Z8lcd_initv+0x96>
 408:	00 00       	nop
DelayMs(1);
E=1;
 40a:	e0 91 1c 01 	lds	r30, 0x011C
 40e:	f0 91 1d 01 	lds	r31, 0x011D
 412:	80 81       	ld	r24, Z
 414:	80 61       	ori	r24, 0x10	; 16
 416:	80 83       	st	Z, r24
lcd_command(Start); //Basla Komutu
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
 41e:	8f e0       	ldi	r24, 0x0F	; 15
 420:	97 e2       	ldi	r25, 0x27	; 39
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <_Z8lcd_initv+0xb0>
 426:	00 c0       	rjmp	.+0      	; 0x428 <_Z8lcd_initv+0xb6>
 428:	00 00       	nop
DelayMs(2);
lcd_command(Even_4bit); //2 kere 4 bit gidecek
 42a:	88 e2       	ldi	r24, 0x28	; 40
 42c:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
lcd_command(ToRight);
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
lcd_command(No_Cursor);
 436:	8c e0       	ldi	r24, 0x0C	; 12
 438:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
lcd_clear();
 43c:	0e 94 af 01 	call	0x35e	; 0x35e <_Z9lcd_clearv>
lcd_command(Row_1);
 440:	80 e8       	ldi	r24, 0x80	; 128
 442:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
 446:	08 95       	ret

00000448 <main>:


int deger [6]; 
int main(void)
{
	trisc.RC0 = 0;
 448:	e0 91 16 01 	lds	r30, 0x0116
 44c:	f0 91 17 01 	lds	r31, 0x0117
 450:	80 81       	ld	r24, Z
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	80 83       	st	Z, r24
	trisc.RC1 = 0;
 456:	e0 91 16 01 	lds	r30, 0x0116
 45a:	f0 91 17 01 	lds	r31, 0x0117
 45e:	80 81       	ld	r24, Z
 460:	8d 7f       	andi	r24, 0xFD	; 253
 462:	80 83       	st	Z, r24
	trisc.RC2 = 0;
 464:	e0 91 16 01 	lds	r30, 0x0116
 468:	f0 91 17 01 	lds	r31, 0x0117
 46c:	80 81       	ld	r24, Z
 46e:	8b 7f       	andi	r24, 0xFB	; 251
 470:	80 83       	st	Z, r24
	trisc.RC3 = 0;
 472:	e0 91 16 01 	lds	r30, 0x0116
 476:	f0 91 17 01 	lds	r31, 0x0117
 47a:	80 81       	ld	r24, Z
 47c:	87 7f       	andi	r24, 0xF7	; 247
 47e:	80 83       	st	Z, r24
	trisc.RC4 = 0;
 480:	e0 91 16 01 	lds	r30, 0x0116
 484:	f0 91 17 01 	lds	r31, 0x0117
 488:	80 81       	ld	r24, Z
 48a:	8f 7e       	andi	r24, 0xEF	; 239
 48c:	80 83       	st	Z, r24
	trisc.RC5 = 1;
 48e:	e0 91 16 01 	lds	r30, 0x0116
 492:	f0 91 17 01 	lds	r31, 0x0117
 496:	80 81       	ld	r24, Z
 498:	80 62       	ori	r24, 0x20	; 32
 49a:	80 83       	st	Z, r24
	trisd.RD5 = 1;
 49c:	e0 91 1a 01 	lds	r30, 0x011A
 4a0:	f0 91 1b 01 	lds	r31, 0x011B
 4a4:	80 81       	ld	r24, Z
 4a6:	80 62       	ori	r24, 0x20	; 32
 4a8:	80 83       	st	Z, r24
	trisd.RD6 = 1;
 4aa:	e0 91 1a 01 	lds	r30, 0x011A
 4ae:	f0 91 1b 01 	lds	r31, 0x011B
 4b2:	80 81       	ld	r24, Z
 4b4:	80 64       	ori	r24, 0x40	; 64
 4b6:	80 83       	st	Z, r24
	trisb.RB3 = 1;
 4b8:	e0 91 12 01 	lds	r30, 0x0112
 4bc:	f0 91 13 01 	lds	r31, 0x0113
 4c0:	80 81       	ld	r24, Z
 4c2:	88 60       	ori	r24, 0x08	; 8
 4c4:	80 83       	st	Z, r24
	trisd.RD3 = 1;
 4c6:	e0 91 1a 01 	lds	r30, 0x011A
 4ca:	f0 91 1b 01 	lds	r31, 0x011B
 4ce:	80 81       	ld	r24, Z
 4d0:	88 60       	ori	r24, 0x08	; 8
 4d2:	80 83       	st	Z, r24
	trisb.RB2 = 1;
 4d4:	e0 91 12 01 	lds	r30, 0x0112
 4d8:	f0 91 13 01 	lds	r31, 0x0113
 4dc:	80 81       	ld	r24, Z
 4de:	84 60       	ori	r24, 0x04	; 4
 4e0:	80 83       	st	Z, r24
	PORTD = 0;
 4e2:	1b b8       	out	0x0b, r1	; 11
	
 //  melodi_ayarla();
   lcd_init();
 4e4:	0e 94 b9 01 	call	0x372	; 0x372 <_Z8lcd_initv>
 4e8:	2f e7       	ldi	r18, 0x7F	; 127
 4ea:	8a e1       	ldi	r24, 0x1A	; 26
 4ec:	96 e0       	ldi	r25, 0x06	; 6
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0xa6>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0xb0>
 4f8:	00 00       	nop
   _delay_ms(100);
 portc.RC5 = 1 ;
 4fa:	e0 91 18 01 	lds	r30, 0x0118
 4fe:	f0 91 19 01 	lds	r31, 0x0119
 502:	80 81       	ld	r24, Z
 504:	80 62       	ori	r24, 0x20	; 32
 506:	80 83       	st	Z, r24
while(*s)
lcd_data(*s++);
}
void lcd_goto (unsigned char p_1,unsigned char p_2){ //Ýstenen satýr ve sütuna gitmek için
if(p_1==1) //Ýlk satýr
lcd_command(Row_1+((p_2 - 1)%16));
 508:	80 e8       	ldi	r24, 0x80	; 128
 50a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z11lcd_commandh>
   while( 1 ) 
   {
	lcd_goto( 1 , 1 ) ;
	   lcd_data( pinc.RC0 +48) ;
 50e:	e0 91 20 01 	lds	r30, 0x0120
 512:	f0 91 21 01 	lds	r31, 0x0121
 516:	80 81       	ld	r24, Z
 518:	81 70       	andi	r24, 0x01	; 1
 51a:	80 5d       	subi	r24, 0xD0	; 208
 51c:	0e 94 07 01 	call	0x20e	; 0x20e <_Z8lcd_datah>
	     lcd_data( pinc.RC1 +48) ;
 520:	e0 91 20 01 	lds	r30, 0x0120
 524:	f0 91 21 01 	lds	r31, 0x0121
 528:	80 81       	ld	r24, Z
 52a:	86 95       	lsr	r24
 52c:	81 70       	andi	r24, 0x01	; 1
 52e:	80 5d       	subi	r24, 0xD0	; 208
 530:	0e 94 07 01 	call	0x20e	; 0x20e <_Z8lcd_datah>
		   lcd_data( pinc.RC2+48) ;
 534:	e0 91 20 01 	lds	r30, 0x0120
 538:	f0 91 21 01 	lds	r31, 0x0121
 53c:	80 81       	ld	r24, Z
 53e:	82 fb       	bst	r24, 2
 540:	88 27       	eor	r24, r24
 542:	80 f9       	bld	r24, 0
 544:	80 5d       	subi	r24, 0xD0	; 208
 546:	0e 94 07 01 	call	0x20e	; 0x20e <_Z8lcd_datah>
		     lcd_data( pinc.RC3 +48) ;
 54a:	e0 91 20 01 	lds	r30, 0x0120
 54e:	f0 91 21 01 	lds	r31, 0x0121
 552:	80 81       	ld	r24, Z
 554:	83 fb       	bst	r24, 3
 556:	88 27       	eor	r24, r24
 558:	80 f9       	bld	r24, 0
 55a:	80 5d       	subi	r24, 0xD0	; 208
 55c:	0e 94 07 01 	call	0x20e	; 0x20e <_Z8lcd_datah>
			 lcd_data( pinc.RC4 +48) ;
 560:	e0 91 20 01 	lds	r30, 0x0120
 564:	f0 91 21 01 	lds	r31, 0x0121
 568:	80 81       	ld	r24, Z
 56a:	82 95       	swap	r24
 56c:	81 70       	andi	r24, 0x01	; 1
 56e:	80 5d       	subi	r24, 0xD0	; 208
 570:	0e 94 07 01 	call	0x20e	; 0x20e <_Z8lcd_datah>
 574:	2f e3       	ldi	r18, 0x3F	; 63
 576:	82 e4       	ldi	r24, 0x42	; 66
 578:	9f e0       	ldi	r25, 0x0F	; 15
 57a:	21 50       	subi	r18, 0x01	; 1
 57c:	80 40       	sbci	r24, 0x00	; 0
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	e1 f7       	brne	.-8      	; 0x57a <main+0x132>
 582:	00 c0       	rjmp	.+0      	; 0x584 <main+0x13c>
 584:	00 00       	nop
 586:	c0 cf       	rjmp	.-128    	; 0x508 <main+0xc0>

00000588 <_GLOBAL__sub_I_waa>:


//PortlarÄ± okumak iÃ§in...

_ports * waa = ( _ports * ) 0x023;
_ports & pinb = *waa;
 588:	80 91 10 01 	lds	r24, 0x0110
 58c:	90 91 11 01 	lds	r25, 0x0111
 590:	90 93 23 01 	sts	0x0123, r25
 594:	80 93 22 01 	sts	0x0122, r24



_ports * ab = ( _ports * ) 0x026;
_ports & pinc = *ab;
 598:	80 91 0e 01 	lds	r24, 0x010E
 59c:	90 91 0f 01 	lds	r25, 0x010F
 5a0:	90 93 21 01 	sts	0x0121, r25
 5a4:	80 93 20 01 	sts	0x0120, r24


_ports * ac = ( _ports * ) 0x029;
_ports & pind = *ac;
 5a8:	80 91 0c 01 	lds	r24, 0x010C
 5ac:	90 91 0d 01 	lds	r25, 0x010D
 5b0:	90 93 1f 01 	sts	0x011F, r25
 5b4:	80 93 1e 01 	sts	0x011E, r24

// Picteki gibi RB0 etc. TRIS etc D portu iÃ§in... 


_ports * f = ( _ports * ) 0x02B;
_ports & portd = *f;
 5b8:	80 91 0a 01 	lds	r24, 0x010A
 5bc:	90 91 0b 01 	lds	r25, 0x010B
 5c0:	90 93 1d 01 	sts	0x011D, r25
 5c4:	80 93 1c 01 	sts	0x011C, r24
_ports * e = ( _ports * ) 0x02A;
_ports &trisd = *e;
 5c8:	80 91 08 01 	lds	r24, 0x0108
 5cc:	90 91 09 01 	lds	r25, 0x0109
 5d0:	90 93 1b 01 	sts	0x011B, r25
 5d4:	80 93 1a 01 	sts	0x011A, r24


// C portu iÃ§in

_ports * ff = ( _ports * ) 0x028;
_ports & portc = *ff;
 5d8:	80 91 06 01 	lds	r24, 0x0106
 5dc:	90 91 07 01 	lds	r25, 0x0107
 5e0:	90 93 19 01 	sts	0x0119, r25
 5e4:	80 93 18 01 	sts	0x0118, r24
_ports * ef = ( _ports * ) 0x027;
_ports &trisc = *ef;
 5e8:	80 91 04 01 	lds	r24, 0x0104
 5ec:	90 91 05 01 	lds	r25, 0x0105
 5f0:	90 93 17 01 	sts	0x0117, r25
 5f4:	80 93 16 01 	sts	0x0116, r24


//B portu iÃ§in

_ports * c =  ( _ports * ) 0x025 ; 
 _ports &portb = *c;
 5f8:	80 91 02 01 	lds	r24, 0x0102
 5fc:	90 91 03 01 	lds	r25, 0x0103
 600:	90 93 15 01 	sts	0x0115, r25
 604:	80 93 14 01 	sts	0x0114, r24
_ports * d = ( _ports * )  0x024;
 608:	80 91 00 01 	lds	r24, 0x0100
 60c:	90 91 01 01 	lds	r25, 0x0101
 610:	90 93 13 01 	sts	0x0113, r25
 614:	80 93 12 01 	sts	0x0112, r24
 618:	08 95       	ret

0000061a <__tablejump2__>:
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31

0000061e <__tablejump__>:
 61e:	05 90       	lpm	r0, Z+
 620:	f4 91       	lpm	r31, Z
 622:	e0 2d       	mov	r30, r0
 624:	09 94       	ijmp

00000626 <_exit>:
 626:	f8 94       	cli

00000628 <__stop_program>:
 628:	ff cf       	rjmp	.-2      	; 0x628 <__stop_program>


# 1 "../NewCircuit.c"


typedef unsigned char byte;

# 82 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic16f877a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
unsigned RA5 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char PORTC @ 0x007;

volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;

volatile union {
struct {
unsigned RC0 : 1;
unsigned RC1 : 1;
unsigned RC2 : 1;
unsigned RC3 : 1;
unsigned RC4 : 1;
unsigned RC5 : 1;
unsigned RC6 : 1;
unsigned RC7 : 1;
};
} PORTCbits @ 0x007;



volatile unsigned char PORTD @ 0x008;

volatile bit RD0 @ ((unsigned)&PORTD*8)+0;
volatile bit RD1 @ ((unsigned)&PORTD*8)+1;
volatile bit RD2 @ ((unsigned)&PORTD*8)+2;
volatile bit RD3 @ ((unsigned)&PORTD*8)+3;
volatile bit RD4 @ ((unsigned)&PORTD*8)+4;
volatile bit RD5 @ ((unsigned)&PORTD*8)+5;
volatile bit RD6 @ ((unsigned)&PORTD*8)+6;
volatile bit RD7 @ ((unsigned)&PORTD*8)+7;

volatile union {
struct {
unsigned RD0 : 1;
unsigned RD1 : 1;
unsigned RD2 : 1;
unsigned RD3 : 1;
unsigned RD4 : 1;
unsigned RD5 : 1;
unsigned RD6 : 1;
unsigned RD7 : 1;
};
} PORTDbits @ 0x008;



volatile unsigned char PORTE @ 0x009;

volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;

volatile union {
struct {
unsigned RE0 : 1;
unsigned RE1 : 1;
unsigned RE2 : 1;
};
} PORTEbits @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned TMR0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned TMR0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned T0IF : 1;
unsigned : 2;
unsigned T0IE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;
volatile bit PSPIF @ ((unsigned)&PIR1*8)+7;

volatile union {
struct {
unsigned TMR1IF : 1;
unsigned TMR2IF : 1;
unsigned CCP1IF : 1;
unsigned SSPIF : 1;
unsigned TXIF : 1;
unsigned RCIF : 1;
unsigned ADIF : 1;
unsigned PSPIF : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 2;
unsigned : 1;
unsigned : 1;
};
} PIR1bits @ 0x00C;



volatile unsigned char PIR2 @ 0x00D;

volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit CMIF @ ((unsigned)&PIR2*8)+6;

volatile union {
struct {
unsigned CCP2IF : 1;
unsigned : 2;
unsigned BCLIF : 1;
unsigned EEIF : 1;
unsigned : 1;
unsigned CMIF : 1;
};
} PIR2bits @ 0x00D;




volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;

volatile union {
struct {
unsigned TMR1ON : 1;
unsigned TMR1CS : 1;
unsigned nT1SYNC : 1;
unsigned T1OSCEN : 1;
unsigned T1CKPS : 2;
};
struct {
unsigned : 2;
unsigned T1SYNC : 1;
unsigned : 1;
unsigned T1CKPS0 : 1;
unsigned T1CKPS1 : 1;
};
struct {
unsigned : 2;
unsigned T1INSYNC : 1;
};
} T1CONbits @ 0x010;



volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

volatile union {
struct {
unsigned T2CKPS : 2;
unsigned TMR2ON : 1;
unsigned TOUTPS : 4;
};
struct {
unsigned T2CKPS0 : 1;
unsigned T2CKPS1 : 1;
unsigned : 1;
unsigned TOUTPS0 : 1;
unsigned TOUTPS1 : 1;
unsigned TOUTPS2 : 1;
unsigned TOUTPS3 : 1;
};
} T2CONbits @ 0x012;



volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;

volatile union {
struct {
unsigned SSPM : 4;
unsigned CKP : 1;
unsigned SSPEN : 1;
unsigned SSPOV : 1;
unsigned WCOL : 1;
};
struct {
unsigned SSPM0 : 1;
unsigned SSPM1 : 1;
unsigned SSPM2 : 1;
unsigned SSPM3 : 1;
};
} SSPCONbits @ 0x014;




volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;
volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;

volatile union {
struct {
unsigned RX9D : 1;
unsigned OERR : 1;
unsigned FERR : 1;
unsigned ADDEN : 1;
unsigned CREN : 1;
unsigned SREN : 1;
unsigned RX9 : 1;
unsigned SPEN : 1;
};
struct {
unsigned RCD8 : 1;
unsigned : 5;
unsigned RC9 : 1;
};
struct {
unsigned : 6;
unsigned nRC8 : 1;
};
struct {
unsigned : 6;
unsigned RC8_9 : 1;
};
} RCSTAbits @ 0x018;



volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;




volatile unsigned char CCPR2L @ 0x01B;



volatile unsigned char CCPR2H @ 0x01C;



volatile unsigned int CCPR2 @ 0x01B;


volatile unsigned char CCP2CON @ 0x01D;

volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;

volatile union {
struct {
unsigned CCP2M : 4;
unsigned CCP2Y : 1;
unsigned CCP2X : 1;
};
struct {
unsigned CCP2M0 : 1;
unsigned CCP2M1 : 1;
unsigned CCP2M2 : 1;
unsigned CCP2M3 : 1;
};
} CCP2CONbits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+2;

volatile union {
struct {
unsigned ADON : 1;
unsigned : 1;
unsigned GO_nDONE : 1;
unsigned CHS : 3;
unsigned ADCS : 2;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 3;
unsigned : 2;
};
struct {
unsigned : 2;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
};
struct {
unsigned : 2;
unsigned nDONE : 1;
};
struct {
unsigned : 2;
unsigned GO_DONE : 1;
};
} ADCON0bits @ 0x01F;

# 639
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
unsigned TRISA5 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char TRISC @ 0x087;

volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;

volatile union {
struct {
unsigned TRISC0 : 1;
unsigned TRISC1 : 1;
unsigned TRISC2 : 1;
unsigned TRISC3 : 1;
unsigned TRISC4 : 1;
unsigned TRISC5 : 1;
unsigned TRISC6 : 1;
unsigned TRISC7 : 1;
};
} TRISCbits @ 0x087;



volatile unsigned char TRISD @ 0x088;

volatile bit TRISD0 @ ((unsigned)&TRISD*8)+0;
volatile bit TRISD1 @ ((unsigned)&TRISD*8)+1;
volatile bit TRISD2 @ ((unsigned)&TRISD*8)+2;
volatile bit TRISD3 @ ((unsigned)&TRISD*8)+3;
volatile bit TRISD4 @ ((unsigned)&TRISD*8)+4;
volatile bit TRISD5 @ ((unsigned)&TRISD*8)+5;
volatile bit TRISD6 @ ((unsigned)&TRISD*8)+6;
volatile bit TRISD7 @ ((unsigned)&TRISD*8)+7;

volatile union {
struct {
unsigned TRISD0 : 1;
unsigned TRISD1 : 1;
unsigned TRISD2 : 1;
unsigned TRISD3 : 1;
unsigned TRISD4 : 1;
unsigned TRISD5 : 1;
unsigned TRISD6 : 1;
unsigned TRISD7 : 1;
};
} TRISDbits @ 0x088;



volatile unsigned char TRISE @ 0x089;

volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit PSPMODE @ ((unsigned)&TRISE*8)+4;
volatile bit IBOV @ ((unsigned)&TRISE*8)+5;
volatile bit OBF @ ((unsigned)&TRISE*8)+6;
volatile bit IBF @ ((unsigned)&TRISE*8)+7;

volatile union {
struct {
unsigned TRISE0 : 1;
unsigned TRISE1 : 1;
unsigned TRISE2 : 1;
unsigned : 1;
unsigned PSPMODE : 1;
unsigned IBOV : 1;
unsigned OBF : 1;
unsigned IBF : 1;
};
} TRISEbits @ 0x089;



volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;
volatile bit PSPIE @ ((unsigned)&PIE1*8)+7;

volatile union {
struct {
unsigned TMR1IE : 1;
unsigned TMR2IE : 1;
unsigned CCP1IE : 1;
unsigned SSPIE : 1;
unsigned TXIE : 1;
unsigned RCIE : 1;
unsigned ADIE : 1;
unsigned PSPIE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PIE2 @ 0x08D;

volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit CMIE @ ((unsigned)&PIE2*8)+6;

volatile union {
struct {
unsigned CCP2IE : 1;
unsigned : 2;
unsigned BCLIE : 1;
unsigned EEIE : 1;
unsigned : 1;
unsigned CMIE : 1;
};
} PIE2bits @ 0x08D;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit nBO @ ((unsigned)&PCON*8)+0;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
};
struct {
unsigned nBO : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char SSPCON2 @ 0x091;

volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;

volatile union {
struct {
unsigned SEN : 1;
unsigned RSEN : 1;
unsigned PEN : 1;
unsigned RCEN : 1;
unsigned ACKEN : 1;
unsigned ACKDT : 1;
unsigned ACKSTAT : 1;
unsigned GCEN : 1;
};
} SSPCON2bits @ 0x091;



volatile unsigned char PR2 @ 0x092;



volatile unsigned char SSPADD @ 0x093;



volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;

volatile union {
struct {
unsigned BF : 1;
unsigned UA : 1;
unsigned R_nW : 1;
unsigned S : 1;
unsigned P : 1;
unsigned D_nA : 1;
unsigned CKE : 1;
unsigned SMP : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
};
struct {
unsigned : 2;
unsigned R : 1;
unsigned : 2;
unsigned D : 1;
};
struct {
unsigned : 2;
unsigned I2C_READ : 1;
unsigned I2C_START : 1;
unsigned I2C_STOP : 1;
unsigned I2C_DATA : 1;
};
struct {
unsigned : 2;
unsigned nW : 1;
unsigned : 2;
unsigned nA : 1;
};
struct {
unsigned : 2;
unsigned nWRITE : 1;
unsigned : 2;
unsigned nADDRESS : 1;
};
struct {
unsigned : 2;
unsigned R_W : 1;
unsigned : 2;
unsigned D_A : 1;
};
struct {
unsigned : 2;
unsigned READ_WRITE : 1;
unsigned : 2;
unsigned DATA_ADDRESS : 1;
};
} SSPSTATbits @ 0x094;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;

volatile union {
struct {
unsigned TX9D : 1;
unsigned TRMT : 1;
unsigned BRGH : 1;
unsigned : 1;
unsigned SYNC : 1;
unsigned TXEN : 1;
unsigned TX9 : 1;
unsigned CSRC : 1;
};
struct {
unsigned TXD8 : 1;
unsigned : 5;
unsigned nTX8 : 1;
};
struct {
unsigned : 6;
unsigned TX8_9 : 1;
};
} TXSTAbits @ 0x098;



volatile unsigned char SPBRG @ 0x099;



volatile unsigned char CMCON @ 0x09C;

volatile bit CIS @ ((unsigned)&CMCON*8)+3;
volatile bit C1INV @ ((unsigned)&CMCON*8)+4;
volatile bit C2INV @ ((unsigned)&CMCON*8)+5;
volatile bit C1OUT @ ((unsigned)&CMCON*8)+6;
volatile bit C2OUT @ ((unsigned)&CMCON*8)+7;
volatile bit CM0 @ ((unsigned)&CMCON*8)+0;
volatile bit CM1 @ ((unsigned)&CMCON*8)+1;
volatile bit CM2 @ ((unsigned)&CMCON*8)+2;

volatile union {
struct {
unsigned CM : 3;
unsigned CIS : 1;
unsigned C1INV : 1;
unsigned C2INV : 1;
unsigned C1OUT : 1;
unsigned C2OUT : 1;
};
struct {
unsigned CM0 : 1;
unsigned CM1 : 1;
unsigned CM2 : 1;
};
} CMCONbits @ 0x09C;



volatile unsigned char CVRCON @ 0x09D;

volatile bit CVRR @ ((unsigned)&CVRCON*8)+5;
volatile bit CVROE @ ((unsigned)&CVRCON*8)+6;
volatile bit CVREN @ ((unsigned)&CVRCON*8)+7;
volatile bit CVR0 @ ((unsigned)&CVRCON*8)+0;
volatile bit CVR1 @ ((unsigned)&CVRCON*8)+1;
volatile bit CVR2 @ ((unsigned)&CVRCON*8)+2;
volatile bit CVR3 @ ((unsigned)&CVRCON*8)+3;

volatile union {
struct {
unsigned CVR : 4;
unsigned : 1;
unsigned CVRR : 1;
unsigned CVROE : 1;
unsigned CVREN : 1;
};
struct {
unsigned CVR0 : 1;
unsigned CVR1 : 1;
unsigned CVR2 : 1;
unsigned CVR3 : 1;
};
} CVRCONbits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit ADCS2 @ ((unsigned)&ADCON1*8)+6;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit PCFG0 @ ((unsigned)&ADCON1*8)+0;
volatile bit PCFG1 @ ((unsigned)&ADCON1*8)+1;
volatile bit PCFG2 @ ((unsigned)&ADCON1*8)+2;
volatile bit PCFG3 @ ((unsigned)&ADCON1*8)+3;

volatile union {
struct {
unsigned PCFG : 4;
unsigned : 2;
unsigned ADCS2 : 1;
unsigned ADFM : 1;
};
struct {
unsigned PCFG0 : 1;
unsigned PCFG1 : 1;
unsigned PCFG2 : 1;
unsigned PCFG3 : 1;
};
} ADCON1bits @ 0x09F;

# 1111
volatile unsigned char EEDATA @ 0x10C;



volatile unsigned char EEADR @ 0x10D;



volatile unsigned char EEDATH @ 0x10E;


volatile union {
struct {
unsigned : 6;
};
} EEDATHbits @ 0x10E;



volatile unsigned char EEADRH @ 0x10F;


volatile union {
struct {
unsigned : 5;
};
} EEADRHbits @ 0x10F;

# 1146
volatile unsigned char EECON1 @ 0x18C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned : 3;
unsigned EEPGD : 1;
};
} EECON1bits @ 0x18C;



volatile unsigned char EECON2 @ 0x18D;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 4 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\time.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;




typedef long time_t;
struct tm {
int tm_sec;
int tm_min;
int tm_hour;
int tm_mday;
int tm_mon;
int tm_year;
int tm_wday;
int tm_yday;
int tm_isdst;
};

# 30
extern int time_zone;

# 35
extern time_t time(time_t *);
extern int stime(time_t *);
extern char * asctime(const struct tm *);
extern char * ctime(const time_t *);
extern struct tm * gmtime(const time_t *);
extern struct tm * localtime(const time_t *);
extern time_t mktime(struct tm *);
extern size_t strftime(char *, size_t, const char *, const struct tm *);

# 31 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 133 "../I2C.h"
void I2C_initialize()
{
TRISC3 = 1 ;
TRISC4 = 1 ;




SSPM3 = 1;
SSPM2 = 0;
SSPM1 = 0;
SSPM0 = 0;

# 177
SSPADD = 0x27;

# 183
SSPEN = 1 ;

}

void I2C_Start()
{
SEN = 1;


while ( SEN == 1 );


}

# 205
unsigned char I2C_data_receive()
{if(SSPIF==1)SSPIF = 0;
RCEN = 1;

while(BF == 0 );
while(SSPIF==0);
return SSPBUF;

}



void I2C_data_send(unsigned char data)
{

# 267
if (SSPIF == 1)SSPIF =0;

SSPBUF = data ;
while (BF);

# 284
while(SSPIF ==0);

}

# 292
void I2C_SendACK()
{

# 299
ACKDT = 0 ;
ACKEN = 1;
while (ACKEN);

}
void I2C_SendNACK()
{
ACKDT = 1 ;
ACKEN = 1;
while (ACKEN);
}

# 326
void I2C_Stop()
{
PEN = 1;
while(PEN);

}

# 31 "../DS1307.h"
unsigned char zaman[3] ;
unsigned char tarih[3];

void DS1307_time()
{

I2C_Start();
I2C_data_send(0b11010000);
I2C_data_send(0);

I2C_Stop();

I2C_Start();
I2C_data_send(0b11010001);
zaman[0]= I2C_data_receive();
zaman[0] = (zaman[0] >>4)*10 + (zaman[0]&0xf);
I2C_SendACK();
zaman[1] = I2C_data_receive();
zaman[1] = (zaman[1] >> 4)*10 + (zaman[1]&0xf);
I2C_SendACK();
zaman[2] = I2C_data_receive();
zaman[2] = ((zaman[2]>>4)&0b11)*10 + (zaman[2]&0xf);
I2C_SendNACK();
I2C_Stop();

}

void DS1307_date()
{
I2C_Start();
I2C_data_send(0b11010000);

I2C_data_send(4);

I2C_Stop();

I2C_Start();
I2C_data_send(0b11010001);
tarih[2]= I2C_data_receive();
tarih[2] = (tarih[2] >>4)*10 + (tarih[2]&0xf);
I2C_SendACK();
tarih[1] = I2C_data_receive();
tarih[1] = (tarih[1] >> 4)*10 + (tarih[1]&0xf);
I2C_SendACK();
tarih[0] = I2C_data_receive();
tarih[0] = ((tarih[0]>>4)&0b11)*10 + (tarih[0]&0xf);
I2C_SendNACK();
I2C_Stop();
}

void DS1307_set_time(byte saat, byte dakika, byte saniye)
{
I2C_Start();
I2C_data_send(0b11010000);

I2C_data_send(0);
I2C_data_send( ((saniye/10)<<4)+(saniye%10));
I2C_data_send( ((dakika/10)<<4)+(dakika%10));
I2C_data_send( ((saat/10)<<4)+(saat%10));
I2C_Stop();
}

void DS1307_set_date(byte gun, byte ay, byte yil)
{
I2C_Start();
I2C_data_send(0b11010000);

I2C_data_send(4);
I2C_data_send( ((gun/10)<<4)+(gun%10));
I2C_data_send( ((ay/10)<<4)+(ay%10));
I2C_data_send( ((yil/10)<<4)+(yil%10));

I2C_Stop();



}

# 38 "../lcd.h"
extern void lcd_data(unsigned char);
extern void lcd_init(void);
extern void lcd_write(const char *s);
extern void lcd_clear(void);
extern void lcd_goto(unsigned char,unsigned char);
extern void lcd_command(unsigned char c);
void show_information();

byte cursor_x=1, cursor_y=1 ;

unsigned char __temp ;
void lcd_command(unsigned char c)
{
RB1=0;
RB3=1;

__temp = c&0xF0 ;
RB4 = __temp >> 4 ;
RB5 = __temp >> 5 ;
RB6 = __temp >> 6 ;
RB7 = __temp >> 7 ;



_delay((unsigned long)((2)*(16000000/4000.0)));
RB3=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
RB3=1;

__temp = ((c & 0x0F)<<4) ;
RB4 = __temp >> 4 ;
RB5 = __temp >> 5 ;
RB6 = __temp >> 6 ;
RB7 = __temp >> 7 ;



_delay((unsigned long)((2)*(16000000/4000.0)));
RB3=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
}

void lcd_data(unsigned char c)
{

RB1=1;
RB3=1;

__temp = (c & 0xF0) ;

RB4 = __temp >> 4 ;
RB5 = __temp >> 5 ;
RB6 = __temp >> 6 ;
RB7 = __temp >> 7 ;


_delay((unsigned long)((2)*(16000000/4000.0)));
RB3=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
RB3=1;
__temp = ((c & 0x0F)<<4) ;

RB4 = __temp >> 4 ;
RB5 = __temp >> 5 ;
RB6 = __temp >> 6 ;
RB7 = __temp >> 7 ;

_delay((unsigned long)((2)*(16000000/4000.0)));
RB3=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
cursor_x ++;
if(cursor_x == 17)
{
cursor_x = 1;
cursor_y = 2;
}
}
void lcd_clear(void)
{
lcd_command(0x01);
_delay((unsigned long)((2)*(16000000/4000.0)));
cursor_x = 1;
cursor_y = 1;
}

void lcd_write(const char *s)
{
_delay((unsigned long)((1)*(16000000/4000.0)));
while(*s)lcd_data(*s++);
}

void lcd_goto(unsigned char p_1,unsigned char p_2)
{
cursor_x = p_2;
cursor_y = p_1;
if(p_1==1)
{lcd_command(0x80+((p_2-1)%16));

}else{
lcd_command(0xC0+((p_2-1)%16));
}

}


void lcd_init()
{
RB1=0;
RB3=0;

_delay((unsigned long)((1)*(16000000/4000.0)));
RB3=1;
lcd_command(0x02);
_delay((unsigned long)((2)*(16000000/4000.0)));
lcd_command(0x28);
lcd_command(0x06);

lcd_command(0x06);

lcd_command(0x0C);

lcd_clear();

lcd_command(0x80);
}



char tarih_str[9], saat_str[9];


void tarihi_goster()
{
DS1307_date();
sprintf(tarih_str, "%d%d/%d%d/%d%d", tarih[2]/10, tarih[2]%10,
tarih[1]/10, tarih[1]%10,
tarih[0]/10, tarih[0]%10);

lcd_goto(2,9);
lcd_write(tarih_str);

}
void saati_goster()
{
DS1307_time();
sprintf(saat_str, "%d%d:%d%d:%d%d", zaman[2]/10, zaman[2]%10,
zaman[1]/10, zaman[1]%10,
zaman[0]/10, zaman[0]%10 );
lcd_goto(1,9);
lcd_write(saat_str);
}

byte _i;
extern unsigned char EEPROM_read_byte(unsigned char address);
void show_information()
{
lcd_goto(1, 1);
for(_i=0; _i<8;_i++)
lcd_data(EEPROM_read_byte(248+_i));

lcd_goto(2, 1);
for(_i=0; _i<8;_i++)
lcd_data(EEPROM_read_byte(240+_i));

}
extern void EEPROM_write_byte(unsigned char address, unsigned char data);
void save_information(byte * data, byte index)
{
for(byte jk=0; jk <8; jk++)
EEPROM_write_byte(256-8*index+jk, data[jk]);

}

# 5 "../DHT11.h"
byte sicaklik, nem;

# 16
void DHT11_initialize()
{

TRISC0 = 0 ;
RC0 = 1 ;


TRISC1 = 0;
RC1 = 0;
TRISC2 = 0;
RC2= 0;
}
byte DHT11_data[5]={0};
byte test = 0;

void DHT11_get_data()
{
DHT11_data[0] = 0;
DHT11_data[1] = 0;
DHT11_data[2] = 0;
DHT11_data[3] = 0;
DHT11_data[4] = 0;

# 47
signed char bit_index = 0, data_index=0;
byte low_count=0, high_count=0;

# 59
RC0 = 0 ;


_delay((unsigned long)((18)*(16000000/4000.0)));

RC0 = 1;

_delay((unsigned long)((20)*(16000000/4000000.0)));
RC0 = 0;
TRISC0 = 1;




if(RC0 ==1)while(RC0==1);


while(RC0 == 0 );


while(RC0 == 1);

# 100
for(data_index=0; data_index < 5;data_index++)
{
for(bit_index = 7; bit_index > -1 ; bit_index--)
{

while(RC0 == 0) low_count ++;

while(RC0 == 1)high_count ++;

if( high_count > low_count)

DHT11_data[data_index] |= (1 << bit_index);

low_count = 0;
high_count = 0;


}

}

# 130
sicaklik = DHT11_data[2];
nem = DHT11_data[0];
_delay((unsigned long)((5)*(16000000/4000.0)));

TRISC0 = 0 ;
RC0 = 1;

}

# 52 "../EEPROM.h"
void EEPROM_initialize()
{

# 59
EEPGD = 0 ;

# 66
WREN = 0;

}

# 83
unsigned char EEPROM_read_byte(unsigned char address)
{
EEADR = address ;

RD = 1;
while(RD);
return EEDATA;

}

# 151
void EEPROM_write_byte(unsigned char address, unsigned char data)
{
EEADR = address ;
EEDATA = data ;
WREN = 1;

EECON2 = 0x55;
EECON2 = 0xaa;
WR = 1;
while(WR);
WREN = 0 ;


}

# 30 "../ALARM.h"
extern byte UART_receive_byte();

struct Alarm
{
byte alarm_dakikasi;
byte alarm_saati;


byte alarm_gunu;
byte alarm_ayi;
byte alarm_yili;


};

union ALAN
{
struct Alarm alarm;
byte value[5];

};
typedef union ALAN ALARM;

byte alarm_compare(ALARM * first, ALARM * second);
extern ALARM temp;
extern ALARM closest_alarm;
extern void EEPROM24C32_write_byte(unsigned int address, byte data);
extern void EEPROM24C32_write_bytes(unsigned int address, byte action, byte data);
extern byte EEPROM24C32_read_byte(unsigned int address);
extern byte EEPROM24C32_read_bytes(unsigned int address, byte action);
ALARM get_closest_alarm();



void alarm_kaydet(ALARM alarm)
{

byte sayi = 1;

for(; (sayi < 236) && (EEPROM_read_byte(sayi) !=255);sayi +=5);

for(byte a = 0; a<sizeof(ALARM);a++)
EEPROM_write_byte(sayi+a, alarm.value[a]);

EEPROM_write_byte(0, EEPROM_read_byte(0)+1);
}


ALARM alarm_yukle(byte alarm_numarasi)
{
byte current_alarm_count = 0;
byte sayi = 1;
for(;sayi < 236 ; sayi +=5)
{
if(EEPROM_read_byte(sayi) != 255) current_alarm_count++;
if(current_alarm_count == alarm_numarasi ) break;
}

ALARM temp={0};

for(byte index = 0; index<sizeof(ALARM);index++)
{
temp.value[index] = EEPROM_read_byte(sayi+index);
}
return temp ;
}

void alarm_resetle()
{
EEPROM_write_byte(0, 0);
for(int j=1; j<240;j++)
EEPROM_write_byte(j, 255);

for(int j =1; j < 47;j++)
{
EEPROM24C32_write_byte(j*4, 0xff);
EEPROM24C32_write_byte(j*4+3, 0xff);

}

}

void alarm_sil(byte alarm_numarasi)
{
byte current_alarm_count = 0;
byte sayi = 1;
for(;sayi < 236 ; sayi +=5)
{
if(EEPROM_read_byte(sayi) != 255) current_alarm_count++;
if(current_alarm_count == alarm_numarasi ) break;
}

for(byte index = 0; index<sizeof(ALARM);index++)
{
EEPROM_write_byte(sayi+index, 255);
}
EEPROM_write_byte(0, EEPROM_read_byte(0)-1);
}
byte is_alarm_aktif = 0;
void alarm_aktif()
{




}
void alarm_sustur()
{
RD6 = 0 ;
}

void alarm_check()
{
if(zaman[0] == 0 || zaman[0] == 1 || zaman[0] == 2 )
{
temp.alarm.alarm_saati = zaman[2];
temp.alarm.alarm_dakikasi = zaman[1];
temp.alarm.alarm_gunu = tarih[2];
temp.alarm.alarm_ayi = tarih[1];
temp.alarm.alarm_yili = tarih[0];


if(alarm_compare(&temp, &closest_alarm) == 2)
{

is_alarm_aktif = 1;
RD6 = 1;
lcd_clear();
byte alarm_number;


for(byte j=1; j< 47;j++)
{
temp = alarm_yukle(j);
if( alarm_compare(&closest_alarm, &temp) == 2)
{
alarm_number = j ;
break;
}
}
byte display_count = 0;
byte note_found = 0;
for(;;)
{
for(byte j=1; j<47; j++)
{




if(EEPROM24C32_read_byte(j*4+3) == alarm_number)
{
note_found = 1;
lcd_clear();
lcd_goto(cursor_y, cursor_x);
byte message_length = EEPROM24C32_read_byte(j*4+2);

byte block_number = EEPROM24C32_read_byte(j*4+1);


for(byte okunan = 0; okunan<message_length;okunan++)
{
if(okunan == 0)
{
EEPROM24C32_read_bytes((block_number-1) * 64 + 6*32, 1);
}
else if(okunan == 32)
{

EEPROM24C32_read_bytes(0, 3);
_delay((unsigned long)((2000)*(16000000/4000.0)));
lcd_clear();
lcd_goto(cursor_y , cursor_x);
display_count++;
if(display_count ==12)break;

EEPROM24C32_read_bytes((block_number-1) * 64 + 7*32, 1);

}


lcd_data(EEPROM24C32_read_bytes(0, 2));
lcd_goto(cursor_y, cursor_x);

}

EEPROM24C32_read_bytes(0, 3);
if(display_count ==12)break;
_delay((unsigned long)((2000)*(16000000/4000.0)));
display_count++;
if(display_count ==6)break;


}


}
if(note_found == 0)
{
for(byte hh=0;hh<20;hh++)_delay((unsigned long)((1000)*(16000000/4000.0)));
break;
}
if(display_count ==6)break;
}

# 244
lcd_clear();
RD6 = 0;
}

}

}
extern void UART_send_byte(unsigned char data);
byte alarm_compare(ALARM *first, ALARM *second)
{
second->value[3] = (*second).alarm.alarm_ayi;
second->value[4] = (*second).alarm.alarm_yili;
second->value[2] = (*second).alarm.alarm_gunu;
second->value[1] = (*second).alarm.alarm_saati;
second->value[0] = (*second).alarm.alarm_dakikasi;


byte compare=4;
for(int arr_index = 4; arr_index>=0; arr_index--)
{
if((first)->value[arr_index] < (second)->value[arr_index])
{


compare = 4;

break;
}
else if((first)->value[arr_index] > (second)->value[arr_index])
{




compare = 3;

break;
}
else
{




compare = 2;

}
}



return compare;

}

ALARM simdi;
ALARM get_closest_alarm()
{

ALARM en_kucuk_alarm = {59, 23, 31, 12,62};
DS1307_time();
DS1307_date();
ALARM simdi;

simdi.alarm.alarm_dakikasi = zaman[1];
simdi.alarm.alarm_saati = zaman[2];
simdi.alarm.alarm_gunu = tarih[2];
simdi.alarm.alarm_ayi = tarih[1];
simdi.alarm.alarm_yili = tarih[0];



byte alarm_count = EEPROM_read_byte(0);

byte kucuk = 0;
ALARM current_alarm;
for(byte alarm_index = 1; alarm_index <= alarm_count; alarm_index ++)
{
current_alarm = alarm_yukle(alarm_index);


if((alarm_compare(&current_alarm, &simdi)==3) &&(alarm_compare(&current_alarm, &en_kucuk_alarm)==4))
{

en_kucuk_alarm = current_alarm;

}
}


return en_kucuk_alarm;
}

# 50 "../UART.h"
void UART_initialize()
{
TRISC6 = 0 ;
TRISC7 = 1 ;

# 60
TXEN = 1 ;

# 68
SYNC = 0 ;

# 78
BRGH = 1 ;


SPBRG = 103;

# 90
CREN = 1;

# 103
SPEN = 1 ;
}

# 155
void UART_send_byte(unsigned char data)
{

# 166
TXREG = data ;
while(TRMT==0);
}

# 211
unsigned char UART_receive_byte()
{
while (RCIF == 0);
return RCREG ;
}
void UART_send_string(const char * str)
{
while(*str !='\0')
{
UART_send_byte(*str);
str ++;
}
}

# 17 "../INTERRUPT.h"
extern void handle_bluetooth_message();
void interrupt INTER()
{


if(RCIF == 1)
{

handle_bluetooth_message();
}


}

# 17 "../SEVENSEGMENTS.h"
void Segments_initialize()
{
TRISD = 0 ;
PORTD = 0;
}

void display_digit(byte number, byte segment_number)
{
PORTD = (PORTD&0xf0) + number;

if(segment_number ==1 ){RD4=1;_delay((unsigned long)((1)*(16000000/4000.0)));RD4=0; }
else {RD5=1;_delay((unsigned long)((1)*(16000000/4000.0)));RD5=0; }
}

void display_number(byte number)
{
display_digit( number / 10 , 1);
display_digit( number%10, 2);
}

# 12 "../24C32EEPROM.h"
void EEPROM24C32_write_byte(unsigned int address, byte data)
{
I2C_Start();

I2C_data_send(0b10100000);
I2C_data_send(address>>8);
I2C_data_send(address&0x00ff);

I2C_data_send(data);
I2C_Stop();
_delay((unsigned long)((10)*(16000000/4000.0)));
}

void EEPROM24C32_write_bytes(unsigned int address, byte action, byte data)
{
if(action == 1)
{
I2C_Start();

I2C_data_send(0b10100000);
I2C_data_send(address>>8);
I2C_data_send(address&0xff);

}
else if(action == 2)
{
I2C_data_send(data);
}
else
{
I2C_Stop();
_delay((unsigned long)((10)*(16000000/4000.0)));
}
}


byte EEPROM24C32_read_byte(unsigned int address)
{
byte received;

I2C_Start();
I2C_data_send(0b10100000);

I2C_data_send(address>>8);
I2C_data_send(address&0xff);

I2C_Stop();
_delay((unsigned long)((5)*(16000000/4000.0)));
I2C_Start();
I2C_data_send(0b10100001);
received = I2C_data_receive();

I2C_SendNACK();
I2C_Stop();
_delay((unsigned long)((5)*(16000000/4000.0)));
return received;


}



byte EEPROM24C32_read_bytes(unsigned int address, byte action)
{


if(action == 1)
{
I2C_Start();
I2C_data_send(0b10100000);
I2C_data_send(address>>8);
I2C_data_send(address&0xff);

I2C_Stop();
_delay((unsigned long)((5)*(16000000/4000.0)));

I2C_Start();
I2C_data_send(0b10100001);
return 0;
}
else if(action == 2)
{
byte t_= I2C_data_receive();
I2C_SendACK();
return t_;

}
else
{
I2C_data_receive();
I2C_SendNACK();
I2C_Stop();
_delay((unsigned long)((8)*(16000000/4000.0)));
return 0;
}


}

# 11 "../MESSAGE.h"
struct MES {
byte message_number;
byte block_number;
byte message_length;

byte related_alarm_number ;
};

union MESS
{
struct MES message_info;
byte value[4];
};
typedef union MESS MESSAGE;




byte get_message_count()
{return EEPROM24C32_read_byte(0);}

MESSAGE load_message_descriptor(byte message_number)
{
MESSAGE temp;


for(int j =1; j < 47;j++)
{
if(EEPROM24C32_read_byte((j)*4) == message_number)
{
message_number = j;
break;
}
}



EEPROM24C32_read_bytes(message_number*4, 1);
for(byte j=0; j<4;j++)
{
temp.value[j] = EEPROM24C32_read_bytes(0, 2);
}
EEPROM24C32_read_bytes(0, 3);
return temp;
}

MESSAGE current_message;



byte read_message(byte message_number, byte action)
{
static byte read_character_count = 0;
if(action==1)
{
current_message = load_message_descriptor(message_number);
EEPROM24C32_read_bytes((current_message.message_info.block_number -1) * 64 + 6*32 , 1);
read_character_count = 0;
return 0;
}
else if(action==2)
{
if(read_character_count == current_message.message_info.message_length)
return 0;
read_character_count ++;
return EEPROM24C32_read_bytes(0 , 2);

}
else
{
EEPROM24C32_read_bytes(0 , 3);
return 0;

}
}


byte sss;
byte loc;
void save_message(byte action, byte data, byte len, byte alarm_number)
{
if(action == 1)
{
}
else if(action == 6)
{

}
else
{

}
}

void EEPROM24C32_resetle()
{
for(byte count = 0; count < 15;count ++)
{
UART_send_byte(count);
EEPROM24C32_write_bytes(count*32, 1, 0);
for(byte j=0;j<32;j++)

EEPROM24C32_write_bytes(0, 2, 255);
EEPROM24C32_write_bytes(0, 3, 255);
}

EEPROM24C32_write_byte(0 , 0);



}

# 27 "../BLUETOOTH.h"
extern ALARM closest_alarm;
extern ALARM get_closest_alarm();
byte nisa_saim;
byte dolar_info[8];
byte head_info[8];

byte l [10];
void handle_bluetooth_message()
{ byte received_data = UART_receive_byte();
_delay((unsigned long)((10)*(16000000/4000.0)));

byte receive_array [6]={0};
ALARM alarm;
switch(received_data)
{


case '1':
UART_send_byte('T');

receive_array[0] = UART_receive_byte();

receive_array[1] = UART_receive_byte();

receive_array[2] = UART_receive_byte();
UART_send_byte('T');
DS1307_set_time(receive_array[0], receive_array[1], receive_array[2]);
break;


case '2':
UART_send_byte('T');

receive_array[0] = UART_receive_byte();

receive_array[1] = UART_receive_byte();

receive_array[2] = UART_receive_byte();
UART_send_byte('T');
DS1307_set_date(receive_array[0], receive_array[1], receive_array[2]);
break;


case '3':
UART_send_byte('T');

alarm.alarm.alarm_saati = UART_receive_byte();

alarm.alarm.alarm_dakikasi = UART_receive_byte();

alarm.alarm.alarm_gunu = UART_receive_byte();

alarm.alarm.alarm_ayi = UART_receive_byte();

alarm.alarm.alarm_yili = UART_receive_byte();
alarm_kaydet(alarm);
UART_send_byte('T');


is_alarm_aktif = 1;

break;


case '4':
UART_send_byte('T');

byte count = EEPROM_read_byte(0);
ALARM temp;
for(byte index=1; index <= count; index++)
{temp = alarm_yukle(index);



UART_send_byte(temp.alarm.alarm_saati);
UART_send_byte(temp.alarm.alarm_dakikasi);
UART_send_byte(temp.alarm.alarm_gunu);
UART_send_byte(temp.alarm.alarm_ayi);
UART_send_byte(temp.alarm.alarm_yili);

UART_send_byte('T');
}


UART_send_byte('T');


break;


case '5':
UART_send_byte('T');

byte silinecek_index = UART_receive_byte();
alarm_sil(silinecek_index);



byte recorded_alarm_number ;




for(byte j=1; j<47; j++)
{
recorded_alarm_number = EEPROM24C32_read_byte(j*4+3);
if(recorded_alarm_number == silinecek_index)
{
for(byte k=0; k <4;k++)
EEPROM24C32_write_byte(j*4+k, 0xff);
}
else if( recorded_alarm_number > silinecek_index)
{
EEPROM24C32_write_byte(j*4+3, recorded_alarm_number-1);
}

}

UART_send_byte('T');
break;


case '6':
UART_send_byte('T');
alarm_resetle();
UART_send_byte('T');


break;

# 177
case '9':
UART_send_byte('T');
DHT11_get_data();
UART_send_byte(sicaklik);
UART_send_byte(nem);

UART_send_byte('T');


break;

case 'A':
UART_send_byte('T');
RD6=1;
UART_send_byte('T');


break;


case 'B':
UART_send_byte('T');
RD6=0;
UART_send_byte('T');


break;


case 'C':
UART_send_byte('T');
_delay((unsigned long)((10)*(16000000/4000.0)));
byte received_byte = 0;
byte related_alarm = UART_receive_byte();
UART_send_byte('T');
_delay((unsigned long)((10)*(16000000/4000.0)));
byte message_length = UART_receive_byte();

UART_send_byte('T');
_delay((unsigned long)((10)*(16000000/4000.0)));
byte received_byte_count =0;
MESSAGE write_message;

for(;;)
{
received_byte = UART_receive_byte();

if(received_byte == 250)
{

byte count = EEPROM24C32_read_byte(0);

write_message.message_info.message_length = message_length;
write_message.message_info.message_number = count+1;
write_message.message_info.related_alarm_number = related_alarm;

for(int j =1; j < 47;j++)
{
if(EEPROM24C32_read_byte((j)*4) == 255)
{
write_message.message_info.block_number = j;


break;
}
}
for(int j=0; j<4;j++)
{
EEPROM24C32_write_byte(write_message.message_info.block_number*4+j, write_message.value[j]);
}
EEPROM24C32_write_bytes((write_message.message_info.block_number-1)*64+ 6*32, 1, 0);



}

else if(received_byte == 251)
{
EEPROM24C32_write_bytes(0, 3, 0);
_delay((unsigned long)((10)*(16000000/4000.0)));

}
else if(received_byte == 252)
{
EEPROM24C32_write_bytes((write_message.message_info.block_number-1)*64+ 6*32 + 32, 1, 0);
}
else if(received_byte == 253)
{
UART_send_byte('T');
_delay((unsigned long)((10)*(16000000/4000.0)));
break;
}
else
{
EEPROM24C32_write_bytes(0, 2, received_byte );

}
_delay((unsigned long)((10)*(16000000/4000.0)));
UART_send_byte('T');
}
EEPROM24C32_write_byte(0, EEPROM24C32_read_byte(0)+1);
UART_send_byte('T');
break;



case 'D':
nisa_saim = 0 ;
UART_send_byte('T');

byte alarm_number = UART_receive_byte();
UART_send_byte('T');

byte _temp;
for(byte j=1; j<47; j++)
{

_temp = EEPROM24C32_read_byte(j*4+3);


if(_temp == alarm_number)
{
byte message_length = EEPROM24C32_read_byte(j*4+2);

byte block_number = EEPROM24C32_read_byte(j*4+1);

UART_send_byte( message_length);


UART_receive_byte();

for(byte okunan = 0; okunan<message_length;okunan++)
{
if(okunan == 0)
{
EEPROM24C32_read_bytes((block_number-1) * 64 + 6*32, 1);
}
else if(okunan == 32)
{
EEPROM24C32_read_bytes(0, 3);
EEPROM24C32_read_bytes((block_number-1) * 64 + 7*32, 1);

}


UART_send_byte(EEPROM24C32_read_bytes(0, 2));
UART_receive_byte();
}
EEPROM24C32_read_bytes(0, 3);


}
}


UART_send_byte('T');
break;


case 'E':
_delay((unsigned long)((1)*(16000000/4000000.0)));
UART_send_byte('T');
byte alarm_number = UART_receive_byte();
UART_send_byte('T');
_delay((unsigned long)((5)*(16000000/4000.0)));
byte alarm_note_number = UART_receive_byte();
UART_send_byte('T');
_delay((unsigned long)((5)*(16000000/4000.0)));
byte current_count = 0 ;

for(byte j=1; j<47; j++)
{
if(EEPROM24C32_read_byte(j*4+3) == alarm_number)
{
current_count++;
}
if(current_count == alarm_note_number)
{
for(byte k=0; k <4;k++)
EEPROM24C32_write_byte(j*4+k, 0xff);

break;
}

}


UART_send_byte('T');

EEPROM24C32_write_byte(0 , EEPROM24C32_read_byte(0)-1);
break;

case 'O':
RD7 = 1;
UART_send_byte('T');
break;

case 'S':
RD7 = 0;
UART_send_byte('T');
break;


case 'K':
UART_send_byte('T');



for(byte i = 0; i < 8;i++)
{
dolar_info[i] = UART_receive_byte();
}

UART_send_byte('T');
save_information(dolar_info, 2);
is_alarm_aktif = 1;
break;


case 'L':
UART_send_byte('T');

for(byte i = 0; i < 8;i++)
{
head_info[i] = UART_receive_byte();
}
UART_send_byte('T');
save_information(head_info, 1);
is_alarm_aktif = 1;
break;


default:
break;
}


}

# 31 "../NewCircuit.c"
ALARM temp ;
ALARM closest_alarm;

void main()
{



TRISD7 = 0;
TRISD6 = 0;



TRISB = 0;
PORTB = 0;

lcd_init();
_delay((unsigned long)((100)*(16000000/4000.0)));
DHT11_initialize();
lcd_clear();
lcd_goto(1,1);
lcd_write("DTH11 tamam...");
_delay((unsigned long)((1000)*(16000000/4000.0)));



Segments_initialize();
I2C_initialize();
lcd_clear();
lcd_goto(1,1);
lcd_write("I2C tamam...");
_delay((unsigned long)((1000)*(16000000/4000.0)));
EEPROM_initialize();

UART_initialize();
lcd_clear();
lcd_goto(1,1);
lcd_write("UART tamam...");
_delay((unsigned long)((1000)*(16000000/4000.0)));


RCIE = 1 ;
PEIE = 1;
GIE=1;


closest_alarm = get_closest_alarm();
lcd_clear();
show_information();

# 90
while(1)
{

GIE=1;
_delay((unsigned long)((750)*(16000000/4000.0)));
GIE=0;
saati_goster();
tarihi_goster();
alarm_check();


if(zaman[0] % 10 == 0)
{
DHT11_get_data();
display_number( sicaklik );
}

if(is_alarm_aktif == 1)
{
is_alarm_aktif = 0;
closest_alarm = get_closest_alarm();
show_information();
}

}

}

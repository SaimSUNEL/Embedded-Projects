     1: 
     2: #include <htc.h>
     3: 
     4: // #pragma config statements should precede project file includes.
     5: // Use project enums instead of #define for ON and OFF.
     6: 
     7: // CONFIG1L
     8: #pragma config PLLDIV = 1       // PLL Prescaler Selection bits (No prescale (4 MHz oscillator input drives PLL directly))
     9: #pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
    10: #pragma config USBDIV = 2       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes from the 96 MHz PLL divided by 2)
    11: 
    12: // CONFIG1H
    13: #pragma config FOSC = INTOSCIO_EC// Oscillator Selection bits (Internal oscillator, port function on RA6, EC used by USB (INTIO))
    14: #pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
    15: #pragma config IESO = ON        // Internal/External Oscillator Switchover bit (Oscillator Switchover mode enabled)
    16: 
    17: // CONFIG2L
    18: #pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
    19: #pragma config BOR = ON         // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
    20: #pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
    21: #pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)
    22: 
    23: // CONFIG2H
    24: #pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
    25: #pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)
    26: 
    27: // CONFIG3H
    28: #pragma config CCP2MX = ON      // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
    29: #pragma config PBADEN = ON      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
    30: #pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
    31: #pragma config MCLRE = OFF      // MCLR Pin Enable bit (RE3 input pin enabled; MCLR pin disabled)
    32: 
    33: // CONFIG4L
    34: #pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
    35: #pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
    36: #pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))
    37: 
    38: // CONFIG5L
    39: #pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
    40: #pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
    41: #pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
    42: #pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)
    43: 
    44: // CONFIG5H
    45: #pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
    46: #pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)
    47: 
    48: // CONFIG6L
    49: #pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
    50: #pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
    51: #pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
    52: #pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)
    53: 
    54: // CONFIG6H
    55: #pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
    56: #pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
    57: #pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)
    58: 
    59: // CONFIG7L
    60: #pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
    61: #pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
    62: #pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
    63: #pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)
    64: 
    65: // CONFIG7H
    66: #pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)
    67: typedef unsigned char byte;
    68: void wait(byte val)
    69: {
    70:     
    71:     for(byte k = 0; k < val; k++)__delay_ms(10);
    72:     
    73: }
    74: #include "I2C.h"
    75: void main()
    76: {
    77:     
    78:     INTSRC = 1;
    79:     //Internal oscillator selected...
    80: //SCS1 = 1;
    81: 
    82: 
    83: __delay_ms(5);
    84: // 4MHZ
    85: // 8MHZ
    86: // 16MHZ
    87: //4MHZ...
    88: IRCF2 = 1;
    89: IRCF1 = 1;
    90: IRCF0 = 1;
    91: I2C_initialize();
    92: __delay_ms(10);
    93: wait(50);
    94: TRISC0 = 0;
    95: while(1)
    96: {
    97:       I2C_Start();
    98:     __delay_ms(1);
    99:     I2C_Stop();
   100:     __delay_ms(1);
   101:     
   102:     I2C_Start();
   103:     __delay_ms(1);
   104:     I2C_data_send(0b01010101);
   105:     __delay_ms(1);
   106:     I2C_Stop();
   107:     
   108:    
   109:     RC0 = ~RC0;
   110:     wait(100);   
   111: }
   112: 
   113:     
   114: }
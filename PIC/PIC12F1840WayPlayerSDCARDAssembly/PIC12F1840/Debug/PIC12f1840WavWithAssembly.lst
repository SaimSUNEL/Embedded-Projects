     1: 
     2: 
     3: /*
     4: SD kart : 4 GB micro sd...
     5: 
     6: 
     7: Herhangi bir dosyalama sistemi ( FAT12 , 16 ) implemente edilmedi... Sadece karttan müzik verisini yazdýðýmýz adresten itibaren
     8: okumaya baþlayýp (eðer devre kapatýlmazsa sd kartýn tümü okunana kadar devam eder.Istenirse play , pause , stop butonlarý eklenebilir.
     9: 
    10: 
    11: 
    12: 
    13: Wav dosyasý,  eðer PWM frekansý 22500 ise 8 bit 22050 HZ Stereo ; 44100 ise 8 bit 44100 HZ olamadýlýr.
    14: 
    15: MP3 , wav vb. dosyalarýnýzý  http://audio.online-convert.com/convert-to-wav gibi bir websitesi yada uygun bir müzik dönüþtürme programý ile gerekli formata dönüþtürebilirsiniz...
    16: 
    17: 
    18: Wav dosyasýný Hex Editor Neo gibi dosyalarý byte byte açabilen bir programla Sd kartýn 0. adresinden itibaren kopyalýyoruz...
    19: ( Not : bu iþlem kartýn dosyalama sistemini bozacaktýr ve içindeki diðer bilgilere( müzik , belgeler , video ... ) eriþim mümkün olmayacaktýr. )
    20: 
    21: 
    22: */
    23: 
    24: 
    25: 
    26: 
    27: 
    28: #include <htc.h>
    29: 
    30: 
    31: 
    32: 
    33: 
    34: #ifndef _XTAL_FREQ
    35:  // Unless already defined assume 4MHz system frequency
    36:  // This definition is required to calibrate __delay_us() and __delay_ms()
    37:  #define _XTAL_FREQ 20000000UL
    38: #endif
    39: 
    40: unsigned int i , r;
    41: 
    42: 
    43: 
    44: 
    45: #define CARD_SELECT RA4  //SD kard modulündeki CS pinine baðlý
    46: #define ReadSPI() (spi_yaz(0xff)) //SD karttan gelen veri geri okumak için basit bit macro tanýmlýyoruz...
    47: #define ClockSPI()(spi_yaz(0xff)) //Bazý yerlerde SD karta clock sinyali saðlamamýz gerekiyor..Aslýnda SD den okumakla ayný þey...
    48: 
    49: unsigned long adress; //Sd karttan okumaya baþlayacaðýmýz adres 
    50: 
    51: unsigned char spi_yaz( unsigned char veri )   // SPI veri gönderme fonksiyonu ayný zamanda gelen veriyi de alýyor...
    52: {
    53: 
    54:         SSPBUF = veri;
    55:         
    56:         while( !BF );
    57:                 
    58:         return SSPBUF;
    59:         
    60:         }
    61:         
    62: 
    63: int sendSDCmd( unsigned char c , unsigned long x  , unsigned char frame ) //SD karta komut göndermek için kullandýðýmýz fonksiyon..
    64: {
    65: 
    66: CARD_SELECT = 0 ; // CS pinini sýfýra çekiyoruz ve SD kart iletiþime aktif hale geliyor...
    67: __delay_ms( 300 );
    68:         
    69:         
    70:         spi_yaz( (  c | 0x40 ) & 0xff ); //Öncelikler komut verimizi gönderiyoruz...
    71:         
    72:         
    73:         
    74:         spi_yaz(  (x >> 24 ) & 0xff ); //Ardýndan 4 byttan oluþan adres bilgisi bazý komutlar için argüman bilgisi...
    75: 
    76:      spi_yaz( ( x>>16 ) & 0xff );
    77: 
    78:         spi_yaz( ( x >> 8 ) & 0xff  );
    79: 
    80:         spi_yaz( x  & 0xff );
    81: 
    82: spi_yaz( frame ); //Son olarak CRC bilgisini gönderiyoruz.... 
    83: 
    84:         
    85:         //SD karttan gelen cevabý bekleyip geri döndürüyoruz...
    86:         i= 10;
    87:         do
    88:         {
    89:                 r = ReadSPI();
    90:                 if( r != 0xff ) break;
    91:         }
    92:         while( --i>0);
    93:         
    94:         return (r );
    95:         
    96:         
    97:         
    98:         /* return response
    99: FF - timeout, no answer
   100: 00 - command accepted
   101: 01 - command received, card in idle state (after RESET)
   102: other errors
   103: */
   104:         /*
   105:         
   106:         bit 0 = Idle state
   107: bit 1 = Erase Reset
   108: bit 2 = Illegal command
   109: bit 3 = Communication CRC error
   110: bit 4 = Erase sequence error
   111: bit 5 = Address error
   112: bit 6 = Parameter error
   113: bit 7 = Always 0
   114:         */
   115:         
   116: }
   117: 
   118: #define disableSD() CARD_SELECT=1;ClockSPI()
   119: #define enableSD() CARD_SELECT=0
   120: 
   121: 
   122: #define _RESET 0//RESET komutu 0'dýr.
   123: #define INIT 1 //Initialize komutu
   124: #define READ_SINGLE 17 
   125: #define WRITE_SINGLE 24
   126: 
   127: #define DATA_ACCEPT 0x05
   128: int result;
   129: #define DATA_START 0xFE
   130: 
   131: //Bu fonksiyonuz bu projede kullanmýyoruz...
   132: int writeSector( unsigned long address , char * p )
   133: {
   134:         
   135:         int r2 , i2;
   136:         do 
   137:         {
   138:         
   139:         r2      = sendSDCmd( WRITE_SINGLE , address , 0xff );
   140:         } while (r2 != 0 );
   141:         
   142:         ;
   143:         
   144:         if( r2 == 0 )
   145:         { 
   146:                 spi_yaz( DATA_START );
   147:                 for( i2 = 0 ;i2 < 512 ; i2 ++ )
   148:                 {
   149:                                                 spi_yaz( p[i2]  ) ;
   150:                         
   151:                 }
   152:                 ClockSPI();
   153:                 ClockSPI();
   154:                 
   155:                 
   156:                 
   157:                 while( ReadSPI() != 0 );
   158:                 
   159:         }
   160: 
   161:         disableSD();
   162: 
   163:         disableSD();
   164:         ReadSPI();
   165:         ReadSPI();
   166:         return (r2);
   167:         
   168:         }
   169: char gelen[ 20 ];
   170:         
   171:         
   172:         
   173:         //Bu fonksiyonu bu projede kullanmýyoruz...
   174: int readSector( unsigned long addr , char * buf )
   175: {
   176:         int r, i;
   177: 
   178: do 
   179: {
   180: 
   181:         
   182:         r = sendSDCmd( READ_SINGLE , addr  , 0xff );
   183: } while (r != 0 ) ;
   184: 
   185: 
   186:         if( r == 0 )
   187:         {
   188:         //Usart_veri_gonder( 'T' );
   189:         
   190:                 while( ReadSPI() != DATA_START );
   191:                 
   192:                 
   193:                 for( i = 0 ; i < 512 ; i ++ )
   194:                 {
   195:                         if( i < 20 ) gelen[ i ] = ReadSPI();
   196:                         else    ReadSPI();
   197:                 }
   198:                 
   199:                 ReadSPI();
   200:                 ReadSPI();
   201:                 
   202:         }
   203:         disableSD();
   204:         ReadSPI();
   205:         ReadSPI();
   206:         return 0;
   207: }
   208: 
   209: 
   210: /*
   211: 
   212: bit 0 = Idle state
   213: bit 1 = Erase Reset
   214: bit 2 = Illegal command
   215: bit 3 = Communication CRC error
   216: bit 4 = Erase sequence error
   217: bit 5 = Address error
   218: bit 6 = Parameter error
   219: bit 7 = Always 0
   220: 
   221: 
   222: 
   223: */
   224: //Kartý yerleþtirip pice enerji verdiðimizde kartý kullanabilmek için bir takým ön iþlemler yapmamýz gerekiyor...
   225: 
   226: int initMedia()
   227: {int i , r;
   228:         adress = 0;
   229:         
   230:         //En baþta en az 80 clock sinyali göndermemiz gerekiyor... ( CS enable deðil )
   231:         CARD_SELECT = 1 ;
   232:          for( i = 0 ; i < 20 ; i++ )
   233:         ClockSPI();
   234:          
   235:           //CS pinini lowa çekiyoruz ve reset komutunu gönderiyoruz.. addres(argüman) 0 , CRC Reset komutu için mutlaka 0x95 olmalýdýr.
   236:          
   237:          CARD_SELECT = 0 ;
   238:  r = sendSDCmd( _RESET , adress , 0x95 );
   239:  
   240: 
   241: if( r!= 1 )  //Eðer SD karttan uygun cevap gelmezse hata bilgisiyle geri dönüyoruz...
   242: return 0x84;
   243:         
   244: 
   245: 
   246: //CMD8  *3      R7      No      SEND_IF_COND    For only SDC V2. Check voltage range
   247: /*
   248: 
   249: Initializing high-capacity cards
   250: After the card enters idle state with a CMD0, send a CMD8 with argument of 0x000001AA and correct CRC prior to initialization process.
   251: If the CMD8 is rejected with illigal command error (0x05), the card is SDC version 1 or MMC version 3. If accepted, R7 response (R1(0x01) + 32-bit return value) will be returned. 
   252: The lower 12 bits in the return value 0x1AA means that the card is SDC version 2 and it can work at voltage range of 2.7 to 3.6 volts. 
   253: If not the case, the card should be rejected.
   254: ( http://elm-chan.org/docs/mmc/mmc_e.html )
   255: */
   256: 
   257: 
   258: r = sendSDCmd( 8 , 0x1AA , 0X87 );
   259: //Usart_veri_gonder( r );
   260: __delay_ms( 100 );
   261: for( int k =  0 ; k < 5 ; k++ ) {r = ReadSPI () ; }
   262: 
   263: 
   264: 
   265: __delay_ms( 100 );
   266: 
   267: //Karta kart kabul edene kadar Initialize komutu gönderiyoruz...
   268: do
   269: {
   270: sendSDCmd( 55 , 0 , 0xff ) ;  //Initialize komutu için gerekli ön komut...
   271: r = sendSDCmd( 0x69 , 0X40000000  , 0xff );
   272: 
   273: } while ( r != 0  );
   274: 
   275: 
   276: /*
   277: 
   278: 
   279: do 
   280: {
   281:         r = sendSDCmd( 1,  0 , 0xff );
   282:         CARD_SELECT = 1; ;
   283: 
   284:         __delay_ms( 100 );
   285:         
   286: } while ( r != 0);
   287: 
   288: 
   289: */
   290: 
   291: 
   292: CARD_SELECT = 1 ;
   293: 
   294: return 0;
   295:                 
   296:         
   297: }
   298: 
   299: 
   300: 
   301: 
   302: 
   303: void spi_hazirla() 
   304: {
   305: //      0010 = SPI Master mode, clock = FOSC/64
   306: //0001 = SPI Master mode, clock = FOSC/16
   307: //0000 = SPI Master mode, clock = FOSC/4
   308: 
   309:         
   310:         SSPEN = 1; //Enable the SPI module....
   311:         CKP = 0;//Idle state for clock is a low level
   312:         CKE = 1;  //Transmit occurs on transition from active to Idle clock state 
   313:         SMP = 0 ;//Input data sampled at middle of data output time
   314: 
   315:         SSPM3 =  0 ; // 4
   316:         //16/64 mhz baþlangýçta
   317:         SSPM2 = 0 ;
   318:         SSPM1 = 1 ; 
   319:         SSPM0 = 0 ;
   320: }
   321: 
   322: char c;
   323: void InitSd()
   324:         {
   325:                 TRISA4 = 0;
   326:                 RA4 = 1;
   327:                 spi_hazirla();
   328:         }
   329: 
   330:         //Sd karttan veri okumak için sadece bu komutu kullanýyoruz...
   331: unsigned char ReadMultiSector (   long adress  )
   332:         {
   333:         do
   334:         {
   335:                  r =    sendSDCmd( 18 , adress , 0xff );  //Karta multiple read komutunu , kart kabul edene kadar gönderiyoruz...
   336:                 
   337:         }while( r != 0 );
   338:         return 0;
   339:                 
   340:         }
   341:         
   342: 
   343: void main() 
   344: {
   345:         
   346:                 SCS1 = 0 ;
   347:         SCS0 = 0 ;
   348:         
   349:         IRCF3 = 1 ;
   350:         IRCF2 = 1 ;
   351:         IRCF1 = 1 ;
   352:         IRCF0 = 0 ;
   353:         SPLLEN = 0 ;  //4x PLL enable...not enabled...
   354:         
   355:         
   356:         
   357:         
   358:         
   359:         
   360:         ANSELA = 0 ;
   361:         CCP1SEL = 1 ; //CCP1 RA5 te
   362:         
   363:         
   364:         
   365:         
   366:         
   367:         
   368:         
   369:         
   370:         
   371:      //Kullanýlacak pinleri uygun bir þekilde output yada input yapýyoruz... 
   372:         TRISA0 = 0 ; //SDO output
   373:         TRISA1 = 0 ; //SCK output
   374:         TRISA2 = 1 ; //SDI input
   375:         
   376:         
   377:                 
   378:         
   379:         InitSd();  //SD kartýn CS pini aktif ve SPI iletiþim hazýr...
   380:         
   381:         __delay_ms( 100 );
   382: r = initMedia(); //Kartý baþlatýyoruz...
   383: 
   384:         if( r ) { //Sýfýr dýþý bir deðer gelirse kart initialize baþarýsýzdýr...
   385:         //Ledi yak...
   386:         
   387:                 while( 1 );
   388:         }
   389:         
   390:         TRISA5 = 0; //CCP1 pin output olarak seçildi...
   391:         //Wav stereo fakat biz sadece bir kanal kullanacaðýz( CCP1 ) . Ýstenirse ikinci CCP kullanýlarak ikinci hoparlör baðlanabilir...
   392:         //Not : Eðer müzik datasý ikisi hoparlör için farklý bu projede bunlardan sadece bir tanesi çalýnacak...
   393:         /*
   394: //16 MHZ için 22050 PWM frekansý...
   395: PR2 = 0b10110100 ;
   396: T2CON = 0b00000100 ; //Timer2 post scaler 1:1 , prescale 1:1  Timer2 aktif 
   397: CCP1CON = 0b00001100 ;  // CCP module PWM module olarak ayarlandý...
   398:   //Timer2 yi daha sonra çalýþtýracaðýz...
   399: */
   400: 
   401: 
   402: /*      
   403:         
   404:         PR2 = 0b10110100 ;
   405: T2CON = 0b00000100 ;
   406: CCPR1L = 0b01011010 ;
   407: CCP1CON = 0b00011100 ;
   408:         */
   409: SPLLEN = 1 ; //8 * 4 = 32 MHZ...
   410: __delay_ms( 3200 );  
   411: //32 MHZ için 44100 
   412:         PR2 = 0b10110100 ;
   413: T2CON = 0b00000100 ;
   414: CCPR1L = 0b01011010 ;
   415: CCP1CON = 0b00011100 ;
   416:         /*
   417:         // 32 mhz için 22050
   418:         PR2 = 0b01011010 ;
   419: T2CON = 0b00000101 ;
   420: CCPR1L = 0b00101101 ;
   421: CCP1CON = 0b00011100 ;
   422: */
   423: 
   424: 
   425: 
   426: 
   427: /*
   428: //8 MHZ için 44100 PWM frekansý
   429: PR2 = 0b00101100 ;
   430: T2CON = 0b00000100 ;
   431: CCPR1L = 0b00010110 ;
   432: CCP1CON = 0b00011100 ;
   433:         *//*
   434: //20 MHZ için 22050
   435: PR2 = 0b11100010 ;
   436: T2CON = 0b00000100 ;
   437: CCPR1L = 0b01110001 ;
   438: CCP1CON = 0b00011100 ;
   439:         */
   440:         TMR2ON = 0;
   441:         
   442: int index; 
   443: 
   444:         SSPM1 = 0 ; //SPI Speed 16 MHZ/4 e deðiþtirildi... Sd karttan okuma hýzýný 4 MHZ çýkartýyoruz...
   445:     SSPM0 = 0;
   446: ReadMultiSector (  0x00  ) ; //Kartýn en baþýndan itibaren okumaya baþlýyoruz...                
   447: TMR2IF = 0;
   448: TMR2ON = 1;  //Timer 2 aktif 
   449: #asm
   450: #endasm  //BAnk 0 selected...
   451: 
   452: int _ind ;
   453: unsigned char temp ;
   454: 
   455: #asm
   456: 
   457: #endasm  //BAnk 0 selected...
   458: 
   459: while( 1 )  //Program sürekli çalýþacak....
   460:         {
   461:                 
   462:                 
   463:                 /*
   464:                 RP1:RP0 Bank
   465:         00 0
   466:         01 1
   467:         10 2
   468:         11 3
   469:                 */
   470:                 
   471:                 
   472: #asm
   473: while_loop5:            
   474:                 
   475:                 
   476: //SSPBUF 13h
   477: //RP0 : 5 
   478: // Z : 2
   479: //SPSTAT 0x94
   480:                 //BF : 0
   481: 
   482:                 
   483:                 // while( ReadSPI != 0xFE );    //Multiple read komutunu gönderdikten ve her 512 byte okuma iþleminden sonra Sd karttan data start(0xfe) komutunu bekliyoruz    ...
   484:                 
   485:                 
   486:                 
   487:                         movlb 4h //4. bank seçildi...
   488:                 
   489:                 start_karekteri_bekle:
   490:         
   491:         
   492:         
   493: 
   494:         movlw   0xff //SSBUF = 0xff ;
   495:         movwf 0x11h ; // SSBUF = 0xff ;
   496:         
   497:         
   498:         
   499:         
   500:             //bsf 0x03 , 5 // SSPSTAT için bank
   501:                 //SSPSTAT bank 4 te zaten...
   502:         
   503:                 
   504:                 dongu:
   505:                 btfss 0x14 , 0 
   506:             goto dongu ;  // while ( BF == 0 ); 
   507:                 
   508:         //Hala bank 4 teyiz...  //bcf 0x03 , 5 //SSPBUF için banksel
   509:                 
   510:                 
   511:                 movf 0x11 , W // W = SSPBUF and BF = 0
   512:                 
   513:                 XORLW 0xFE   
   514:                 btfss 0x03 ,  2  //if( SSPBUF == 0xFE ) 
   515:                 goto start_karekteri_bekle;
   516: 
   517: 
   518: 
   519: 
   520: iorlw 0x1 //Z biti sýfýrlandý....
   521: 
   522: 
   523: movlb 0h //bank 0 seçildi 0x21 adresi için...
   524: movlw 0x00  // 0 dan tekrar 0 sayacak 256 adým...For loop için...
   525: movwf 0x21
   526: for_loop :
   527: btfsc 0x3 , 2   
   528: goto for_loop_bitir;
   529: 
   530: //for( index = 0 ; index < 256 ; index ++ )
   531: //{
   532: 
   533: 
   534: 
   535:         
   536:         //Ýlk ReadSPI ();  //Sd karttan bir byte alýyoruz fakat bunu kullanmýyoruz bu byte ikinci hoparlör için...
   537:                         
   538:                         movlb 4h //SSPBUF için bank 4 seçildi..
   539:                         
   540:                 movlw   0xff //SSBUF = 0xff ; 
   541:                 
   542:         movwf 0x11 ; 
   543:         
   544:         
   545:         //Hala 4. bank ... //bsf 0x03 , 5 // SSPSTAT için bank
   546:                 
   547:                 
   548:                 dongu2:
   549:                 btfss 0x14 , 0
   550:             goto dongu2 ;  // while ( BF == 0 );        
   551:                 
   552:                 //hala bank 4 teyiz....
   553:                 //bcf 0x03 , 5 //SSPBUF için banksel
   554:                 movf 0x11 , W // W = SSPBUF and BF = 0
   555: 
   556: 
   557: 
   558: //IKINCI read SPI // ikinci byte'ý alýyoruz ve bunu CCP1 PWM registerlarýna atýyoruz...
   559: //hala 4. bank 
   560: movlw   0xff //SSBUF = 0xff ; 
   561:         movwf 0x11 ;
   562:         
   563: //      bsf 0x03 , 5 // SSPSTAT için bank
   564:                 
   565:                 dongu3:
   566:                 btfss 0x14 , 0
   567:             goto dongu3 ;  // while ( BF == 0 );        
   568:                 
   569:                 bcf 0x03, 5 //SSPBUF için banksel
   570:         
   571:         movf 0x11 , W // W = SSPBUF and BF = 0
   572:                         
   573:                         
   574: movlb 0h // 0x24 için bank 0 yu seçiyoruz...
   575: 
   576:   movwf 0x24
   577:         
   578:                 
   579:                                 
   580: TMR2_loop:     //while( TMR2IF == 0 );  // TMR2IF periodun tamamlandýðýný gösterir...
   581: btfss 0x011, 1
   582: goto TMR2_loop 
   583:         
   584: 
   585:         
   586:                 
   587:         
   588:                 movlb 0h  //0x24 için bank sýfýr seçildi...
   589: 
   590:                 
   591:                 btfss 0x24 , 1    //CCP1X = SSPBUF >> 1 ; Okunan verinin ikinci biti CCP1X PWM bitine atanýyor... 
   592:         goto CCP1X_SIFIRLA;
   593:       
   594:             movlb 5h //CCP1CON için banksel 5 
   595:         bsf 0x13, 5
   596:         goto devam_et;
   597: 
   598:         CCP1X_SIFIRLA:
   599:         movlb 5h //CCP1CON için banksel 5 
   600:                 bcf 0x13 , 5
   601:         devam_et:
   602:                 
   603:                 //banks
   604: movlb 0h //0x24 için bank 0 
   605: btfss 0x24 , 0     //CCP1Y = SSPBUF ;  Okunan verinin ilk biti CCP1Y PWM bitine atanýyor...
   606: goto CCP1Y_SIFIRLA;
   607: movlb 5h //CCP1CON için bank 5 
   608: bsf 0x13 , 4
   609: 
   610: goto devam_et2;
   611: CCP1Y_SIFIRLA:
   612: movlb 5h //CCP1CON için bank 5 
   613: bcf 0x13 , 4
   614: 
   615: devam_et2:
   616: 
   617: 
   618: movlb 0h //0x24 için bank 0
   619: rrf 0x24 , W   //CCPR1L = SSPBUF >> 2 ;
   620: movwf 0x25
   621: rrf 0x25 , W
   622: ANDLW 0x3f
   623: movlb 5h //CCPR1L için bank 5 
   624: movwf 0x11
   625: //      TMR2IF = 0 ;  //TMR2 interrupt flagi sýfýrlýyoruz....
   626:         
   627:         
   628: movlb 0h //PIR1 için bank 0     
   629:         
   630: bcf 0x11 , 1
   631: 
   632: decf 0x21 , F
   633: 
   634: goto for_loop ;
   635: 
   636: for_loop_bitir:
   637:                                 
   638:                                         
   639: //} for loop end                        
   640:                                 
   641:                         //Her 512 byte'tan sonra iki byte'lýk CRC bilgilerini alýyoruz...
   642:                 
   643:         
   644: 
   645: 
   646:                                 //      ReadSPI();
   647:                                         
   648:         movlb 4h        
   649:         movlw   0xff //SSBUF = 0xff ; //CRC Ýlk ReadSPI ();
   650:         movwf 0x11 ;
   651:         
   652:         //bsf 0x03 , 5 // SSPSTAT için bank
   653:                 
   654:                 dongu5:
   655:                 btfss 0x14 , 0
   656:             goto dongu5 ;  // while ( BF == 0 );        
   657:                 
   658:                 //bcf 0x03 , 5 //SSPBUF için banksel
   659:                 
   660:                 movf 0x11 , W // W = SSPBUF and BF = 0
   661: 
   662:                                         
   663:                                         
   664:                                         //ReadSPI();
   665:                  
   666: movlw   0xff //SSBUF = 0xff ; //CRC ikinci read SPI
   667:         movwf 0x11 ;
   668:         
   669: //      bsf 0x03 , 5 // SSPSTAT için bank
   670:                 
   671:                 dongu6:
   672:                 btfss 0x14 , 0
   673:             goto dongu6 ;  // while ( BF == 0 );        
   674:                 
   675:                 //bcf 0x03, 5 //SSPBUF için banksel
   676:                 movf 0x11 , W // W = SSPBUF and BF = 0
   677:                 
   678:                 
   679:                 goto while_loop5 
   680:                 #endasm
   681:                 
   682:                 }
   683:         
   684: }
   685: 
   686: 
   687: 
   688: 
   689: 
   690: 
   691: 
   692: 

     1: 
     2: 
     3: #include<htc.h>
     4: #define TRUE 1
     5: #define FALSE 0
     6: #include<math.h>
     7: #include<stdlib.h>
     8: #include<time.h>
     9: #define SS RA4 //RA4 pini digital output used for ss of the slave device ( card reader )
    10: unsigned char SPI_yaz ( unsigned char data ) ;
    11: unsigned char cevap  ;
    12: char buff [ 64 ] ;
    13: 
    14: char error = FALSE ;;
    15: char * allocated ;
    16: 
    17: void SDCARD_bir_sektor_yaz  ( unsigned long adres , char * buff , int size ) 
    18: {
    19:         
    20:         SS = 0 ;
    21:         
    22:         SPI_yaz ( 0x40 | 24 ) ;
    23:         
    24:         SPI_yaz ( adres >> 24 ) ;
    25:         SPI_yaz ( adres >>  16  )  ;
    26:         SPI_yaz ( adres  >> 8 ) ;
    27:         SPI_yaz ( adres ) ;
    28:         
    29:         SPI_yaz ( 0xff ) ;
    30:         //Komut cevabýný bekle
    31:          for ( int a = 0 ; a < 100 ;a++ ) 
    32:          {
    33:                  cevap = SPI_yaz ( 0xff ) ;
    34:                  if ( cevap == 0 ) break ;
    35:                          
    36:          }
    37:         
    38:         if ( cevap == 0 ) //Single block write command accepted...
    39:         {
    40:                 
    41:                 SPI_yaz ( 0xfe ) ; //We are sending data start token to SD card
    42:                 
    43:                 
    44:                 for ( int h = 0 ; h < 512 ; h++ )
    45:                 {
    46:                         if ( h  < size )
    47:                         {
    48:                         SPI_yaz ( buff [ h ] ) ;
    49:                         }
    50:                         else SPI_yaz ( 0x0 ) ;
    51:                 }
    52:                 
    53:                 //CRC bytes has been  sent
    54:                 SPI_yaz ( 0xff ) ;
    55:                 SPI_yaz ( 0xff ) ;
    56:                 
    57:                 
    58:                 for ( int k = 0 ; k < 100 ; k++ )
    59:                 {
    60:                         cevap = SPI_yaz ( 0xff ) ;
    61:                         if ( cevap == 0x5 )
    62:                         {
    63:                                 break ;
    64:                         }
    65:                         
    66:                 }
    67:                 
    68:                 if ( cevap == 0x5 )
    69:                 {
    70:                 //SD card veriyi yazana kadar busydir ( DO sunu lowa çekiyor. o sýrada 0 okuyacaðýz...
    71:                 for ( int h = 0 ; h < 10000 ; h ++ )
    72:                 {
    73:                         cevap = SPI_yaz ( 0xff ) ;
    74:                         if ( cevap  != 0 ) 
    75:                         break ;
    76:                         
    77:                         
    78:                         
    79:                 }
    80:         }
    81:         else 
    82:         {
    83:         error = TRUE ;
    84:         while ( 1 ) ;   
    85:                 //Eðer 5 deðilse bir hata mesajý ver...
    86:                 
    87: }
    88:                 
    89:         }
    90:         else {
    91:                  error = TRUE ;
    92:         while ( 1 ) ;
    93:         }
    94:         SS= 1 ;
    95:         
    96: }
    97: 
    98: 
    99: 
   100: 
   101: 
   102: void SDCARD_bir_sektor_oku  ( unsigned long adres , char * buff )
   103: {
   104:         SS = 0 ;
   105:         
   106:         SPI_yaz ( 0x40 | 17 ) ;
   107:         
   108:         SPI_yaz ( adres >> 24 ) ;
   109:         SPI_yaz ( adres >>  16  )  ;
   110:         SPI_yaz ( adres  >> 8 ) ;
   111:         SPI_yaz ( adres ) ;
   112:         
   113:         SPI_yaz ( 0xff ) ;
   114:         //Komut cevabýný bekle
   115:          for ( int a = 0 ; a < 11 ;a++ ) 
   116:          {
   117:                  cevap = SPI_yaz ( 0xff ) ;
   118:                  if ( cevap == 0 ) break ;
   119:                          
   120:          }
   121:         
   122:         
   123:         
   124:          
   125:          if ( cevap == 0 ) //CMD 17 has been accepted... 
   126:          {
   127:                  
   128:                  
   129:                  //Wait for Data start token from the SD card....
   130:                 
   131:                  for ( int j = 0 ; j < 10000 ; j ++ )
   132:                  {
   133:                          cevap = SPI_yaz ( 0xf ) ;
   134:                          if ( cevap == 0xfe ) break ;
   135:                  }
   136:                  
   137:                  
   138:                  if ( cevap == 0xfe ) 
   139:                  {
   140:                          //Data ready geldi...
   141:                          
   142:                          for ( int k = 0 ; k < 512 ; k++ ) 
   143:                          {
   144:                                  cevap = SPI_yaz ( 0xff ) ;
   145:                                  if ( k < 64 ) 
   146:                                  {
   147:                                          buff [ k ] = cevap ;
   148:                                  }
   149:                                  
   150:                          }
   151:                          //CRC önemli deðil bizim için...
   152:                          SPI_yaz ( 0xff ) ;
   153:                          SPI_yaz ( 0xff ) ;
   154:                          
   155:                  }
   156:                  
   157:                  
   158:                  
   159:                  
   160:          }
   161:          
   162:         
   163:         
   164:         SS = 1 ;
   165:         
   166:         
   167:         
   168: }
   169: 
   170: 
   171: 
   172: void SDCARD_baslat ( )
   173: {
   174:         __delay_ms  ( 3200 ) ; //wait a little bit after powerup 
   175:         
   176:    SS = 1 ; 
   177:         for ( int a = 0 ; a < 11 ; a++ ) //8*11 clocks are applied to card when CS 1 
   178:         SPI_yaz ( 0xff ) ;      
   179:         
   180:         __delay_ms ( 4000 ) ;
   181: 
   182: //First we are sending CMD0 for SD to enter reset ( idle state )        
   183:         SS = 0 ;
   184:         
   185:         SPI_yaz ( 0x40 ) ;
   186:         
   187:         SPI_yaz ( 0x0 ) ;
   188:         SPI_yaz ( 0x0 ) ;
   189:         SPI_yaz ( 0x0 ) ;
   190:         SPI_yaz ( 0x0 ) ;
   191:         //For CMD0 the CRC value 
   192:         SPI_yaz ( 0x95 ) ; 
   193:         
   194:         
   195:         
   196:         
   197:         
   198:         cevap = SPI_yaz ( 0x0 ) ;
   199:         
   200:         
   201:         //Geçerli bir cevabýn gelmesi için en az 64 clock göndermke gerekebilir...
   202:         for ( int k = 0 ; k < 10 ; k ++ ) 
   203:         {
   204:                 cevap = SPI_yaz ( 0xff ) ;
   205:                 if ( cevap != 0x1 )continue  ;
   206:                         else break;
   207:         }
   208:         
   209: 
   210:         __delay_ms ( 100 ) ;
   211:         
   212:         
   213:         
   214:         if ( cevap == 0x1 )
   215:         {
   216:         do
   217:         {
   218:         //We are sending CMD1
   219:                 SPI_yaz ( 0x41 ) ;
   220: 
   221:                 SPI_yaz ( 0x0 ) ;
   222:                 SPI_yaz ( 0x0 ) ;
   223:                 SPI_yaz ( 0x0 ) ;
   224:                 SPI_yaz ( 0x0 ) ;
   225: SPI_yaz ( 0xff ) ;//CRC is not important anymore...
   226:                 
   227:                 for ( int a = 0 ; a < 10 ; a++ )
   228:                 {
   229:                 cevap = SPI_yaz ( 0xff ) ;
   230:                 if ( cevap != 0xff ) break ;
   231:                         
   232:                 }
   233:                 
   234:                 if ( cevap == 0 ) 
   235:                 {
   236:                          //Card initialization has been succeded ... 
   237:                         
   238:                 
   239:                         
   240:                         
   241:                 }
   242:                 else continue ;
   243:                 
   244:         }       
   245: while ( cevap == 0xff ) ;       
   246: 
   247:         
   248:         }
   249:         
   250:         
   251:         
   252:         SS = 1 ;
   253:         
   254:         
   255: }
   256: 
   257: 
   258: 
   259: unsigned char SPI_yaz ( unsigned char data ) 
   260: {
   261:         
   262: SSP1BUF = data ;
   263: while ( !BF ) ;
   264: SSP1IF = 0 ;
   265: return SSPBUF ; //this also clears BF ;
   266:         
   267:         
   268:         
   269:         
   270:         
   271:         
   272:         
   273: }
   274: 
   275: 
   276: 
   277: void SPI_ayarla (  ) 
   278: {
   279:         
   280:         
   281:         TRISA4 = 0 ;
   282:         
   283:         
   284:         //RA0 SDO
   285:         TRISA0 = 0 ; //SDO output
   286:         //SCK RA1
   287:         TRISA1 = 0 ; //SCK output
   288:         //SDI RA2
   289:         TRISA2 = 1 ; //SDI input...
   290:         
   291:         
   292:         SMP = 0 ; //The data will be sampled in the middle of clock...
   293:         
   294:         //SPI mode 0 ayarlandý...
   295:         CKP = 0 ;
   296:         CKE = 0 ; 
   297:         
   298:         
   299:         SSP1ADD = 31 ; // 250 khz SPI freq
   300:         
   301:         
   302:         SSPM3 = 1 ;
   303:         SSPM2 = 0 ;
   304:         SSPM1 = 1 ;
   305:         SSPM0 = 0 ;
   306:         
   307:         //We are enabling the SPI module...
   308:         SSPEN = 1 ;
   309: 
   310:                         
   311: }
   312: 
   313: void main ( ) 
   314: {
   315: 
   316: int k = rand ( ) % 25 ;
   317: 
   318:         
   319:         
   320:         TRISA = 0x0 ;
   321:         PORTA = 0 ;
   322:         
   323:         
   324:         
   325:         //If the config PLLEN enable PLL is always enabled
   326:         //IF the config PPL off , when SPLLEN = 1 4x pll enable..
   327:         SPLLEN = 1 ; 
   328:         //8 mhz is selected and 4x pll is enable therefore 32 MHZ current...
   329:         IRCF3 = 1 ;
   330:         IRCF2 = 1 ;
   331:         IRCF1 = 1 ;
   332:         IRCF0 = 0 ;
   333:         //Internal oscillator selected...
   334:         SCS1 = 1 ;
   335:         SCS0 = 0 ;
   336:         
   337:         
   338:         ANSELA = 0 ; //All pins are digital IO
   339:         //RA3 is always input...
   340:         
   341:         CCP1SEL = 1 ; //CCP1 pini is in RA5 after know
   342:         
   343:         
   344: 
   345:         
   346:         
   347:         //PWM mode P1A active high , P1B active high
   348:         CCP1M3 = 1 ;
   349:         CCP1M2 = 1 ;
   350:         CCP1M1 = 0 ;
   351:         CCP1M0 = 0 ; 
   352:         
   353:         
   354:         CCPR1L = 20 ;
   355:         DC1B1 = 0 ;
   356:         DC1B0 = 0 ; 
   357:         
   358:         //timer2 2mhz source her bir increment için...
   359:         T2CKPS1 = 0 ; //timer2 presc 1/4
   360:         T2CKPS0 = 1 ;
   361:         
   362:         //PWM freq 44100 hz
   363:         
   364:         PR2 = 44 ;
   365:         CCPR1L = 22 ;
   366:         
   367:         TMR2 = 0 ;
   368:         
   369:         
   370:         
   371:         // 0 <= CPR1L << 4 + 2bits < 180
   372:         
   373:         
   374:         
   375:         TMR2ON = 1 ;
   376:         
   377:         __delay_ms ( 1000 ) ;
   378:         SPI_ayarla ( ) ;
   379:         __delay_ms ( 1000 ) ;
   380:         SS = 1 ;
   381:         
   382:         SDCARD_baslat ( ) ;
   383:         __delay_ms ( 1500 ) ;
   384:         SDCARD_bir_sektor_oku ( 0 , buff  ) ;
   385:         
   386: 
   387:         
   388:         
   389:         while ( 1 ) 
   390:         {
   391:                 
   392:                 __delay_ms ( 3000 ) ;
   393:         }
   394:         
   395:         
   396:         
   397:         
   398:         
   399: }
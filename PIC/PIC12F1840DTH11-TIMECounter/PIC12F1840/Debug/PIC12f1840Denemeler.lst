     1: 
     2: #include<htc.h>
     3: 
     4: #define SICAKLIK 2
     5: #define NEM 3
     6: #define NONE 5
     7: 
     8: 
     9: /*
    10: 
    11: Data format: 8bit integral RH data + 8bit decimal RH data + 8bit integral T data + 8bit decimal T
    12: data + 8bit check sum. If the data transmission is right, the check-sum should be the last 8bit of
    13: "8bit integral RH data + 8bit decimal RH data + 8bit integral T data + 8bit decimal T data".
    14: 
    15: */
    16: typedef unsigned char byte;
    17: byte dht11_data[5];//40 bits
    18: byte sicaklik, nem ;
    19: byte low_time_count, high_time_count;
    20: 
    21: void DHT11_get_data()
    22: {
    23: for(byte a = 0 ; a < 5 ; a++) dht11_data[a] = 0;
    24: 
    25: RA5 = 0;
    26: TRISA5 = 0;
    27: __delay_ms(20);
    28: TRISA5 = 1;
    29: __delay_us(20);
    30: while(RA5 == 1);
    31: //DHT11 response signal
    32: while(RA5 == 0);
    33: while(RA5 == 1);
    34: 
    35: for(byte byte_index =0; byte_index < 5; byte_index ++)
    36: {
    37: 
    38:         for(signed char bit_index = 7; bit_index >= 0 ; bit_index--)
    39:         {
    40:                 while(RA5 == 0) low_time_count++;
    41:                 while(RA5 == 1) high_time_count++;
    42:                 if(high_time_count > low_time_count)
    43:                 {
    44:                         dht11_data[byte_index] |= 1 << bit_index;
    45:                 }
    46: 
    47:                 low_time_count = 0;
    48:                 high_time_count = 0;
    49:         }
    50:  
    51: 
    52: 
    53: }
    54: 
    55: sicaklik = dht11_data[2];
    56: nem = dht11_data[0];
    57: 
    58: 
    59: 
    60: 
    61: }
    62: 
    63: byte rakamlar [] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 
    64:                                         0b01111101, 0b00000111, 0b01111111, 0b01101111};
    65: #define DATA RA1
    66: #define CLOCK RA0
    67: #define FIRST_DIGIT RA2
    68: #define SECOND_DIGIT RA4
    69: byte what_to_display = NONE;
    70: 
    71: void display_digit(byte segment_number, byte value)
    72: {
    73:         byte temp = rakamlar[value];
    74:         if(what_to_display == SICAKLIK)
    75:         {
    76:                 if(segment_number == 1 )
    77:                 {
    78:                         temp |= (1 << 7);
    79:                 }
    80:         
    81:         }
    82:         else if(what_to_display == NEM)
    83:         {
    84:                 if(segment_number == 2 )
    85:                 {
    86:                         temp |= (1 << 7);
    87:                 }
    88:         
    89:         }
    90:         
    91: 
    92:         for(byte index = 0; index < 8; index++)
    93:                 {
    94:                         DATA = ( temp >> (7-index)) & 0x1;
    95:                         
    96:                         CLOCK = 1;
    97:                         
    98:                         __delay_us(100);
    99:                         CLOCK = 0;
   100:                         
   101:                         __delay_us(100);
   102: 
   103:                 }
   104: 
   105: 
   106:         if(segment_number == 1)
   107:         {
   108:                 FIRST_DIGIT = 1;
   109:                 
   110:                 __delay_us(100);
   111:                 FIRST_DIGIT = 0;
   112:                 
   113:                 __delay_us(100);
   114:         }
   115:         else
   116:         {
   117:                 SECOND_DIGIT = 1;
   118:                 
   119:                 __delay_us(100);
   120:                 SECOND_DIGIT = 0;
   121:                 
   122:                 __delay_us(100);
   123:         }
   124: 
   125: 
   126: }
   127: 
   128: byte count = 0;
   129: 
   130: void display_number(byte number)
   131: {
   132:         display_digit(1, number / 10);
   133:         __delay_ms(50);
   134:         display_digit(2, number % 10);
   135: }
   136: 
   137: #define COUNT_ACTIVE 9
   138: #define COUNT_IDLE 8
   139: 
   140: byte count_status = COUNT_IDLE;
   141: byte timer_count = 0;
   142: byte second_count = 0;
   143: void interrupt FNC()
   144: {
   145: if(TMR1IF == 1)
   146: {       TMR1ON = 0;
   147:         timer_count ++;
   148:         if(timer_count == 20)
   149:         {
   150:                 timer_count = 0;
   151:                 second_count ++;
   152:                 if(second_count == 99)
   153:                 {
   154:                         
   155:                         TMR1ON = 0;
   156:                         count_status = COUNT_IDLE;
   157:                 }
   158:                 
   159:                         
   160: 
   161:                 
   162:                 display_number(second_count);
   163:         }
   164:         
   165:         TMR1 = 15535;
   166:         TMR1IF = 0;
   167:         if(count_status != COUNT_IDLE)
   168:         {
   169:                 TMR1ON = 1;
   170:         }
   171: }
   172: else
   173:  
   174: if(IOCIF == 1)
   175: {
   176:         if(count_status == COUNT_IDLE)
   177:         {
   178:                 count_status = COUNT_ACTIVE;
   179:                 TMR1 = 15535;
   180:                 second_count = 0;
   181:                 TMR1ON = 1;
   182:         }
   183:         else if(count_status == COUNT_ACTIVE)
   184:         {
   185:                 count_status = COUNT_IDLE;
   186:                 TMR1ON = 0;
   187: 
   188:         }
   189: 
   190:         IOCIF = 0;
   191:         IOCAF5 = 0;
   192: }
   193: 
   194: }
   195: 
   196: 
   197: 
   198: void main()
   199: {
   200: 
   201: ANSELA = 0;
   202: SPLLEN = 0;
   203: //16 mhz internal oscillator
   204: IRCF3 = 1;
   205: IRCF2 = 1;
   206: IRCF1 = 1;
   207: IRCF0 = 1;
   208: 
   209: SCS1 = 1 ; //Internel oscillator
   210: SCS0 = 0;
   211: TRISA0 = 0; //A0 output
   212: PORTA = 0;
   213: 
   214: 
   215: TRISA3 = 1; //MCLR - A3 always input
   216: TRISA5 = 1; //dth11 pin 
   217: 
   218: TRISA0 = 0;
   219: TRISA1 = 0;
   220: TRISA2 = 0;
   221: TRISA4 = 0;
   222: 
   223: IOCAN = 0;
   224: IOCAP = 0;
   225: 
   226: IOCAP3 = 1; //Rising edge on RA3 interrupt  IOCAF3 interrupt flag
   227: IOCIE = 1;
   228: IOCIF = 0;
   229: IOCAF5 = 0;
   230: 
   231: 
   232: TMR1H = 0;
   233: TMR1L = 0;
   234: 
   235: 
   236: //timer1 source fosc/4 
   237: TMR1CS1 = 0;
   238: TMR1CS0 = 0;
   239: 
   240: //Prescaler 1/4
   241: T1CKPS1 = 1;
   242: T1CKPS0 = 0;
   243: 
   244: //Each interrupt will be rised in every 50000 us, 50 ms
   245: TMR1ON = 0;
   246: TMR1 = 15535;
   247: TMR1IF = 0;
   248: TMR1IE = 1; //Timer1 interrupt enabled...
   249: PEIE = 1;
   250: GIE = 1;
   251: DHT11_get_data();
   252: __delay_ms(100);
   253: //display_number(12);
   254: while(1)
   255: {
   256: 
   257:         if(count_status == COUNT_IDLE)
   258:         {
   259:                 DHT11_get_data();
   260: 
   261:                 what_to_display = SICAKLIK;
   262:                 display_number(sicaklik);
   263:                 __delay_ms(1000);
   264:                 what_to_display = NEM;
   265:                 display_number(nem);
   266: 
   267:                 __delay_ms(1000);
   268:         }
   269: 
   270: }// while(1)
   271: 
   272: }// main
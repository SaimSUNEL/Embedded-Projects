
# 1 "../AlarmDevresi.c"

# 12 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 82 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic16f877a.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char TMR0 @ 0x001;



volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit RA0 @ ((unsigned)&PORTA*8)+0;
volatile bit RA1 @ ((unsigned)&PORTA*8)+1;
volatile bit RA2 @ ((unsigned)&PORTA*8)+2;
volatile bit RA3 @ ((unsigned)&PORTA*8)+3;
volatile bit RA4 @ ((unsigned)&PORTA*8)+4;
volatile bit RA5 @ ((unsigned)&PORTA*8)+5;

volatile union {
struct {
unsigned RA0 : 1;
unsigned RA1 : 1;
unsigned RA2 : 1;
unsigned RA3 : 1;
unsigned RA4 : 1;
unsigned RA5 : 1;
};
} PORTAbits @ 0x005;



volatile unsigned char PORTB @ 0x006;

volatile bit RB0 @ ((unsigned)&PORTB*8)+0;
volatile bit RB1 @ ((unsigned)&PORTB*8)+1;
volatile bit RB2 @ ((unsigned)&PORTB*8)+2;
volatile bit RB3 @ ((unsigned)&PORTB*8)+3;
volatile bit RB4 @ ((unsigned)&PORTB*8)+4;
volatile bit RB5 @ ((unsigned)&PORTB*8)+5;
volatile bit RB6 @ ((unsigned)&PORTB*8)+6;
volatile bit RB7 @ ((unsigned)&PORTB*8)+7;

volatile union {
struct {
unsigned RB0 : 1;
unsigned RB1 : 1;
unsigned RB2 : 1;
unsigned RB3 : 1;
unsigned RB4 : 1;
unsigned RB5 : 1;
unsigned RB6 : 1;
unsigned RB7 : 1;
};
} PORTBbits @ 0x006;



volatile unsigned char PORTC @ 0x007;

volatile bit RC0 @ ((unsigned)&PORTC*8)+0;
volatile bit RC1 @ ((unsigned)&PORTC*8)+1;
volatile bit RC2 @ ((unsigned)&PORTC*8)+2;
volatile bit RC3 @ ((unsigned)&PORTC*8)+3;
volatile bit RC4 @ ((unsigned)&PORTC*8)+4;
volatile bit RC5 @ ((unsigned)&PORTC*8)+5;
volatile bit RC6 @ ((unsigned)&PORTC*8)+6;
volatile bit RC7 @ ((unsigned)&PORTC*8)+7;

volatile union {
struct {
unsigned RC0 : 1;
unsigned RC1 : 1;
unsigned RC2 : 1;
unsigned RC3 : 1;
unsigned RC4 : 1;
unsigned RC5 : 1;
unsigned RC6 : 1;
unsigned RC7 : 1;
};
} PORTCbits @ 0x007;



volatile unsigned char PORTD @ 0x008;

volatile bit RD0 @ ((unsigned)&PORTD*8)+0;
volatile bit RD1 @ ((unsigned)&PORTD*8)+1;
volatile bit RD2 @ ((unsigned)&PORTD*8)+2;
volatile bit RD3 @ ((unsigned)&PORTD*8)+3;
volatile bit RD4 @ ((unsigned)&PORTD*8)+4;
volatile bit RD5 @ ((unsigned)&PORTD*8)+5;
volatile bit RD6 @ ((unsigned)&PORTD*8)+6;
volatile bit RD7 @ ((unsigned)&PORTD*8)+7;

volatile union {
struct {
unsigned RD0 : 1;
unsigned RD1 : 1;
unsigned RD2 : 1;
unsigned RD3 : 1;
unsigned RD4 : 1;
unsigned RD5 : 1;
unsigned RD6 : 1;
unsigned RD7 : 1;
};
} PORTDbits @ 0x008;



volatile unsigned char PORTE @ 0x009;

volatile bit RE0 @ ((unsigned)&PORTE*8)+0;
volatile bit RE1 @ ((unsigned)&PORTE*8)+1;
volatile bit RE2 @ ((unsigned)&PORTE*8)+2;

volatile union {
struct {
unsigned RE0 : 1;
unsigned RE1 : 1;
unsigned RE2 : 1;
};
} PORTEbits @ 0x009;



volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned PCLATH : 5;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INTF @ ((unsigned)&INTCON*8)+1;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INTE @ ((unsigned)&INTCON*8)+4;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned TMR0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned TMR0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned T0IF : 1;
unsigned : 2;
unsigned T0IE : 1;
};
} INTCONbits @ 0x00B;



volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit ADIF @ ((unsigned)&PIR1*8)+6;
volatile bit PSPIF @ ((unsigned)&PIR1*8)+7;

volatile union {
struct {
unsigned TMR1IF : 1;
unsigned TMR2IF : 1;
unsigned CCP1IF : 1;
unsigned SSPIF : 1;
unsigned TXIF : 1;
unsigned RCIF : 1;
unsigned ADIF : 1;
unsigned PSPIF : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 2;
unsigned : 1;
unsigned : 1;
};
} PIR1bits @ 0x00C;



volatile unsigned char PIR2 @ 0x00D;

volatile bit CCP2IF @ ((unsigned)&PIR2*8)+0;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+3;
volatile bit EEIF @ ((unsigned)&PIR2*8)+4;
volatile bit CMIF @ ((unsigned)&PIR2*8)+6;

volatile union {
struct {
unsigned CCP2IF : 1;
unsigned : 2;
unsigned BCLIF : 1;
unsigned EEIF : 1;
unsigned : 1;
unsigned CMIF : 1;
};
} PIR2bits @ 0x00D;




volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;

volatile union {
struct {
unsigned TMR1ON : 1;
unsigned TMR1CS : 1;
unsigned nT1SYNC : 1;
unsigned T1OSCEN : 1;
unsigned T1CKPS : 2;
};
struct {
unsigned : 2;
unsigned T1SYNC : 1;
unsigned : 1;
unsigned T1CKPS0 : 1;
unsigned T1CKPS1 : 1;
};
struct {
unsigned : 2;
unsigned T1INSYNC : 1;
};
} T1CONbits @ 0x010;



volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;

volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;

volatile union {
struct {
unsigned T2CKPS : 2;
unsigned TMR2ON : 1;
unsigned TOUTPS : 4;
};
struct {
unsigned T2CKPS0 : 1;
unsigned T2CKPS1 : 1;
unsigned : 1;
unsigned TOUTPS0 : 1;
unsigned TOUTPS1 : 1;
unsigned TOUTPS2 : 1;
unsigned TOUTPS3 : 1;
};
} T2CONbits @ 0x012;



volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;

volatile union {
struct {
unsigned SSPM : 4;
unsigned CKP : 1;
unsigned SSPEN : 1;
unsigned SSPOV : 1;
unsigned WCOL : 1;
};
struct {
unsigned SSPM0 : 1;
unsigned SSPM1 : 1;
unsigned SSPM2 : 1;
unsigned SSPM3 : 1;
};
} SSPCONbits @ 0x014;




volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;
volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit ADDEN @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;

volatile union {
struct {
unsigned RX9D : 1;
unsigned OERR : 1;
unsigned FERR : 1;
unsigned ADDEN : 1;
unsigned CREN : 1;
unsigned SREN : 1;
unsigned RX9 : 1;
unsigned SPEN : 1;
};
struct {
unsigned RCD8 : 1;
unsigned : 5;
unsigned RC9 : 1;
};
struct {
unsigned : 6;
unsigned nRC8 : 1;
};
struct {
unsigned : 6;
unsigned RC8_9 : 1;
};
} RCSTAbits @ 0x018;



volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;




volatile unsigned char CCPR2L @ 0x01B;



volatile unsigned char CCPR2H @ 0x01C;



volatile unsigned int CCPR2 @ 0x01B;


volatile unsigned char CCP2CON @ 0x01D;

volatile bit CCP2Y @ ((unsigned)&CCP2CON*8)+4;
volatile bit CCP2X @ ((unsigned)&CCP2CON*8)+5;
volatile bit CCP2M0 @ ((unsigned)&CCP2CON*8)+0;
volatile bit CCP2M1 @ ((unsigned)&CCP2CON*8)+1;
volatile bit CCP2M2 @ ((unsigned)&CCP2CON*8)+2;
volatile bit CCP2M3 @ ((unsigned)&CCP2CON*8)+3;

volatile union {
struct {
unsigned CCP2M : 4;
unsigned CCP2Y : 1;
unsigned CCP2X : 1;
};
struct {
unsigned CCP2M0 : 1;
unsigned CCP2M1 : 1;
unsigned CCP2M2 : 1;
unsigned CCP2M3 : 1;
};
} CCP2CONbits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+5;
volatile bit ADCS0 @ ((unsigned)&ADCON0*8)+6;
volatile bit ADCS1 @ ((unsigned)&ADCON0*8)+7;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+2;

volatile union {
struct {
unsigned ADON : 1;
unsigned : 1;
unsigned GO_nDONE : 1;
unsigned CHS : 3;
unsigned ADCS : 2;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 3;
unsigned : 2;
};
struct {
unsigned : 2;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
};
struct {
unsigned : 2;
unsigned nDONE : 1;
};
struct {
unsigned : 2;
unsigned GO_DONE : 1;
};
} ADCON0bits @ 0x01F;

# 639
volatile unsigned char OPTION_REG @ 0x081;

volatile bit PSA @ ((unsigned)&OPTION_REG*8)+3;
volatile bit T0SE @ ((unsigned)&OPTION_REG*8)+4;
volatile bit T0CS @ ((unsigned)&OPTION_REG*8)+5;
volatile bit INTEDG @ ((unsigned)&OPTION_REG*8)+6;
volatile bit nRBPU @ ((unsigned)&OPTION_REG*8)+7;
volatile bit PS0 @ ((unsigned)&OPTION_REG*8)+0;
volatile bit PS1 @ ((unsigned)&OPTION_REG*8)+1;
volatile bit PS2 @ ((unsigned)&OPTION_REG*8)+2;

volatile union {
struct {
unsigned PS : 3;
unsigned PSA : 1;
unsigned T0SE : 1;
unsigned T0CS : 1;
unsigned INTEDG : 1;
unsigned nRBPU : 1;
};
struct {
unsigned PS0 : 1;
unsigned PS1 : 1;
unsigned PS2 : 1;
};
} OPTION_REGbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;

volatile union {
struct {
unsigned TRISA0 : 1;
unsigned TRISA1 : 1;
unsigned TRISA2 : 1;
unsigned TRISA3 : 1;
unsigned TRISA4 : 1;
unsigned TRISA5 : 1;
};
} TRISAbits @ 0x085;



volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile union {
struct {
unsigned TRISB0 : 1;
unsigned TRISB1 : 1;
unsigned TRISB2 : 1;
unsigned TRISB3 : 1;
unsigned TRISB4 : 1;
unsigned TRISB5 : 1;
unsigned TRISB6 : 1;
unsigned TRISB7 : 1;
};
} TRISBbits @ 0x086;



volatile unsigned char TRISC @ 0x087;

volatile bit TRISC0 @ ((unsigned)&TRISC*8)+0;
volatile bit TRISC1 @ ((unsigned)&TRISC*8)+1;
volatile bit TRISC2 @ ((unsigned)&TRISC*8)+2;
volatile bit TRISC3 @ ((unsigned)&TRISC*8)+3;
volatile bit TRISC4 @ ((unsigned)&TRISC*8)+4;
volatile bit TRISC5 @ ((unsigned)&TRISC*8)+5;
volatile bit TRISC6 @ ((unsigned)&TRISC*8)+6;
volatile bit TRISC7 @ ((unsigned)&TRISC*8)+7;

volatile union {
struct {
unsigned TRISC0 : 1;
unsigned TRISC1 : 1;
unsigned TRISC2 : 1;
unsigned TRISC3 : 1;
unsigned TRISC4 : 1;
unsigned TRISC5 : 1;
unsigned TRISC6 : 1;
unsigned TRISC7 : 1;
};
} TRISCbits @ 0x087;



volatile unsigned char TRISD @ 0x088;

volatile bit TRISD0 @ ((unsigned)&TRISD*8)+0;
volatile bit TRISD1 @ ((unsigned)&TRISD*8)+1;
volatile bit TRISD2 @ ((unsigned)&TRISD*8)+2;
volatile bit TRISD3 @ ((unsigned)&TRISD*8)+3;
volatile bit TRISD4 @ ((unsigned)&TRISD*8)+4;
volatile bit TRISD5 @ ((unsigned)&TRISD*8)+5;
volatile bit TRISD6 @ ((unsigned)&TRISD*8)+6;
volatile bit TRISD7 @ ((unsigned)&TRISD*8)+7;

volatile union {
struct {
unsigned TRISD0 : 1;
unsigned TRISD1 : 1;
unsigned TRISD2 : 1;
unsigned TRISD3 : 1;
unsigned TRISD4 : 1;
unsigned TRISD5 : 1;
unsigned TRISD6 : 1;
unsigned TRISD7 : 1;
};
} TRISDbits @ 0x088;



volatile unsigned char TRISE @ 0x089;

volatile bit TRISE0 @ ((unsigned)&TRISE*8)+0;
volatile bit TRISE1 @ ((unsigned)&TRISE*8)+1;
volatile bit TRISE2 @ ((unsigned)&TRISE*8)+2;
volatile bit PSPMODE @ ((unsigned)&TRISE*8)+4;
volatile bit IBOV @ ((unsigned)&TRISE*8)+5;
volatile bit OBF @ ((unsigned)&TRISE*8)+6;
volatile bit IBF @ ((unsigned)&TRISE*8)+7;

volatile union {
struct {
unsigned TRISE0 : 1;
unsigned TRISE1 : 1;
unsigned TRISE2 : 1;
unsigned : 1;
unsigned PSPMODE : 1;
unsigned IBOV : 1;
unsigned OBF : 1;
unsigned IBF : 1;
};
} TRISEbits @ 0x089;



volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit ADIE @ ((unsigned)&PIE1*8)+6;
volatile bit PSPIE @ ((unsigned)&PIE1*8)+7;

volatile union {
struct {
unsigned TMR1IE : 1;
unsigned TMR2IE : 1;
unsigned CCP1IE : 1;
unsigned SSPIE : 1;
unsigned TXIE : 1;
unsigned RCIE : 1;
unsigned ADIE : 1;
unsigned PSPIE : 1;
};
} PIE1bits @ 0x08C;



volatile unsigned char PIE2 @ 0x08D;

volatile bit CCP2IE @ ((unsigned)&PIE2*8)+0;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+3;
volatile bit EEIE @ ((unsigned)&PIE2*8)+4;
volatile bit CMIE @ ((unsigned)&PIE2*8)+6;

volatile union {
struct {
unsigned CCP2IE : 1;
unsigned : 2;
unsigned BCLIE : 1;
unsigned EEIE : 1;
unsigned : 1;
unsigned CMIE : 1;
};
} PIE2bits @ 0x08D;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit nBO @ ((unsigned)&PCON*8)+0;

volatile union {
struct {
unsigned nBOR : 1;
unsigned nPOR : 1;
};
struct {
unsigned nBO : 1;
};
} PCONbits @ 0x08E;



volatile unsigned char SSPCON2 @ 0x091;

volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;

volatile union {
struct {
unsigned SEN : 1;
unsigned RSEN : 1;
unsigned PEN : 1;
unsigned RCEN : 1;
unsigned ACKEN : 1;
unsigned ACKDT : 1;
unsigned ACKSTAT : 1;
unsigned GCEN : 1;
};
} SSPCON2bits @ 0x091;



volatile unsigned char PR2 @ 0x092;



volatile unsigned char SSPADD @ 0x093;



volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;

volatile union {
struct {
unsigned BF : 1;
unsigned UA : 1;
unsigned R_nW : 1;
unsigned S : 1;
unsigned P : 1;
unsigned D_nA : 1;
unsigned CKE : 1;
unsigned SMP : 1;
};
struct {
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
unsigned : 1;
};
struct {
unsigned : 2;
unsigned R : 1;
unsigned : 2;
unsigned D : 1;
};
struct {
unsigned : 2;
unsigned I2C_READ : 1;
unsigned I2C_START : 1;
unsigned I2C_STOP : 1;
unsigned I2C_DATA : 1;
};
struct {
unsigned : 2;
unsigned nW : 1;
unsigned : 2;
unsigned nA : 1;
};
struct {
unsigned : 2;
unsigned nWRITE : 1;
unsigned : 2;
unsigned nADDRESS : 1;
};
struct {
unsigned : 2;
unsigned R_W : 1;
unsigned : 2;
unsigned D_A : 1;
};
struct {
unsigned : 2;
unsigned READ_WRITE : 1;
unsigned : 2;
unsigned DATA_ADDRESS : 1;
};
} SSPSTATbits @ 0x094;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;

volatile union {
struct {
unsigned TX9D : 1;
unsigned TRMT : 1;
unsigned BRGH : 1;
unsigned : 1;
unsigned SYNC : 1;
unsigned TXEN : 1;
unsigned TX9 : 1;
unsigned CSRC : 1;
};
struct {
unsigned TXD8 : 1;
unsigned : 5;
unsigned nTX8 : 1;
};
struct {
unsigned : 6;
unsigned TX8_9 : 1;
};
} TXSTAbits @ 0x098;



volatile unsigned char SPBRG @ 0x099;



volatile unsigned char CMCON @ 0x09C;

volatile bit CIS @ ((unsigned)&CMCON*8)+3;
volatile bit C1INV @ ((unsigned)&CMCON*8)+4;
volatile bit C2INV @ ((unsigned)&CMCON*8)+5;
volatile bit C1OUT @ ((unsigned)&CMCON*8)+6;
volatile bit C2OUT @ ((unsigned)&CMCON*8)+7;
volatile bit CM0 @ ((unsigned)&CMCON*8)+0;
volatile bit CM1 @ ((unsigned)&CMCON*8)+1;
volatile bit CM2 @ ((unsigned)&CMCON*8)+2;

volatile union {
struct {
unsigned CM : 3;
unsigned CIS : 1;
unsigned C1INV : 1;
unsigned C2INV : 1;
unsigned C1OUT : 1;
unsigned C2OUT : 1;
};
struct {
unsigned CM0 : 1;
unsigned CM1 : 1;
unsigned CM2 : 1;
};
} CMCONbits @ 0x09C;



volatile unsigned char CVRCON @ 0x09D;

volatile bit CVRR @ ((unsigned)&CVRCON*8)+5;
volatile bit CVROE @ ((unsigned)&CVRCON*8)+6;
volatile bit CVREN @ ((unsigned)&CVRCON*8)+7;
volatile bit CVR0 @ ((unsigned)&CVRCON*8)+0;
volatile bit CVR1 @ ((unsigned)&CVRCON*8)+1;
volatile bit CVR2 @ ((unsigned)&CVRCON*8)+2;
volatile bit CVR3 @ ((unsigned)&CVRCON*8)+3;

volatile union {
struct {
unsigned CVR : 4;
unsigned : 1;
unsigned CVRR : 1;
unsigned CVROE : 1;
unsigned CVREN : 1;
};
struct {
unsigned CVR0 : 1;
unsigned CVR1 : 1;
unsigned CVR2 : 1;
unsigned CVR3 : 1;
};
} CVRCONbits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit ADCS2 @ ((unsigned)&ADCON1*8)+6;
volatile bit ADFM @ ((unsigned)&ADCON1*8)+7;
volatile bit PCFG0 @ ((unsigned)&ADCON1*8)+0;
volatile bit PCFG1 @ ((unsigned)&ADCON1*8)+1;
volatile bit PCFG2 @ ((unsigned)&ADCON1*8)+2;
volatile bit PCFG3 @ ((unsigned)&ADCON1*8)+3;

volatile union {
struct {
unsigned PCFG : 4;
unsigned : 2;
unsigned ADCS2 : 1;
unsigned ADFM : 1;
};
struct {
unsigned PCFG0 : 1;
unsigned PCFG1 : 1;
unsigned PCFG2 : 1;
unsigned PCFG3 : 1;
};
} ADCON1bits @ 0x09F;

# 1111
volatile unsigned char EEDATA @ 0x10C;



volatile unsigned char EEADR @ 0x10D;



volatile unsigned char EEDATH @ 0x10E;


volatile union {
struct {
unsigned : 6;
};
} EEDATHbits @ 0x10E;



volatile unsigned char EEADRH @ 0x10F;


volatile union {
struct {
unsigned : 5;
};
} EEADRHbits @ 0x10F;

# 1146
volatile unsigned char EECON1 @ 0x18C;

volatile bit RD @ ((unsigned)&EECON1*8)+0;
volatile bit WR @ ((unsigned)&EECON1*8)+1;
volatile bit WREN @ ((unsigned)&EECON1*8)+2;
volatile bit WRERR @ ((unsigned)&EECON1*8)+3;
volatile bit EEPGD @ ((unsigned)&EECON1*8)+7;

volatile union {
struct {
unsigned RD : 1;
unsigned WR : 1;
unsigned WREN : 1;
unsigned WRERR : 1;
unsigned : 3;
unsigned EEPGD : 1;
};
} EECON1bits @ 0x18C;



volatile unsigned char EECON2 @ 0x18D;


# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_nop)
extern void _nop(void);

# 80
extern unsigned int flash_read(unsigned short addr);

# 41 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\eeprom_routines.h"
extern unsigned char eeprom_write(unsigned char addr, unsigned char value);
extern unsigned char eeprom_read(unsigned char addr);
extern void eecpymem(volatile unsigned char *to, eeprom unsigned char *from, unsigned char size);
extern void memcpyee(eeprom unsigned char *to, const unsigned char *from, unsigned char size);


# 153 "C:\Program Files (x86)\HI-TECH Software\PICC\9.82\include\pic.h"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 41 "../AlarmDevresi.c"
unsigned char _temp_ ;
unsigned char tempor_var ;

void lcd_data(unsigned char);
void lcd_init(void);
void lcd_write(const char *s);
void lcd_clear(void);
void lcd_goto(unsigned char,unsigned char);
void lcd_command(unsigned char c);


void lcd_command(unsigned char c)
{

# 67
RC1=0;
RC2=1;

_temp_ = c&0xF0 ;
RD7 = _temp_ >> 7 ;
RD6 = _temp_ >> 6 ;
RD5 = _temp_ >> 5 ;
RD4 = _temp_ >> 4 ;



_delay((unsigned long)((2)*(16000000/4000.0)));
RC2=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
RC2=1;
_temp_ = ((c & 0x0F)<<4) ;
RD7 = _temp_ >> 7 ;
RD6 = _temp_ >> 6 ;
RD5 = _temp_ >> 5 ;
RD4 = _temp_ >> 4 ;




_delay((unsigned long)((2)*(16000000/4000.0)));
RC2=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
}

void lcd_data(unsigned char c)
{

RC1=1;
RC2=1;

_temp_ = (c & 0xF0) ;
RD7 = _temp_ >> 7 ;
RD6 = _temp_ >> 6 ;
RD5 = _temp_ >> 5 ;
RD4 = _temp_ >> 4 ;


RC2=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
RC2=1;

_temp_ = ((c & 0x0F)<<4) ;
RD7 = _temp_ >> 7 ;
RD6 = _temp_ >> 6 ;
RD5 = _temp_ >> 5 ;
RD4 = _temp_ >> 4 ;


RC2=0;
_delay((unsigned long)((1)*(16000000/4000.0)));
}
void lcd_clear(void)
{


lcd_command(0x01);
_delay((unsigned long)((2)*(16000000/4000.0)));
}

void lcd_write(const char *s)
{
_delay((unsigned long)((1)*(16000000/4000.0)));
while(*s)lcd_data(*s++);
}
void lcd_goto(unsigned char p_1,unsigned char p_2)
{

if(p_1==1)
{lcd_command(0x80+((p_2-1)%16));
}else{
lcd_command(0xC0+((p_2-1)%16));
}

}


void lcd_init()
{

TRISC1 = 0 ;
TRISC2 = 0 ;
TRISD = 0 ;
PORTD = 0 ;

RC1=0;
RC2=0;

_delay((unsigned long)((1)*(16000000/4000.0)));
RC2=1;
lcd_command(0x02);
_delay((unsigned long)((2)*(16000000/4000.0)));
lcd_command(0x28);
lcd_command(0x06);

lcd_command(0x06);

lcd_command(0x0C);

lcd_clear();

lcd_command(0x80);
}

# 199
unsigned char ttt ;

unsigned char ar = 0 ;

typedef unsigned char byte ;

# 227
char en_yakin_alarm_bulundu = 0 ;




struct Alarm {
unsigned char birinci ;
unsigned char ikinci ;
unsigned char ucuncu ;


};



unsigned char temporary ;
unsigned char seri_porttan_veri_al()
{

if( FERR == 1 ) temporary = RCREG ;
CREN = 1 ;
while( !RCIF );
return RCREG;
}
void seri_porta_veri_gonder(unsigned char jk)
{

TXREG=jk;

while( !TRMT );



}

void seri_port_string( const char * s )
{ static int index = 0 ;



while(*s != '\0' )
{
seri_porta_veri_gonder( *s );

s++;


_delay((unsigned long)((10)*(16000000/4000.0))) ;

}

}

int pow( int a , int b )
{ int c = 1;
for( int k = 1 ; k <= b ; k++ )
{
c = c * a ;
}
return c ;

}
void seri_portu_ayarla()
{TXSTA = 0 ;

RCSTA = 0 ;
temporary = RCREG ;

SPBRG=103 ;
BRGH=1;


SYNC=0;

TX9=0;

TXEN=1;

RX9=0;

CREN=1;



SPEN=1;

# 316
}

# 330
I2C_Start( )
{
SEN = 1;
while( SEN );
SSPIF = 0;

}

I2C_Stop( )
{
PEN = 1;
while( PEN );
SSPIF = 0;
}

I2C_gonder( unsigned char veri )
{
SSPBUF = veri;
while( !SSPIF );
SSPIF = 0;



}


unsigned char I2C_oku ( )
{
RCEN = 1;
while( !SSPIF );
SSPIF = 0;
return SSPBUF;




}


I2C_Master_ayarla ( )
{
SMP = 1;
CKE = 0;

# 378
SSPADD = 39;

# 384
SSPM3 = 1;
SSPM2 = 0;
SSPM1 = 0;;
SSPM0 = 0;




SSPEN = 1;



}

void Send_NACK()
{

ACKDT = 1;
ACKEN = 1;
while( ACKEN );
SSPIF = 0;


}
unsigned char veri ;

int DS1307_saniye( )
{


I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x00 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );
veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();


return veri;


}

int DS1307_dakika( )
{

I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x01 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );

veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();
return veri;



}

int DS1307_saat()
{

I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x02 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );
veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();

return veri;
}

char DS1307_ay()
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x05 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );
veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();

return veri;



}
char DS1307_gun()
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x04 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );
veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();

return veri;



}

char DS1307_yil()
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x06 );
I2C_Stop();
I2C_Start();
I2C_gonder( 0b11010001 );
veri = I2C_oku( );
veri = ( veri >> 4 ) * 10 + ( veri & 15 ) ;
Send_NACK();
I2C_Stop();

return veri;



}

void DS1307_dakika_ayarla( char value )
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x01 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();




}

void DS1307_saat_ayarla( char value )
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x02 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();




}




void DS1307_saniye_ayarla( char value )
{

I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x00 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();



}




void DS1307_gun_ayarla( char value )
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x04 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();




}
void DS1307_ay_ayarla( char value )
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x05 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();




}

void DS1307_yil_ayarla( char value )
{
I2C_Start();
I2C_gonder( 0b11010000 );
I2C_gonder( 0x06 );

value = ( ( value / 10 ) << 4 ) | ( value - ( value/10 ) * 10 ) ;
I2C_gonder( value );
I2C_Stop();




}



void segmente_sayi_yukle ( char segment_numarasi , char yuklenecek_sayi )
{
PORTB = yuklenecek_sayi | segment_numarasi << 4 ;

RC0 = 1 ;
_delay((unsigned long)((10)*(16000000/4000.0))) ;
RC0 = 0 ;

# 633
}




void eeprom_hazirla()
{

# 657
EEPGD = 0;

EEIE = 0;
}

void eeprom_yaz( unsigned char adres , unsigned char veri )
{
ttt = GIE ;
GIE = 0 ;
WREN = 1;

EEADR = adres;
EEDATA =veri;

EECON2 = 0x055;
EECON2 = 0xAA;
WR = 1;
while( WR );
EEIF= 0;
WREN = 0;

GIE = ttt ;
}

unsigned char eeprom_oku( unsigned char adres )
{
ttt = GIE ;
GIE = 0 ;
EEADR = adres;
EEDATA = 0;
RD = 1;
GIE = ttt ;
return EEDATA;



}

char saniye , dakika , saat , gun , yil , ay , sicaklik , nem ;

unsigned char buffer [ 20 ] ;
unsigned char received_data = 0 ;
unsigned char buffer_index = 0 ;

# 706
unsigned char temp_sayi ;
unsigned char dd ;
unsigned char ffa ;

void eepromu_resetle()
{
int a ;
for( a = 0 ; a <= 255 ; a++ )
eeprom_yaz( a , 0 );


}

struct Alarm time_to_struct ( char t_saat , char t_dakika , char t_gun , char t_ay , char t_yil )
{
struct Alarm _al ;
_al.birinci = ( t_saat << 3 ) | ( t_dakika >> 3 ) ;
_al.ikinci = (( t_dakika & 7 ) << 5 ) | ( t_ay << 1 ) | ( t_gun >> 4 ) ;
_al.ucuncu = ( t_gun << 4 ) | ( t_yil ) ;
return _al ;


}
char bos_alan_bul ()
{
unsigned char ind = 0 ;

for( ind = 1 ; ind < 255 ; ind = ind + 3 )
{
if( (eeprom_oku( ind + 2 )) == 0 ) return ind ;

}



return -1 ;
}

void alarm_ekle( struct Alarm yazilacak_alarm )
{
unsigned char kayit_index = bos_alan_bul ();

eeprom_yaz( kayit_index , yazilacak_alarm.birinci ) ;
eeprom_yaz( kayit_index + 1 , yazilacak_alarm.ikinci );
eeprom_yaz ( kayit_index +2 , yazilacak_alarm.ucuncu ) ;

eeprom_yaz ( 0 , eeprom_oku( 0 ) +1 ) ;


}

struct Alarm _temp__ ;
void alarm_sil ( struct Alarm silinecek_alarm ) ;

void interrupt FNC ()
{


if( RCIF )
{
received_data = RCREG ;


if( received_data == '#' )
{
seri_porta_veri_gonder( 'T' ) ;
_delay((unsigned long)((300)*(16000000/4000.0))) ;

seri_porta_veri_gonder( saat );
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( dakika ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( saniye ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;



seri_porta_veri_gonder( sicaklik ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( nem ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;



seri_porta_veri_gonder( gun ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( ay ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( yil ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;


}

else if ( received_data == '$' )
{


temp_sayi = eeprom_oku ( 0 ) ;
seri_porta_veri_gonder( temp_sayi ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;
ffa = 1 ;
for( dd = 0 ; dd < temp_sayi ; dd ++ )
{


while( eeprom_oku ( ffa +2 ) == 0 ) ffa = ffa +3 ;

seri_porta_veri_gonder( eeprom_oku ( ffa ) );
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( eeprom_oku ( ffa+1 ) );
_delay((unsigned long)((100)*(16000000/4000.0))) ;
seri_porta_veri_gonder( eeprom_oku ( ffa+2 ) );
_delay((unsigned long)((100)*(16000000/4000.0))) ;
ffa+=3;
_delay((unsigned long)((500)*(16000000/4000.0)));
}


seri_porta_veri_gonder( 'T' ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;

}

else if( received_data == 'E' )

{

buffer[ 1 ] = seri_porttan_veri_al ( );
buffer[ 2 ] = seri_porttan_veri_al();
buffer[ 3 ] = seri_porttan_veri_al ( );
buffer[ 4 ] = seri_porttan_veri_al();
buffer[ 5 ] = seri_porttan_veri_al ( );
ar = buffer[ 5 ] ;
struct Alarm tmp = time_to_struct( buffer[ 1 ] , buffer[ 2 ] , buffer[ 3 ] , buffer[ 4 ] , buffer[ 5] );
alarm_ekle( tmp ) ;
seri_porta_veri_gonder( 'T' ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;

}
else if ( received_data == 'Z' )
{

saniye = seri_porttan_veri_al ( ) ;
DS1307_saniye_ayarla ( saniye ) ;
dakika = seri_porttan_veri_al ( ) ;
DS1307_dakika_ayarla (dakika ) ;
saat = seri_porttan_veri_al ( );
DS1307_saat_ayarla ( saat ) ;
gun = seri_porttan_veri_al () ;
DS1307_gun_ayarla ( gun);
ay = seri_porttan_veri_al();
DS1307_ay_ayarla( ay ) ;
yil = seri_porttan_veri_al();
DS1307_yil_ayarla ( yil ) ;

seri_porta_veri_gonder( 'T' ) ;

# 868
}
else if ( received_data == 'R' )
{
eepromu_resetle();
seri_porta_veri_gonder( 'T' ) ;
_delay((unsigned long)((100)*(16000000/4000.0))) ;

}
else if ( received_data == '%' )
{

_temp__.birinci = seri_porttan_veri_al ( ) ;
_temp__.ikinci = seri_porttan_veri_al ( ) ;
_temp__.ucuncu = seri_porttan_veri_al ( ) ;

alarm_sil ( _temp__ ) ;

}

# 907
}

# 915
}


void alarm_sil ( struct Alarm silinecek_alarm )
{
char alarm_sayisi = eeprom_oku ( 0 );

unsigned char ind = 1 ;
while( alarm_sayisi > 0 )
{

if ( eeprom_oku ( ind ) == silinecek_alarm.birinci )
{
if( eeprom_oku ( ind +1 ) == silinecek_alarm.ikinci )
{
if( eeprom_oku( ind +2 ) == silinecek_alarm.ucuncu )
{
eeprom_yaz( ind , 0 );
eeprom_yaz( ind + 1 , 0 );
eeprom_yaz ( ind +2 , 0 );
eeprom_yaz( 0 , eeprom_oku (0) - 1 );



}



}

# 949
}

ind = ind + 3 ;
if( eeprom_oku ( ind +2 ) !=0 ) alarm_sayisi -- ;


}



}

void alarm_ver ( )
{
ADCON1 = 0x7 ;
TRISA = 0 ;
PORTA = 0 ;
for ( int k = 0 ; k < 20 ;k++ )

{
RA0 = ~RA0 ;
_delay((unsigned long)((250)*(16000000/4000.0))) ;

}


}

# 981
void alarm_kontrol_et ( struct Alarm alarm )
{


char alarm_sayisi = eeprom_oku ( 0 );

unsigned char ind = 1 ;
while( alarm_sayisi > 0 )
{

if ( eeprom_oku ( ind ) == alarm.birinci )
{
if( eeprom_oku ( ind +1 ) == alarm.ikinci )
{
if( eeprom_oku( ind +2 ) == alarm.ucuncu )
{
eeprom_yaz( ind , 0 );
eeprom_yaz( ind + 1 , 0 );
eeprom_yaz ( ind +2 , 0 );
eeprom_yaz( 0 , eeprom_oku (0) - 1 );

alarm_ver ( );



}



}

# 1016
}

ind = ind + 3 ;
if( eeprom_oku ( ind +2 ) !=0 ) alarm_sayisi -- ;


}

# 1035
}

# 1174
unsigned char data [ 5 ] = { 0 , 0 , 0 , 0 , 0 } ;


static int index = 0 ;
static int count ;
int temp ;
int saim ;
unsigned char rakam[ 5 ] ;
int fa = 0 ;
int sayi ;
char _ind ;
void start_signal()
{
for( fa = 0; fa < 5 ; fa++ )
data[ fa ] = 0 ;

# 1194
TRISC5 = 0 ;
RC5 = 0 ;
_delay((unsigned long)((25)*(16000000/4000.0))) ;
RC5 = 1 ;

_delay((unsigned long)((30)*(16000000/4000000.0))) ;
RC5 = 0 ;



TRISC5 = 1 ;
sayi = 0 ;

while( !RC5 ){ sayi ++ ; if( sayi == 200 ) {lcd_goto( 1 , 1 ); lcd_write( "ilk low response hata\n" ) ; return;} } ;
saim = sayi ;


sayi = 0 ;
while( RC5 ) { sayi ++ ; if( sayi == 200 ) { lcd_goto( 1 , 1 ); lcd_write( "ilk high response hata\n" ) ; return ;} } ;


for ( _ind = 0 ; _ind < 5 ; _ind++ )
{
for( index = 0 ; index < 8 ; index ++ )
{

count = 0 ;
while( !RC5 )
{ count ++ ;
if( count > 100 ) {
lcd_goto( 1 , 1) ;

lcd_write( "ilkbithatalow\n" );return ;
}
}
temp = count;
count = 0 ;
while( RC5 ){
count ++ ;
if( count > 100 )

{ lcd_goto( 1 , 1 ) ;
lcd_write( "ilkbithatagigh\n" );

return ; }
}
if( count > temp ) data[ _ind ] |= 1 << (7- (index ) ) ;
}
}

# 1248
}

void data_gonder( )
{
for( int f = 0 ; f < 5 ; f++ )
{
sprintf( rakam , "%d" , data[ f ] );
seri_port_string( rakam );
seri_porta_veri_gonder( '\n' ) ;
_delay((unsigned long)((10)*(16000000/4000.0))) ;

}


}


void verileri_lcdye_yaz( )
{


lcd_goto( 1 , 7 ) ;
lcd_data ( saniye / 10 + 48 ) ;

lcd_data ( saniye %10 +48 ) ;


lcd_goto( 1 , 4 ) ;
lcd_data ( dakika / 10 + 48 ) ;

lcd_data ( dakika %10 +48 ) ;



lcd_goto( 2 , 4 ) ;
lcd_data ( ay / 10 + 48 ) ;

lcd_data ( ay %10 +48 ) ;


lcd_goto( 2 , 7 ) ;
lcd_data ( yil / 10 + 48 ) ;

lcd_data ( yil %10 +48 ) ;


lcd_goto( 1 , 1 ) ;
lcd_data ( saat / 10 + 48 ) ;

lcd_data ( saat %10 +48 ) ;

lcd_goto( 1 , 3 ) ;
lcd_data( ':' );
lcd_goto ( 1 , 6 );
lcd_data ( ':' );

lcd_goto( 2 , 3 ) ;
lcd_data( '/' );
lcd_goto( 2 , 6 );
lcd_data ( '/' );


lcd_goto( 2 , 1 ) ;
lcd_data ( gun / 10 + 48 ) ;

lcd_data ( gun %10 +48 ) ;

# 1320
}


void sensor_bilgilerini_yaz ( )

{
lcd_goto ( 1 , 9 ) ;
lcd_write( "-SCKL:22" ) ;
lcd_goto ( 2 , 9 ) ;
lcd_write( "-NEM:%" ) ;
lcd_goto( 1 , 15 ) ;
lcd_data ( data[2] /10 + 48 ) ;
sicaklik = data[2] ;
lcd_data( data[2] %10 + 48 ) ;
lcd_goto( 2 , 15) ;
lcd_data( data[0 ] /10 + 48 ) ;
nem = data[ 0 ] ;
lcd_data( data[ 0 ] %10 + 48 ) ;



}



void main ()

{
lcd_init ( ) ;

_delay((unsigned long)((100)*(16000000/4000.0))) ;
lcd_write( "Saim SUNEL" ) ;

eeprom_hazirla();

# 1365
seri_portu_ayarla();

# 1373
RCIE = 1 ;
PEIE = 1 ;
GIE = 1 ;

TRISB = 0 ;
PORTB = 0 ;
TRISC0 = 0 ;
RC0 = 0 ;

TRISC3 = 1 ;
TRISC4 = 1 ;
RC3 = 0 ;
RC4 = 0 ;
I2C_Master_ayarla();

# 1391
_delay((unsigned long)((100)*(16000000/4000.0)));
saniye = DS1307_saniye();
_delay((unsigned long)((1000)*(16000000/4000.0))) ;
if ( saniye == DS1307_saniye () )
{
DS1307_saniye_ayarla( 52 );
saniye = 52 ;
DS1307_dakika_ayarla( 0 );
DS1307_saat_ayarla( 0);
DS1307_gun_ayarla( 1);
DS1307_ay_ayarla( 1 );
DS1307_yil_ayarla( 2016 );
}

dakika = DS1307_dakika ( );
saat = DS1307_saat () ;
ay = DS1307_ay();
gun = DS1307_gun();
yil = DS1307_yil();


segmente_sayi_yukle( 8 , saniye / 10 );
segmente_sayi_yukle( 9 , saniye % 10 );

# 1419
segmente_sayi_yukle( 6 , dakika / 10 );
segmente_sayi_yukle( 7 , dakika % 10 );




segmente_sayi_yukle( 12 , ay / 10 );
segmente_sayi_yukle( 13 , ay % 10 );

# 1433
segmente_sayi_yukle( 14 , yil / 10 );
segmente_sayi_yukle( 15 , yil % 10 );




segmente_sayi_yukle( 10 , gun / 10 );
segmente_sayi_yukle( 11 , gun % 10 );

# 1447
segmente_sayi_yukle( 4 , saat / 10 );
segmente_sayi_yukle( 5 , saat % 10 );

verileri_lcdye_yaz( );
struct Alarm alarm ;
start_signal () ;
sensor_bilgilerini_yaz() ;

# 1470
int sayi = 0 ;

char sensor_check = 0 ;




while( 1 )
{

saniye = DS1307_saniye();
segmente_sayi_yukle( 8 , saniye / 10 );
segmente_sayi_yukle( 9 , saniye % 10 );

verileri_lcdye_yaz();


_delay((unsigned long)((400)*(16000000/4000.0)));

if( saniye == 59 )
{

sensor_check ++ ;
if( sensor_check == 30 )
{
sensor_check = 0 ;
start_signal() ;
sensor_bilgilerini_yaz();

}
dakika = DS1307_dakika ( );
segmente_sayi_yukle( 6 , dakika / 10 );
segmente_sayi_yukle( 7 , dakika % 10 );


verileri_lcdye_yaz();

alarm = time_to_struct ( saat , dakika , gun , ay , yil-16 ) ;
alarm_kontrol_et ( alarm ) ;

# 1514
if( dakika == 0 )
{
saat = DS1307_saat () ;
segmente_sayi_yukle( 4 , saat / 10 );
segmente_sayi_yukle( 5 , saat % 10 );
verileri_lcdye_yaz();
if( saat == 0 )
{

gun = DS1307_gun();
segmente_sayi_yukle( 10 , gun / 10 );
segmente_sayi_yukle( 11 , gun % 10 );
verileri_lcdye_yaz();
if( gun == 1 )
{
ay = DS1307_ay();
segmente_sayi_yukle( 12 , ay / 10 );
segmente_sayi_yukle( 13 , ay % 10 );
verileri_lcdye_yaz();
if( ay == 1 )
{

yil = DS1307_yil();
segmente_sayi_yukle( 14 , yil / 10 );
segmente_sayi_yukle( 15 , yil % 10 );
verileri_lcdye_yaz();

}



}



}



}



}




}

# 1568
}

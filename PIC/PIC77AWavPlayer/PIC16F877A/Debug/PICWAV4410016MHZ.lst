     1: 
     2: #include <htc.h>
     3: 
     4: 
     5: __CONFIG( FOSC_HS & WDTE_OFF & PWRTE_OFF & BOREN_OFF & LVP_OFF & CPD_OFF & WRT_OFF );
     6: 
     7: #ifndef _XTAL_FREQ
     8: //Delay fonksiyonlarý için...
     9: #define _XTAL_FREQ 16000000
    10: #endif
    11: 
    12: unsigned int i , r;
    13: 
    14: 
    15: 
    16: 
    17: #define CARD_SELECT RB7  //SD kard modulündeki CS pinine baðlý
    18: #define ReadSPI() (spi_yaz(0xff)) //SD karttan gelen veri geri okumak için basit bit macro tanýmlýyoruz...
    19: #define ClockSPI()(spi_yaz(0xff)) //Bazý yerlerde SD karta clock sinyali saðlamamýz gerekiyor..Aslýnda SD den okumakla ayný þey...
    20: 
    21: unsigned long adress; //Sd karttan okumaya baþlayacaðýmýz adres 
    22: 
    23: unsigned char spi_yaz( unsigned char veri )   // SPI veri gönderme fonksiyonu ayný zamanda gelen veriyi de alýyor...
    24: {
    25: 
    26:         SSPBUF = veri;
    27:         
    28:         while( !BF );
    29:                 
    30:         return SSPBUF;
    31:         
    32:         }
    33:         
    34: 
    35: int sendSDCmd( unsigned char c , unsigned long x  , unsigned char frame ) //SD karta komut göndermek için kullandýðýmýz fonksiyon..
    36: {
    37: 
    38: CARD_SELECT = 0 ; // CS pinini sýfýra çekiyoruz ve SD kart iletiþime aktif hale geliyor...
    39: __delay_ms( 300 );
    40:         
    41:         
    42:         spi_yaz( (  c | 0x40 ) & 0xff ); //Öncelikler komut verimizi gönderiyoruz...
    43:         
    44:         
    45:         
    46:         spi_yaz(  (x >> 24 ) & 0xff ); //Ardýndan 4 byttan oluþan adres bilgisi bazý komutlar için argüman bilgisi...
    47: 
    48:      spi_yaz( ( x>>16 ) & 0xff );
    49: 
    50:         spi_yaz( ( x >> 8 ) & 0xff  );
    51: 
    52:         spi_yaz( x  & 0xff );
    53: 
    54: spi_yaz( frame ); //Son olarak CRC bilgisini gönderiyoruz.... 
    55: 
    56:         
    57:         //SD karttan gelen cevabý bekleyip geri döndürüyoruz...
    58:         i= 10;
    59:         do
    60:         {
    61:                 r = ReadSPI();
    62:                 if( r != 0xff ) break;
    63:         }
    64:         while( --i>0);
    65:         
    66:         return (r );
    67:         
    68:         
    69:         
    70:         /* return response
    71: FF - timeout, no answer
    72: 00 - command accepted
    73: 01 - command received, card in idle state (after RESET)
    74: other errors
    75: */
    76:         /*
    77:         
    78:         bit 0 = Idle state
    79: bit 1 = Erase Reset
    80: bit 2 = Illegal command
    81: bit 3 = Communication CRC error
    82: bit 4 = Erase sequence error
    83: bit 5 = Address error
    84: bit 6 = Parameter error
    85: bit 7 = Always 0
    86:         */
    87:         
    88: }
    89: 
    90: #define disableSD() CARD_SELECT=1;ClockSPI()
    91: #define enableSD() CARD_SELECT=0
    92: 
    93: 
    94: #define RESET 0//RESET komutu 0'dýr.
    95: #define INIT 1 //Initialize komutu
    96: #define READ_SINGLE 17 
    97: #define WRITE_SINGLE 24
    98: 
    99: #define DATA_ACCEPT 0x05
   100: int result;
   101: #define DATA_START 0xFE
   102: 
   103: //Bu fonksiyonuz bu projede kullanmýyoruz...
   104: int writeSector( unsigned long address , char * p )
   105: {
   106:         
   107:         int r2 , i2;
   108:         do 
   109:         {
   110:         
   111:         r2      = sendSDCmd( WRITE_SINGLE , address , 0xff );
   112:         } while (r2 != 0 );
   113:         
   114:         ;
   115:         
   116:         if( r2 == 0 )
   117:         { 
   118:                 spi_yaz( DATA_START );
   119:                 for( i2 = 0 ;i2 < 512 ; i2 ++ )
   120:                 {
   121:                                                 spi_yaz( p[i2]  ) ;
   122:                         
   123:                 }
   124:                 ClockSPI();
   125:                 ClockSPI();
   126:                 
   127:                 
   128:                 
   129:                 while( ReadSPI() != 0 );
   130:                 
   131:         }
   132: 
   133:         disableSD();
   134: 
   135:         disableSD();
   136:         ReadSPI();
   137:         ReadSPI();
   138:         return (r2);
   139:         
   140:         }
   141: char gelen[ 20 ];
   142:         
   143:         
   144:         
   145:         //Bu fonksiyonu bu projede kullanmýyoruz...
   146: int readSector( unsigned long addr , char * buf )
   147: {
   148:         int r, i;
   149: 
   150: do 
   151: {
   152: 
   153:         
   154:         r = sendSDCmd( READ_SINGLE , addr  , 0xff );
   155: } while (r != 0 ) ;
   156: 
   157: 
   158:         if( r == 0 )
   159:         {
   160:         //Usart_veri_gonder( 'T' );
   161:         
   162:                 while( ReadSPI() != DATA_START );
   163:                 
   164:                 
   165:                 for( i = 0 ; i < 512 ; i ++ )
   166:                 {
   167:                         if( i < 20 ) gelen[ i ] = ReadSPI();
   168:                         else    ReadSPI();
   169:                 }
   170:                 
   171:                 ReadSPI();
   172:                 ReadSPI();
   173:                 
   174:         }
   175:         disableSD();
   176:         ReadSPI();
   177:         ReadSPI();
   178:         return 0;
   179: }
   180: 
   181: 
   182: /*
   183: 
   184: bit 0 = Idle state
   185: bit 1 = Erase Reset
   186: bit 2 = Illegal command
   187: bit 3 = Communication CRC error
   188: bit 4 = Erase sequence error
   189: bit 5 = Address error
   190: bit 6 = Parameter error
   191: bit 7 = Always 0
   192: 
   193: 
   194: 
   195: */
   196: //Kartý yerleþtirip pice enerji verdiðimizde kartý kullanabilmek için bir takým ön iþlemler yapmamýz gerekiyor...
   197: 
   198: int initMedia()
   199: {int i , r;
   200:         adress = 0;
   201:         
   202:         //En baþta en az 80 clock sinyali göndermemiz gerekiyor... ( CS enable deðil )
   203:         CARD_SELECT = 1 ;
   204:          for( i = 0 ; i < 20 ; i++ )
   205:         ClockSPI();
   206:          
   207:           //CS pinini lowa çekiyoruz ve reset komutunu gönderiyoruz.. addres(argüman) 0 , CRC Reset komutu için mutlaka 0x95 olmalýdýr.
   208:          
   209:          CARD_SELECT = 0 ;
   210:  r = sendSDCmd( RESET , adress , 0x95 );
   211:  
   212: 
   213: if( r!= 1 )  //Eðer SD karttan uygun cevap gelmezse hata bilgisiyle geri dönüyoruz...
   214: return 0x84;
   215:         
   216: 
   217: 
   218: //CMD8  *3      R7      No      SEND_IF_COND    For only SDC V2. Check voltage range
   219: 
   220: r = sendSDCmd( 8 , 0x1AA , 0X87 );
   221: //Usart_veri_gonder( r );
   222: __delay_ms( 100 );
   223: for( int k =  0 ; k < 5 ; k++ ) {r = ReadSPI () ; }
   224: 
   225: 
   226: 
   227: __delay_ms( 100 );
   228: 
   229: //Karta kart kabul edene kadar Initialize komutu gönderiyoruz...
   230: do
   231: {
   232: sendSDCmd( 55 , 0 , 0xff ) ;  //Initialize komutu için gerekli ön komut...
   233: r = sendSDCmd( 0x69 , 0X40000000  , 0xff );
   234: 
   235: } while ( r != 0  );
   236: CARD_SELECT = 1 ;
   237: 
   238: return 0;
   239:                 
   240:         
   241: }
   242: 
   243: 
   244: 
   245: 
   246: 
   247: void spi_hazirla() 
   248: {
   249: //      0010 = SPI Master mode, clock = FOSC/64
   250: //0001 = SPI Master mode, clock = FOSC/16
   251: //0000 = SPI Master mode, clock = FOSC/4
   252: 
   253:         
   254:         SSPEN = 1; //Enable the SPI module....
   255:         CKP = 0;//Idle state for clock is a low level
   256:         CKE = 1;  //Transmit occurs on transition from active to Idle clock state 
   257:         SMP = 0 ;//Input data sampled at middle of data output time
   258: 
   259:         SSPM3 =  0 ; // 4
   260:         //16/64 mhz baþlangýçta
   261:         SSPM2 = 0 ;
   262:         SSPM1 = 1 ; 
   263:         SSPM0 = 0 ;
   264: }
   265: 
   266: char c;
   267: void InitSd()
   268:         {
   269:                 TRISB7 = 0;
   270:                 RB7 = 1;
   271:                 spi_hazirla();
   272:         }
   273: 
   274:         //Sd karttan veri okumak için sadece bu komutu kullanýyoruz...
   275: unsigned char ReadMultiSector (   long adress  )
   276:         {
   277:         do
   278:         {
   279:                  r =    sendSDCmd( 18 , adress , 0xff );  //Karta multiple read komutunu , kart kabul edene kadar gönderiyoruz...
   280:                 
   281:         }while( r != 0 );
   282:         return 0;
   283:                 
   284:         }
   285:         
   286: 
   287: void main() 
   288: {
   289:     TRISB = 0 ; //Kullanýlacak pinleri uygun bir þekilde output yada input yapýyoruz... 
   290:         PORTB = 0;
   291:         TRISC3 = 0;
   292:     TRISC5 = 0;
   293:         TRISC4 = 1 ;
   294:         
   295:         InitSd();  //SD kartýn CS pini aktif ve SPI iletiþim hazýr...
   296:         
   297:         __delay_ms( 100 );
   298: r = initMedia(); //Kartý baþlatýyoruz...
   299: 
   300:         if( r ) { //Sýfýr dýþý bir deðer gelirse kart initialize baþarýsýzdýr...
   301:         RB5 = 1 ; //Ledi yak...
   302:         
   303:                 while( 1 );
   304:         }
   305:         
   306:         TRISC2 = 0; //CCP1 pin output olarak seçildi...
   307:         //Wav stereo fakat biz sadece bir kanal kullanacaðýz( CCP1 ) . Ýstenirse ikinci CCP kullanýlarak ikinci hoparlör baðlanabilir...
   308:         //Not : Eðer müzik datasý ikisi hoparlör için farklý bu projede bunlardan sadece bir tanesi çalýnacak...
   309:         
   310: //16 MHZ için 44100 PWM frequency...
   311: PR2 = 0b01011010 ;
   312: T2CON = 0b00000100 ;
   313: CCPR1L = 0b00101101 ;
   314: CCP1CON = 0b00011100 ;
   315: TMR2ON = 0 ;
   316:         int index; 
   317: 
   318:         SSPM1 = 0 ; //SPI Speed 16 MHZ/4 e deðiþtirildi... Sd karttan okuma hýzýný 4 MHZ çýkartýyoruz...
   319:     SSPM0 = 0;
   320: ReadMultiSector (  0x00  ) ; //Kartýn en baþýndan itibaren okumaya baþlýyoruz...                
   321: TMR2IF = 0;
   322: TMR2ON = 1;  //Timer 2 aktif 
   323: #asm
   324: bcf 0x3 , 5  //Aþaðýdaki kullanýlacak registerlar için bank0'ý seçiyoruz...
   325: bcf 0x3 , 6 
   326: #endasm  //BAnk 0 selected...
   327: 
   328: while( 1 )  //Program sürekli çalýþacak....
   329:         {
   330:                 /*
   331:                 RP1:RP0 Bank
   332:         00 0
   333:         01 1
   334:         10 2
   335:         11 3
   336:                 */
   337:                 
   338:                 
   339: #asm
   340: //SSPBUF 13h
   341: //RP0 : 5 
   342: // Z : 2
   343: //SPSTAT 0x94
   344:                 //BF : 0
   345: 
   346:                 
   347:                 // while( ReadSPI != 0xFE );    //Multiple read komutunu gönderdikten ve her 512 byte okuma iþleminden sonra Sd karttan data start(0xfe) komutunu bekliyoruz    ...
   348:                 
   349:                 
   350:                 start_karekteri_bekle:
   351:                 
   352:         movlw   0xff //SSBUF = 0xff ;
   353:         movwf 0x13 ;
   354:         
   355:             bsf 0x03 , 5 // SSPSTAT için bank
   356:                 
   357:                 dongu:
   358:                 btfss 0x94 , 0 
   359:             goto dongu ;  // while ( BF == 0 ); 
   360:                 bcf 0x03 , 5 //SSPBUF için banksel
   361:                 movf 0x13 , W // W = SSPBUF and BF = 0
   362:                 
   363:                 XORLW 0xFE   
   364:                 btfss 0x03 ,  2  //if( SSPBUF == 0xFE ) 
   365:                 goto start_karekteri_bekle;
   366: 
   367: iorlw 0x1 //Z biti sýfýrlandý....
   368: 
   369: movlw 0x00  // 0 dan tekrar 0 sayacak 256 adým...For loop için...
   370: movwf 0x21
   371: for_loop :
   372: btfsc 0x3 , 2   
   373: goto for_loop_bitir;
   374: 
   375: //for( index = 0 ; index < 256 ; index ++ )
   376: //{
   377: 
   378: 
   379: 
   380: 
   381: 
   382:                 
   383:                                 
   384: TMR2_loop:     //while( TMR2IF == 0 );  // TMR2IF periodun tamamlandýðýný gösterir...
   385: btfss 0x0c, 1
   386: goto TMR2_loop 
   387:                         
   388: 
   389:  //Ýlk ReadSPI ();  //Sd karttan bir byte alýyoruz fakat bunu kullanmýyoruz bu byte ikinci hoparlör için...
   390:                         
   391:                 movlw   0xff //SSBUF = 0xff ; 
   392:         movwf 0x13 ;
   393:         
   394:         bsf 0x03 , 5 // SSPSTAT için bank
   395:                 
   396:                 dongu2:
   397:                 btfss 0x94 , 0
   398:             goto dongu2 ;  // while ( BF == 0 );        
   399:                 
   400:                 bcf 0x03 , 5 //SSPBUF için banksel
   401:                 movf 0x13 , W // W = SSPBUF and BF = 0
   402: 
   403: 
   404: 
   405: //IKINCI read SPI // ikinci byte'ý alýyoruz ve bunu CCP1 PWM registerlarýna atýyoruz...
   406: 
   407: movlw   0xff //SSBUF = 0xff ; 
   408:         movwf 0x13 ;
   409:         
   410:         bsf 0x03 , 5 // SSPSTAT için bank
   411:                 
   412:                 dongu3:
   413:                 btfss 0x94 , 0
   414:             goto dongu3 ;  // while ( BF == 0 );        
   415:                 
   416:                 bcf 0x03, 5 //SSPBUF için banksel
   417:                 movf 0x13 , W // W = SSPBUF and BF = 0
   418:                         
   419:  
   420:         
   421: 
   422: 
   423:                         
   424:         
   425:                 
   426:                 
   427:                 btfss 0x13 , 1    //CCP1X = SSPBUF >> 1 ; Okunan verinin ikinci biti CCP1X PWM bitine atanýyor... 
   428:         goto CCP1X_SIFIRLA;
   429: 
   430:         bsf 0x17, 5
   431:         goto devam_et;
   432: 
   433:         CCP1X_SIFIRLA:
   434:         bcf 0x17 , 5
   435:         devam_et:
   436: 
   437: 
   438: btfss 0x13 , 0     //CCP1Y = SSPBUF ;  Okunan verinin ilk biti CCP1Y PWM bitine atanýyor...
   439: 
   440: goto CCP1Y_SIFIRLA;
   441: 
   442: bsf 0x17 , 4
   443: 
   444: goto devam_et2;
   445: CCP1Y_SIFIRLA:
   446: bcf 0x17 , 4
   447: 
   448: devam_et2:
   449: 
   450: 
   451: 
   452: rrf 0x13 , W   //CCPR1L = SSPBUF >> 2 ;
   453: movwf 0x25
   454: rrf 0x25 , W
   455: ANDLW 0x3f
   456: movwf 0x15
   457: 
   458:                         
   459: 
   460:         
   461: 
   462: 
   463: 
   464: 
   465: 
   466: 
   467: 
   468: 
   469:                         
   470:                 //      TMR2IF = 0 ;  //TMR2 interrupt flagi sýfýrlýyoruz....
   471:         
   472: bcf 0x0c , 1
   473: 
   474: 
   475: 
   476: decf 0x21 , F
   477: 
   478: goto for_loop ;
   479: 
   480: for_loop_bitir:
   481:                                 
   482:                                         
   483: //} for loop end                        
   484:                                 
   485:                         //Her 512 byte'tan sonra iki byte'lýk CRC bilgilerini alýyoruz...
   486:                 
   487:         
   488: 
   489: 
   490:                                 //      ReadSPI();
   491:                                         
   492:                 
   493:         movlw   0xff //SSBUF = 0xff ; //CRC Ýlk ReadSPI ();
   494:         movwf 0x13 ;
   495:         
   496:         bsf 0x03 , 5 // SSPSTAT için bank
   497:                 
   498:                 dongu5:
   499:                 btfss 0x94 , 0
   500:             goto dongu5 ;  // while ( BF == 0 );        
   501:                 
   502:                 bcf 0x03 , 5 //SSPBUF için banksel
   503:                 movf 0x13 , W // W = SSPBUF and BF = 0
   504: 
   505:                                         
   506:                                         
   507:                                         //ReadSPI();
   508: 
   509: movlw   0xff //SSBUF = 0xff ; //CRC ikinci read SPI
   510:         movwf 0x13 ;
   511:         
   512:         bsf 0x03 , 5 // SSPSTAT için bank
   513:                 
   514:                 dongu6:
   515:                 btfss 0x94 , 0
   516:             goto dongu6 ;  // while ( BF == 0 );        
   517:                 
   518:                 bcf 0x03, 5 //SSPBUF için banksel
   519:                 movf 0x13 , W // W = SSPBUF and BF = 0
   520:                 #endasm
   521:                 
   522:                 }
   523:         
   524: }
   525: 
   526: 
   527: 
   528: 
   529: 
   530: 
   531: 
   532: 

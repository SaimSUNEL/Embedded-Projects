     1: 
     2: 
     3: #include <htc.h>
     4: __CONFIG( FOSC_HS & WDTE_OFF & PWRTE_OFF & BOREN_OFF & LVP_OFF & CPD_OFF & WRT_OFF );
     5: 
     6: 
     7: 
     8: #ifndef _XTAL_FREQ
     9: //Delay fonksiyonlarý için...
    10: #define _XTAL_FREQ 16000000
    11: #endif
    12: 
    13: // CCP1X : CCP1Y pwm least significant bit 
    14: 
    15: 
    16: /*
    17: ----SMP: Sample bit
    18: SPI Master mode:
    19: 1 = Input data sampled at end of data output time
    20: 0 = Input data sampled at middle of data output time
    21: SPI Slave mode:
    22: SMP must be cleared when SPI is used in Slave mode.
    23: 
    24: 
    25: 
    26: ----CKE: SPI Clock Select bit
    27: 1 = Transmit occurs on transition from active to Idle clock state
    28: 0 = Transmit occurs on transition from Idle to active clock state
    29: Note: Polarity of clock state is set by the CKP bit (SSPCON1<4>).
    30: 
    31: 
    32: 
    33: -----BF: Buffer Full Status bit (Receive mode only)
    34: 1 = Receive complete, SSPBUF is full
    35: 0 = Receive not complete, SSPBUF is empty
    36: 
    37: 
    38: 
    39: 
    40: ----WCOL: Write Collision Detect bit (Transmit mode only)
    41: 1 = The SSPBUF register is written while it is still transmitting the previous word. (Must be
    42: cleared in software.)
    43: 0 = No collision
    44: bit 6 SSPOV: Receive Overflow Indicator bit
    45: SPI Slave mode:
    46: 1 = A new byte is received while the SSPBUF register is still holding the previous data. In case
    47: of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user
    48: must read the SSPBUF, even if only transmitting data, to avoid setting overflow. (Must be
    49: cleared in software.)
    50: 0 = No overflow
    51: Note: In Master mode, the overflow bit is not set, since each new reception (and
    52: transmission) is initiated by writing to the SSPBUF register.
    53: 
    54: 
    55: ----SSPEN: Synchronous Serial Port Enable bit
    56: 1 = Enables serial port and configures SCK, SDO, SDI, and SS as serial port pins
    57: 0 = Disables serial port and configures these pins as I/O port pins
    58: Note: When enabled, these pins must be properly configured as input or output.
    59: 
    60: ----CKP: Clock Polarity Select bit
    61: 1 = Idle state for clock is a high level
    62: 0 = Idle state for clock is a low level
    63: 
    64: 
    65: ----SSPM3:SSPM0: Synchronous Serial Port Mode Select bits
    66: 0101 = SPI Slave mode, clock = SCK pin. SS pin control disabled. SS can be used as I/O pin.
    67: 0100 = SPI Slave mode, clock = SCK pin. SS pin control enabled.
    68: 0011 = SPI Master mode, clock = TMR2 output/2
    69: 0010 = SPI Master mode, clock = FOSC/64
    70: 0001 = SPI Master mode, clock = FOSC/16
    71: 0000 = SPI Master mode, clock = FOSC/4
    72: Note: Bit combinations not specifically listed here are either reserved or implemented in
    73: I2C mode only.
    74: 
    75: 
    76: 
    77: 
    78: SDO must have TRISC<5> bit cleared
    79: • SCK (Master mode) must have TRISC<3> bit
    80: cleared
    81: • SCK (Slave mode) must have TRISC<3> bit set
    82: • SS must have TRISC<4> bit set
    83: 
    84: */
    85: 
    86: unsigned int i , r;
    87: unsigned int i2 , r2;
    88: 
    89: 
    90: 
    91: #define CARD_SELECT RB7  //SD kard modulündeki CS pinine baðlý
    92: #define ReadSPI() (spi_yaz(0xff)) //SD karttan gelen veri geri okumak için basit bit macro tanýmlýyoruz...
    93: #define ClockSPI()(spi_yaz(0xff)) //Bazý yerlerde SD karta clock sinyali saðlamamýz gerekiyor..Aslýnda SD den okumakla ayný þey...
    94: 
    95: unsigned long adress; //Sd karttan okumaya baþlayacaðýmýz adres 
    96: 
    97: unsigned char spi_yaz( unsigned char veri )   // SPI veri gönderme fonksiyonu ayný zamanda gelen veriyi de alýyor...
    98: {
    99: 
   100:         SSPBUF = veri;
   101:         
   102:         while( !BF );
   103:                 
   104:         return SSPBUF;
   105:         
   106:         }
   107:         
   108: unsigned char temp  ;
   109: int sendSDCmd( unsigned char c , unsigned long x  , unsigned char frame ) //SD karta komut göndermek için kullandýðýmýz fonksiyon..
   110: {
   111: 
   112: CARD_SELECT = 0 ; // CS pinini sýfýra çekiyoruz ve SD kart iletiþime aktif hale geliyor...
   113: __delay_ms( 300 );
   114:         
   115:         
   116:         spi_yaz( (  c | 0x40 ) & 0xff ); //Öncelikler komut verimizi gönderiyoruz...
   117:         
   118:         
   119:         
   120:         spi_yaz(  (x >> 24 ) & 0xff ); //Ardýndan 4 byttan oluþan adres bilgisi bazý komutlar için argüman bilgisi...
   121: 
   122:      spi_yaz( ( x>>16 ) & 0xff );
   123: 
   124:         spi_yaz( ( x >> 8 ) & 0xff  );
   125: 
   126:         spi_yaz( x  & 0xff );
   127: 
   128: spi_yaz( frame ); //Son olarak CRC bilgisini gönderiyoruz.... 
   129: 
   130:         
   131:         //SD karttan gelen cevabý bekleyip geri döndürüyoruz...
   132:         i= 10;
   133:         do
   134:         {
   135:                 r = ReadSPI();
   136:                 if( r != 0xff ) break;
   137:         }
   138:         while( --i>0);
   139:         
   140:         return (r );
   141:         
   142:         
   143:         
   144:         /* return response
   145: FF - timeout, no answer
   146: 00 - command accepted
   147: 01 - command received, card in idle state (after RESET)
   148: other errors
   149: */
   150:         /*
   151:         
   152:         bit 0 = Idle state
   153: bit 1 = Erase Reset
   154: bit 2 = Illegal command
   155: bit 3 = Communication CRC error
   156: bit 4 = Erase sequence error
   157: bit 5 = Address error
   158: bit 6 = Parameter error
   159: bit 7 = Always 0
   160:         */
   161:         
   162: }
   163: 
   164: #define disableSD() CARD_SELECT=1;ClockSPI()
   165: #define enableSD() CARD_SELECT=0
   166: 
   167: 
   168: #define RESET 0//RESET komutu 0'dýr.
   169: #define INIT 1 //Initialize komutu
   170: #define READ_SINGLE 17 
   171: #define WRITE_SINGLE 24
   172: 
   173: #define DATA_ACCEPT 0x05
   174: int result;
   175: #define DATA_START 0xFE
   176: 
   177: //Bu fonksiyonuz bu projede kullanmýyoruz...
   178: int writeSector( unsigned long address , char * p )
   179: {
   180:         
   181:         int r2 , i2;
   182:         do 
   183:         {
   184:         
   185:         r2      = sendSDCmd( WRITE_SINGLE , address , 0xff );
   186:         } while (r2 != 0 );
   187:         
   188:         ;
   189:         
   190:         if( r2 == 0 )
   191:         { 
   192:                 spi_yaz( DATA_START );
   193:                 for( i2 = 0 ;i2 < 512 ; i2 ++ )
   194:                 {
   195:                                                 spi_yaz( p[i2]  ) ;
   196:                         
   197:                 }
   198:                 ClockSPI();
   199:                 ClockSPI();
   200:                 
   201:                 
   202:                 
   203:                 while( ReadSPI() != 0 );
   204:                 
   205:         }
   206: 
   207:         disableSD();
   208: 
   209:         disableSD();
   210:         ReadSPI();
   211:         ReadSPI();
   212:         return (r2);
   213:         
   214:         }
   215: char gelen[ 20 ];
   216:         
   217:         
   218:         
   219:         //Bu fonksiyonu bu projede kullanmýyoruz...
   220: int readSector( unsigned long addr , char * buf )
   221: {
   222:         int r, i;
   223: 
   224: do 
   225: {
   226: 
   227:         
   228:         r = sendSDCmd( READ_SINGLE , addr  , 0xff );
   229: } while (r != 0 ) ;
   230: 
   231: 
   232:         if( r == 0 )
   233:         {
   234:         //Usart_veri_gonder( 'T' );
   235:         
   236:                 while( ReadSPI() != DATA_START );
   237:                 
   238:                 
   239:                 for( i = 0 ; i < 512 ; i ++ )
   240:                 {
   241:                         if( i < 20 ) gelen[ i ] = ReadSPI();
   242:                         else    ReadSPI();
   243:                 }
   244:                 
   245:                 ReadSPI();
   246:                 ReadSPI();
   247:                 
   248:         }
   249:         disableSD();
   250:         ReadSPI();
   251:         ReadSPI();
   252:         return 0;
   253: }
   254: 
   255: 
   256: /*
   257: 
   258: bit 0 = Idle state
   259: bit 1 = Erase Reset
   260: bit 2 = Illegal command
   261: bit 3 = Communication CRC error
   262: bit 4 = Erase sequence error
   263: bit 5 = Address error
   264: bit 6 = Parameter error
   265: bit 7 = Always 0
   266: 
   267: 
   268: 
   269: */
   270: //Kartý yerleþtirip pice enerji verdiðimizde kartý kullanabilmek için bir takým ön iþlemler yapmamýz gerekiyor...
   271: 
   272: int initMedia()
   273: {int i , r;
   274:         adress = 0;
   275:         
   276:         //En baþta en az 80 clock sinyali göndermemiz gerekiyor... ( CS enable deðil )
   277:         CARD_SELECT = 1 ;
   278:          for( i = 0 ; i < 20 ; i++ )
   279:         ClockSPI();
   280:          
   281:           //CS pinini lowa çekiyoruz ve reset komutunu gönderiyoruz.. addres(argüman) 0 , CRC Reset komutu için mutlaka 0x95 olmalýdýr.
   282:          
   283:          CARD_SELECT = 0 ;
   284:  r = sendSDCmd( RESET , adress , 0x95 );
   285:  
   286: 
   287: //       CARD_SELECT = 1;
   288: 
   289: if( r!= 1 )  //Eðer SD karttan uygun cevap gelmezse hata bilgisiyle geri dönüyoruz...
   290: return 0x84;
   291:         
   292: 
   293: 
   294: //Cevap uygunsa 
   295: 
   296: r = sendSDCmd( 8 , 0x1AA , 0X87 );
   297: //Usart_veri_gonder( r );
   298: __delay_ms( 100 );
   299: for( int k =  0 ; k < 5 ; k++ ) {r = ReadSPI () ; }
   300: 
   301: 
   302: 
   303: __delay_ms( 100 );
   304: 
   305: do
   306: {
   307:         sendSDCmd( 55 , 0 , 0xff ) ;
   308:         r = sendSDCmd( 0x69 , 0X40000000  , 0xff );
   309: 
   310: } while ( r != 0  );
   311: 
   312: 
   313: 
   314: 
   315: /*
   316: 
   317: do 
   318: {
   319:         r = sendSDCmd( 1,  0 , 0xff );
   320:         CARD_SELECT_ON ;
   321:         Usart_veri_gonder( r );
   322:         _delay_ms( 100 );
   323:         
   324: } while ( r != 0);
   325: 
   326: */
   327: //Usart_veri_gonder( 'j' );
   328: CARD_SELECT = 1 ;
   329: 
   330: /*do
   331:         {
   332:         r = sendSDCmd( INIT , adress );
   333:                 CARD_SELECT = 1;
   334:                 if( r ) break;
   335:                 
   336:                 }
   337:         while( --i > 0 );
   338:         if ( (i == 0)  || (r != 1)  )
   339:         return 0x85; //timed out;
   340:         
   341:         */
   342:         return 0;
   343:                 
   344:         
   345: }
   346: 
   347: 
   348: 
   349: 
   350: 
   351: void spi_hazirla() 
   352: {
   353: //      0010 = SPI Master mode, clock = FOSC/64
   354: //0001 = SPI Master mode, clock = FOSC/16
   355: //0000 = SPI Master mode, clock = FOSC/4
   356:         
   357:         
   358:         
   359:         SSPEN = 1; //Enable the SPI module....
   360:         CKP = 0;//Idle state for clock is a low level
   361:         CKE = 1;
   362: 
   363:         SSPM3 =  0 ; // 4
   364:         //16/64 mhz baþlangýçta
   365:         SSPM2 = 0 ;
   366:         SSPM1 = 1 ; 
   367:         SSPM0 = 0 ;
   368:         
   369:         
   370:         /*
   371:         FOR 8 MHZ...
   372:         
   373:         //16/64 prescaler of SPI for 16MHZ
   374:         SSPM3 = 0 ; 
   375:         SSPM2 = 0 ;
   376:         SSPM1 = 1;
   377:         SSPM0 = 0 ; 
   378:         
   379: 
   380: */
   381:         /*
   382: 
   383:         //For 16MHZ
   384:         SSPM3 = 0;
   385:         SSPM2 = 0;
   386:     SSPM1 = 1;
   387:     SSPM0 = 0;  
   388: */      
   389:         //For 4MHZ
   390:         
   391:         //0000 = SPI Master mode, clock = FOSC/1        
   392: 
   393:         
   394:         
   395:         
   396: }
   397: 
   398: char c;
   399: void InitSd()
   400:         {
   401:                 TRISB7 = 0;
   402:                 RB7 = 1;
   403:                 spi_hazirla();
   404:         }
   405: 
   406:         
   407: unsigned char ReadMultiSector (   long adress )
   408:         {
   409:         do
   410:         {
   411:                  r =    sendSDCmd( 18 , adress , 0xff );
   412:                 
   413:         }while( r != 0 );
   414:                 if( r!= 0 ) return -1;
   415:                         
   416:                 return 0;
   417:                 
   418:         }
   419:         
   420: volatile        int read_data = 0;
   421: //176 max Duty register...CCP1L:CCP1X:CCP1Y
   422:         
   423:         
   424:         
   425:         volatile unsigned char buffer [ 64 ] ;
   426:         volatile unsigned char load_index  , read_index ;
   427:         unsigned char  available_data_size = 0 ;
   428:         unsigned music_data ;
   429:         
   430:         unsigned char w_temp  @ 0x7b ;
   431: unsigned char status_temp @ 0x7c        ;       
   432: 
   433: 
   434:         
   435:         void interrupt INTERRUPT_FONKSYONU ( )
   436: {
   437: GIE = 0 ;       
   438: music_data = buffer[ read_index ++ ] ; 
   439: 
   440:          
   441:                 CCP1X = ( music_data >> 1 ) ;
   442:                 CCP1Y = music_data   ;
   443:         CCPR1L = ( music_data >> 2 )  ; 
   444:         TMR2IF = 0 ;
   445: if( read_index == 64 ) read_index = 0 ;
   446:                 
   447: 
   448:         
   449:         GIE = 1 ;
   450: }       
   451:         
   452:         
   453: 
   454:         
   455: void main() 
   456: {
   457: TRISB = 0 ; 
   458:         PORTB = 0;
   459:         TRISC3 = 0;
   460:   TRISC5 = 0;
   461:         TRISC4 = 1 ;
   462:         
   463:         InitSd();
   464:         
   465:         __delay_ms( 100 );
   466: r = initMedia();
   467: 
   468:         if( r ) {
   469:         RB5 = 1 ;
   470:         
   471:                 while( 1 );
   472:         }
   473: else
   474:         {
   475:         
   476:         
   477: }
   478: 
   479: 
   480: 
   481:         TRISC2 = 0; //CCP1 pin output olarak seçildi...
   482:         //ilk önce sadece bir kanal için yapacaðýz CCP1 i kullanýyoruz...
   483:         
   484: /*      
   485: TMR1CS: Timer1 Clock Source Select bit
   486: 1 = External clock from pin RC0/T1OSO/T1CKI (on the rising edge)
   487: 0 = Internal clock (FOSC/4)
   488:         */
   489:         
   490:         /*
   491:         TMR1ON: Timer1 On bit
   492: 1 = Enables Timer1
   493: 0 = Stops Timer1
   494: */
   495: 
   496: CCPR1L = 88 >> 2 ;
   497:         CCP1X = ( 88 >> 3 ) & 0x1 ;
   498: CCP1Y = 0 ;
   499:                 //TMR2ON = 1  ;
   500:         int k  = 0; 
   501: 
   502: 
   503: //16 MHZ için 22050 PWM frequency...
   504: PR2 = 0b10110100 ;
   505: T2CON = 0b00000100 ;
   506: CCPR1L = 0b01011010 ;
   507: CCP1CON = 0b00011100 ;
   508: TMR2ON = 0;
   509:         unsigned char rr ;
   510:         int index; 
   511:         unsigned char data ;
   512: 
   513: SSPM1 = 0 ; //SPI Speed 16 MHZ/4 e deðiþtirildi...
   514: SSPM0 = 0;
   515:         
   516:         ReadMultiSector (  0x00  ) ;            
   517: 
   518: 
   519: read_index = 32 ;
   520: TMR2IE =1 ; 
   521: PEIE = 1;
   522: GIE = 1 ; 
   523: 
   524: 
   525: TMR2IF = 0;
   526:         TMR2ON = 1;
   527: 
   528: 
   529: volatile char total_read = 0 ;
   530: 
   531: while( 1 )
   532:         {
   533: 
   534:         
   535:         //Accept bekleniyor...
   536:                 do
   537:                 {
   538:                 SSPBUF = 0xff ;
   539:                  while( !BF );
   540:                          
   541:          }
   542:         while( SSPBUF != 0xFE );        
   543:         total_read =  0 ;
   544:         
   545:         
   546:                 while( total_read < 4 )
   547:                 {
   548:                         
   549:                         index = 0 ;
   550:                                 while( index < 32 )
   551:                         {
   552:                         
   553:                         SSPBUF = 0xff ;
   554:                         while( !BF );
   555:                                 temp = SSPBUF ;
   556:                         
   557:                         SSPBUF = 0xff ;
   558:                         
   559:                         while( !BF );
   560:                 buffer[ index++ ] = SSPBUF ;    
   561:                         
   562:                 }//while index < 32
   563:                                         
   564: 
   565: 
   566: while( read_index > 32 );
   567:                         
   568: index = 32 ; 
   569:                                 while( index < 64 )
   570:                         {
   571:                         
   572:                         SSPBUF = 0xff ;
   573:                         while( !BF );
   574:                                 temp = SSPBUF ;
   575:                         
   576:                         SSPBUF = 0xff ;
   577:                         
   578:                         while( !BF );
   579:                 buffer[ index++ ] = SSPBUF ;
   580: 
   581:                         
   582:                         
   583:                         
   584:                         } //while( index < 64 )
   585:                         
   586: 
   587: while( read_index <= 32 );
   588: 
   589:         
   590:                 
   591: 
   592: 
   593: total_read ++ ;
   594: 
   595: 
   596: }
   597:         
   598:                         
   599:         
   600:         
   601:                 
   602:                 
   603: 
   604:                         
   605:                         
   606:                 
   607:         
   608:                                         
   609:                                         
   610:                                         
   611:                                         
   612:                                         
   613:                                         
   614:                                         //CRC kýsmý
   615:                 
   616:         SSPBUF = 0xff ;
   617:                                         while( !BF );
   618:                 
   619:         temp = SSPBUF ;
   620:                         SSPBUF = 0xff ;
   621:                                         while( !BF );
   622:                 
   623:         temp = SSPBUF ;         
   624:                 
   625:                                 
   626:                                 
   627:         
   628:                 }
   629:         
   630: }
   631: 
   632: 
   633: 
   634: 
   635: 
   636: 
   637: 

     1: 
     2: 
     3: 
     4: #include <htc.h>
     5: __CONFIG( FOSC_HS & WDTE_OFF & PWRTE_OFF & BOREN_OFF & LVP_OFF & CPD_OFF & WRT_OFF );
     6: 
     7: 
     8: 
     9: #ifndef _XTAL_FREQ
    10: //Delay fonksiyonlarý için...
    11: #define _XTAL_FREQ 16000000
    12: #endif
    13: 
    14: // CCP1X : CCP1Y pwm least significant bit 
    15: 
    16: 
    17: /*
    18: ----SMP: Sample bit
    19: SPI Master mode:
    20: 1 = Input data sampled at end of data output time
    21: 0 = Input data sampled at middle of data output time
    22: SPI Slave mode:
    23: SMP must be cleared when SPI is used in Slave mode.
    24: 
    25: 
    26: 
    27: ----CKE: SPI Clock Select bit
    28: 1 = Transmit occurs on transition from active to Idle clock state
    29: 0 = Transmit occurs on transition from Idle to active clock state
    30: Note: Polarity of clock state is set by the CKP bit (SSPCON1<4>).
    31: 
    32: 
    33: 
    34: -----BF: Buffer Full Status bit (Receive mode only)
    35: 1 = Receive complete, SSPBUF is full
    36: 0 = Receive not complete, SSPBUF is empty
    37: 
    38: 
    39: 
    40: 
    41: ----WCOL: Write Collision Detect bit (Transmit mode only)
    42: 1 = The SSPBUF register is written while it is still transmitting the previous word. (Must be
    43: cleared in software.)
    44: 0 = No collision
    45: bit 6 SSPOV: Receive Overflow Indicator bit
    46: SPI Slave mode:
    47: 1 = A new byte is received while the SSPBUF register is still holding the previous data. In case
    48: of overflow, the data in SSPSR is lost. Overflow can only occur in Slave mode. The user
    49: must read the SSPBUF, even if only transmitting data, to avoid setting overflow. (Must be
    50: cleared in software.)
    51: 0 = No overflow
    52: Note: In Master mode, the overflow bit is not set, since each new reception (and
    53: transmission) is initiated by writing to the SSPBUF register.
    54: 
    55: 
    56: ----SSPEN: Synchronous Serial Port Enable bit
    57: 1 = Enables serial port and configures SCK, SDO, SDI, and SS as serial port pins
    58: 0 = Disables serial port and configures these pins as I/O port pins
    59: Note: When enabled, these pins must be properly configured as input or output.
    60: 
    61: ----CKP: Clock Polarity Select bit
    62: 1 = Idle state for clock is a high level
    63: 0 = Idle state for clock is a low level
    64: 
    65: 
    66: ----SSPM3:SSPM0: Synchronous Serial Port Mode Select bits
    67: 0101 = SPI Slave mode, clock = SCK pin. SS pin control disabled. SS can be used as I/O pin.
    68: 0100 = SPI Slave mode, clock = SCK pin. SS pin control enabled.
    69: 0011 = SPI Master mode, clock = TMR2 output/2
    70: 0010 = SPI Master mode, clock = FOSC/64
    71: 0001 = SPI Master mode, clock = FOSC/16
    72: 0000 = SPI Master mode, clock = FOSC/4
    73: Note: Bit combinations not specifically listed here are either reserved or implemented in
    74: I2C mode only.
    75: 
    76: 
    77: 
    78: 
    79: SDO must have TRISC<5> bit cleared
    80: • SCK (Master mode) must have TRISC<3> bit
    81: cleared
    82: • SCK (Slave mode) must have TRISC<3> bit set
    83: • SS must have TRISC<4> bit set
    84: 
    85: */
    86: 
    87: unsigned int i , r;
    88: unsigned int i2 , r2;
    89: 
    90: 
    91: 
    92: #define CARD_SELECT RB7  //SD kard modulündeki CS pinine baðlý
    93: #define ReadSPI() (spi_yaz(0xff)) //SD karttan gelen veri geri okumak için basit bit macro tanýmlýyoruz...
    94: #define ClockSPI()(spi_yaz(0xff)) //Bazý yerlerde SD karta clock sinyali saðlamamýz gerekiyor..Aslýnda SD den okumakla ayný þey...
    95: 
    96: unsigned long adress; //Sd karttan okumaya baþlayacaðýmýz adres 
    97: 
    98: unsigned char spi_yaz( unsigned char veri )   // SPI veri gönderme fonksiyonu ayný zamanda gelen veriyi de alýyor...
    99: {
   100: 
   101:         SSPBUF = veri;
   102:         
   103:         while( !BF );
   104:                 
   105:         return SSPBUF;
   106:         
   107:         }
   108:         
   109: unsigned char temp  ;
   110: int sendSDCmd( unsigned char c , unsigned long x  , unsigned char frame ) //SD karta komut göndermek için kullandýðýmýz fonksiyon..
   111: {
   112: 
   113: CARD_SELECT = 0 ; // CS pinini sýfýra çekiyoruz ve SD kart iletiþime aktif hale geliyor...
   114: __delay_ms( 300 );
   115:         
   116:         
   117:         spi_yaz( (  c | 0x40 ) & 0xff ); //Öncelikler komut verimizi gönderiyoruz...
   118:         
   119:         
   120:         
   121:         spi_yaz(  (x >> 24 ) & 0xff ); //Ardýndan 4 byttan oluþan adres bilgisi bazý komutlar için argüman bilgisi...
   122: 
   123:      spi_yaz( ( x>>16 ) & 0xff );
   124: 
   125:         spi_yaz( ( x >> 8 ) & 0xff  );
   126: 
   127:         spi_yaz( x  & 0xff );
   128: 
   129: spi_yaz( frame ); //Son olarak CRC bilgisini gönderiyoruz.... 
   130: 
   131:         
   132:         //SD karttan gelen cevabý bekleyip geri döndürüyoruz...
   133:         i= 10;
   134:         do
   135:         {
   136:                 r = ReadSPI();
   137:                 if( r != 0xff ) break;
   138:         }
   139:         while( --i>0);
   140:         
   141:         return (r );
   142:         
   143:         
   144:         
   145:         /* return response
   146: FF - timeout, no answer
   147: 00 - command accepted
   148: 01 - command received, card in idle state (after RESET)
   149: other errors
   150: */
   151:         /*
   152:         
   153:         bit 0 = Idle state
   154: bit 1 = Erase Reset
   155: bit 2 = Illegal command
   156: bit 3 = Communication CRC error
   157: bit 4 = Erase sequence error
   158: bit 5 = Address error
   159: bit 6 = Parameter error
   160: bit 7 = Always 0
   161:         */
   162:         
   163: }
   164: 
   165: #define disableSD() CARD_SELECT=1;ClockSPI()
   166: #define enableSD() CARD_SELECT=0
   167: 
   168: 
   169: #define RESET 0//RESET komutu 0'dýr.
   170: #define INIT 1 //Initialize komutu
   171: #define READ_SINGLE 17 
   172: #define WRITE_SINGLE 24
   173: 
   174: #define DATA_ACCEPT 0x05
   175: int result;
   176: #define DATA_START 0xFE
   177: 
   178: //Bu fonksiyonuz bu projede kullanmýyoruz...
   179: int writeSector( unsigned long address , char * p )
   180: {
   181:         
   182:         int r2 , i2;
   183:         do 
   184:         {
   185:         
   186:         r2      = sendSDCmd( WRITE_SINGLE , address , 0xff );
   187:         } while (r2 != 0 );
   188:         
   189:         ;
   190:         
   191:         if( r2 == 0 )
   192:         { 
   193:                 spi_yaz( DATA_START );
   194:                 for( i2 = 0 ;i2 < 512 ; i2 ++ )
   195:                 {
   196:                                                 spi_yaz( p[i2]  ) ;
   197:                         
   198:                 }
   199:                 ClockSPI();
   200:                 ClockSPI();
   201:                 
   202:                 
   203:                 
   204:                 while( ReadSPI() != 0 );
   205:                 
   206:         }
   207: 
   208:         disableSD();
   209: 
   210:         disableSD();
   211:         ReadSPI();
   212:         ReadSPI();
   213:         return (r2);
   214:         
   215:         }
   216: char gelen[ 20 ];
   217:         
   218:         
   219:         
   220:         //Bu fonksiyonu bu projede kullanmýyoruz...
   221: int readSector( unsigned long addr , char * buf )
   222: {
   223:         int r, i;
   224: 
   225: do 
   226: {
   227: 
   228:         
   229:         r = sendSDCmd( READ_SINGLE , addr  , 0xff );
   230: } while (r != 0 ) ;
   231: 
   232: 
   233:         if( r == 0 )
   234:         {
   235:         //Usart_veri_gonder( 'T' );
   236:         
   237:                 while( ReadSPI() != DATA_START );
   238:                 
   239:                 
   240:                 for( i = 0 ; i < 512 ; i ++ )
   241:                 {
   242:                         if( i < 20 ) gelen[ i ] = ReadSPI();
   243:                         else    ReadSPI();
   244:                 }
   245:                 
   246:                 ReadSPI();
   247:                 ReadSPI();
   248:                 
   249:         }
   250:         disableSD();
   251:         ReadSPI();
   252:         ReadSPI();
   253:         return 0;
   254: }
   255: 
   256: 
   257: /*
   258: 
   259: bit 0 = Idle state
   260: bit 1 = Erase Reset
   261: bit 2 = Illegal command
   262: bit 3 = Communication CRC error
   263: bit 4 = Erase sequence error
   264: bit 5 = Address error
   265: bit 6 = Parameter error
   266: bit 7 = Always 0
   267: 
   268: 
   269: 
   270: */
   271: //Kartý yerleþtirip pice enerji verdiðimizde kartý kullanabilmek için bir takým ön iþlemler yapmamýz gerekiyor...
   272: 
   273: int initMedia()
   274: {int i , r;
   275:         adress = 0;
   276:         
   277:         //En baþta en az 80 clock sinyali göndermemiz gerekiyor... ( CS enable deðil )
   278:         CARD_SELECT = 1 ;
   279:          for( i = 0 ; i < 20 ; i++ )
   280:         ClockSPI();
   281:          
   282:           //CS pinini lowa çekiyoruz ve reset komutunu gönderiyoruz.. addres(argüman) 0 , CRC Reset komutu için mutlaka 0x95 olmalýdýr.
   283:          
   284:          CARD_SELECT = 0 ;
   285:  r = sendSDCmd( RESET , adress , 0x95 );
   286:  
   287: 
   288: //       CARD_SELECT = 1;
   289: 
   290: if( r!= 1 )  //Eðer SD karttan uygun cevap gelmezse hata bilgisiyle geri dönüyoruz...
   291: return 0x84;
   292:         
   293: 
   294: 
   295: //Cevap uygunsa 
   296: 
   297: r = sendSDCmd( 8 , 0x1AA , 0X87 );
   298: //Usart_veri_gonder( r );
   299: __delay_ms( 100 );
   300: for( int k =  0 ; k < 5 ; k++ ) {r = ReadSPI () ; }
   301: 
   302: 
   303: 
   304: __delay_ms( 100 );
   305: 
   306: do
   307: {
   308:         sendSDCmd( 55 , 0 , 0xff ) ;
   309:         r = sendSDCmd( 0x69 , 0X40000000  , 0xff );
   310: 
   311: } while ( r != 0  );
   312: 
   313: 
   314: 
   315: 
   316: /*
   317: 
   318: do 
   319: {
   320:         r = sendSDCmd( 1,  0 , 0xff );
   321:         CARD_SELECT_ON ;
   322:         Usart_veri_gonder( r );
   323:         _delay_ms( 100 );
   324:         
   325: } while ( r != 0);
   326: 
   327: */
   328: //Usart_veri_gonder( 'j' );
   329: CARD_SELECT = 1 ;
   330: 
   331: /*do
   332:         {
   333:         r = sendSDCmd( INIT , adress );
   334:                 CARD_SELECT = 1;
   335:                 if( r ) break;
   336:                 
   337:                 }
   338:         while( --i > 0 );
   339:         if ( (i == 0)  || (r != 1)  )
   340:         return 0x85; //timed out;
   341:         
   342:         */
   343:         return 0;
   344:                 
   345:         
   346: }
   347: 
   348: 
   349: 
   350: 
   351: 
   352: void spi_hazirla() 
   353: {
   354: //      0010 = SPI Master mode, clock = FOSC/64
   355: //0001 = SPI Master mode, clock = FOSC/16
   356: //0000 = SPI Master mode, clock = FOSC/4
   357:         
   358:         
   359:         
   360:         SSPEN = 1; //Enable the SPI module....
   361:         CKP = 0;//Idle state for clock is a low level
   362:         CKE = 1;
   363: 
   364:         SSPM3 =  0 ; // 4
   365:         //16/64 mhz baþlangýçta
   366:         SSPM2 = 0 ;
   367:         SSPM1 = 1 ; 
   368:         SSPM0 = 0 ;
   369:         
   370:         
   371:         /*
   372:         FOR 8 MHZ...
   373:         
   374:         //16/64 prescaler of SPI for 16MHZ
   375:         SSPM3 = 0 ; 
   376:         SSPM2 = 0 ;
   377:         SSPM1 = 1;
   378:         SSPM0 = 0 ; 
   379:         
   380: 
   381: */
   382:         /*
   383: 
   384:         //For 16MHZ
   385:         SSPM3 = 0;
   386:         SSPM2 = 0;
   387:     SSPM1 = 1;
   388:     SSPM0 = 0;  
   389: */      
   390:         //For 4MHZ
   391:         
   392:         //0000 = SPI Master mode, clock = FOSC/1        
   393: 
   394:         
   395:         
   396:         
   397: }
   398: 
   399: char c;
   400: void InitSd()
   401:         {
   402:                 TRISB7 = 0;
   403:                 RB7 = 1;
   404:                 spi_hazirla();
   405:         }
   406: 
   407:         
   408: unsigned char ReadMultiSector (   long adress )
   409:         {
   410:         do
   411:         {
   412:                  r =    sendSDCmd( 18 , adress , 0xff );
   413:                 
   414:         }while( r != 0 );
   415:                 if( r!= 0 ) return -1;
   416:                         
   417:                 return 0;
   418:                 
   419:         }
   420:         
   421: volatile        int read_data = 0;
   422: //176 max Duty register...CCP1L:CCP1X:CCP1Y
   423:         
   424:         
   425:         
   426:         volatile unsigned char buffer [ 64 ] ;
   427:         volatile unsigned char load_index  , read_index ;
   428:         unsigned char  available_data_size = 0 ;
   429:         unsigned music_data ;
   430:         
   431:         unsigned char w_temp ;
   432:         
   433: 
   434: 
   435:         
   436:         void interrupt INTERRUPT_FONKSYONU ( )
   437: {
   438: GIE = 0 ;
   439: 
   440:         
   441: music_data = buffer[ read_index ++ ] ; 
   442: 
   443:          
   444:                 CCP1X = ( music_data >> 1 ) ;
   445:                 CCP1Y = music_data   ;
   446:         CCPR1L = ( music_data >> 2 )  ; 
   447:         TMR2IF = 0 ;
   448: if( read_index == 64 ) read_index = 0 ;
   449:                 
   450: 
   451: GIE = 1 ;
   452: 
   453: }       
   454:         
   455: 
   456:         
   457: void main() 
   458: {
   459: TRISB = 0 ; 
   460:         PORTB = 0;
   461:         TRISC3 = 0;
   462:   TRISC5 = 0;
   463:         TRISC4 = 1 ;
   464:         
   465:         InitSd();
   466:         
   467:         __delay_ms( 100 );
   468: r = initMedia();
   469: 
   470:         if( r ) {
   471:         RB5 = 1 ;
   472:         
   473:                 while( 1 );
   474:         }
   475: else
   476:         {
   477:         
   478:         
   479: }
   480: 
   481: 
   482: 
   483:         TRISC2 = 0; //CCP1 pin output olarak seçildi...
   484:         //ilk önce sadece bir kanal için yapacaðýz CCP1 i kullanýyoruz...
   485:         
   486: /*      
   487: TMR1CS: Timer1 Clock Source Select bit
   488: 1 = External clock from pin RC0/T1OSO/T1CKI (on the rising edge)
   489: 0 = Internal clock (FOSC/4)
   490:         */
   491:         
   492:         /*
   493:         TMR1ON: Timer1 On bit
   494: 1 = Enables Timer1
   495: 0 = Stops Timer1
   496: */
   497: 
   498: CCPR1L = 88 >> 2 ;
   499:         CCP1X = ( 88 >> 3 ) & 0x1 ;
   500: CCP1Y = 0 ;
   501:                 //TMR2ON = 1  ;
   502:         int k  = 0; 
   503: 
   504: 
   505: //16 MHZ için 44100 PWM frequency...
   506: PR2 = 0b01011010 ;
   507: T2CON = 0b00000100 ;
   508: CCPR1L = 0b00101101 ;
   509: CCP1CON = 0b00011100 ;
   510: 
   511: TMR2ON = 0;
   512:         unsigned char rr ;
   513:         int index; 
   514:         unsigned char data ;
   515: 
   516: SSPM1 = 0 ; //SPI Speed 16 MHZ/4 e deðiþtirildi...
   517: SSPM0 = 0;
   518:         
   519:         ReadMultiSector (  0x00  ) ;            
   520: 
   521: 
   522: read_index = 32 ;
   523: TMR2IF = 0;
   524: TMR2IE =1 ; 
   525: PEIE = 1;
   526: GIE = 1 ; 
   527: 
   528: 
   529: 
   530:         TMR2ON = 1;
   531: 
   532: 
   533: volatile char total_read = 0 ;
   534: 
   535: while( 1 )
   536:         {
   537: 
   538:         
   539:         //Accept bekleniyor...
   540:                 do
   541:                 {
   542:                 SSPBUF = 0xff ;
   543:                  while( !BF );
   544:                          
   545:         
   546:                 
   547:          }
   548:         while( SSPBUF != 0xFE );        
   549:                 total_read =  0 ;
   550:         
   551:         
   552:                 while( total_read < 4 )
   553:                 {
   554:                         
   555:                         index = 0 ;
   556:                                 while( index < 32 )
   557:                         {
   558:                         
   559:                         SSPBUF = 0xff ;
   560:                         while( !BF );
   561:                                 temp = SSPBUF ;
   562:                         
   563:                         SSPBUF = 0xff ;
   564:                         
   565:                         while( !BF );
   566:                 buffer[ index++ ] = SSPBUF ;    
   567:                         
   568:                 }//while index < 32
   569:                                         
   570: 
   571: 
   572: while( read_index > 32 );
   573:                         
   574: index = 32 ; 
   575:                                 while( index < 64 )
   576:                         {
   577:                         
   578:                         SSPBUF = 0xff ;
   579:                         while( !BF );
   580:                                 temp = SSPBUF ;
   581:                         
   582:                         SSPBUF = 0xff ;
   583:                         
   584:                         while( !BF );
   585:                 buffer[ index++ ] = SSPBUF ;
   586: 
   587:                         
   588:                         
   589:                         
   590:                         } //while( index < 64 )
   591:                         
   592: 
   593: while( read_index < 32 );
   594: 
   595:         
   596:                 
   597: 
   598: 
   599: total_read ++ ;
   600: 
   601: 
   602: }
   603:         
   604:                         
   605:         
   606:         
   607:                 
   608:                 
   609: 
   610:                         
   611:                         
   612:                 
   613:         
   614:                                         
   615:                                         
   616:                                         
   617:                                         
   618:                                         
   619:                                         
   620:                                         //CRC kýsmý
   621:                 
   622:         SSPBUF = 0xff ;
   623:                                         while( !BF );
   624:                 
   625:         temp = SSPBUF ;
   626:                         SSPBUF = 0xff ;
   627:                                         while( !BF );
   628:                 
   629:         temp = SSPBUF ;         
   630:                 
   631:                                 
   632:                                 
   633:         
   634:                 }
   635:         
   636: }
   637: 
   638: 
   639: 
   640: 
   641: 
   642: 
   643: 
